
BFMC2024_BRUSHED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d220  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800d3c0  0800d3c0  0000e3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db84  0800db84  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db84  0800db84  0000eb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db8c  0800db8c  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db8c  0800db8c  0000eb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db90  0800db90  0000eb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800db94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  200001e8  0800dd7c  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800dd7c  0000f7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001325e  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bac  00000000  00000000  00022476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00025028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec6  00000000  00000000  000262f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004252  00000000  00000000  000271be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001768d  00000000  00000000  0002b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f91f  00000000  00000000  00042a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e23bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006664  00000000  00000000  000e2400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e8a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3a8 	.word	0x0800d3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d3a8 	.word	0x0800d3a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <DegreeSec2RPM>:
#include <DC_motor.h>

float DegreeSec2RPM(float speed_degsec){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 8000ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001002:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800102c <DegreeSec2RPM+0x38>
 8001006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800100a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001030 <DegreeSec2RPM+0x3c>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ee07 3a90 	vmov	s15, r3
}
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	42700000 	.word	0x42700000
 8001030:	43b40000 	.word	0x43b40000

08001034 <Voltage2Duty>:

float Voltage2Duty(float u){
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/V_MAX;
 800103e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001042:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001098 <Voltage2Duty+0x64>
 8001046:	ee27 7a87 	vmul.f32	s14, s15, s14
 800104a:	eef1 6a0e 	vmov.f32	s13, #30	@ 0x40f00000  7.5
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 8001056:	edd7 7a03 	vldr	s15, [r7, #12]
 800105a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001098 <Voltage2Duty+0x64>
 800105e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	dd02      	ble.n	800106e <Voltage2Duty+0x3a>
		duty=100;
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <Voltage2Duty+0x68>)
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e009      	b.n	8001082 <Voltage2Duty+0x4e>
	} else if(duty<0){
 800106e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d502      	bpl.n	8001082 <Voltage2Duty+0x4e>
		duty = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	ee07 3a90 	vmov	s15, r3
}
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	42c80000 	.word	0x42c80000
 800109c:	42c80000 	.word	0x42c80000

080010a0 <set_PWM_and_dir>:
		dir = 1;
	}
	return dir;
}

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001104 <set_PWM_and_dir+0x64>
 80010ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <set_PWM_and_dir+0x68>)
 80010c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <set_PWM_and_dir+0x68>)
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 2a90 	vmov	r2, s15
 80010d8:	635a      	str	r2, [r3, #52]	@ 0x34

	if( dir == 0){
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <set_PWM_and_dir+0x4c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <set_PWM_and_dir+0x6c>)
 80010e6:	f003 fcab 	bl	8004a40 <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 80010ea:	e007      	b.n	80010fc <set_PWM_and_dir+0x5c>
	}else if ( dir == 1){
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d104      	bne.n	80010fc <set_PWM_and_dir+0x5c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <set_PWM_and_dir+0x6c>)
 80010f8:	f003 fca2 	bl	8004a40 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	42c80000 	.word	0x42c80000
 8001108:	40014400 	.word	0x40014400
 800110c:	40020800 	.word	0x40020800

08001110 <init_PID>:
#include "PID.h"
#include <stdio.h>

void init_PID(PID* p, float Tc, float u_max, float u_min, float offset){
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6178      	str	r0, [r7, #20]
 8001118:	ed87 0a04 	vstr	s0, [r7, #16]
 800111c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001120:	ed87 1a02 	vstr	s2, [r7, #8]
 8001124:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc = Tc;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	611a      	str	r2, [r3, #16]
	p->u_max = u_max;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	615a      	str	r2, [r3, #20]
	p->u_min = u_min;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	619a      	str	r2, [r3, #24]
	p->Iterm = 0;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
	p->e_old = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
	p->offset = offset;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd, float Kb){
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6178      	str	r0, [r7, #20]
 8001164:	ed87 0a04 	vstr	s0, [r7, #16]
 8001168:	edc7 0a03 	vstr	s1, [r7, #12]
 800116c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001170:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Kp = Kp;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	609a      	str	r2, [r3, #8]
	p->Kb = Kb;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	60da      	str	r2, [r3, #12]
}
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <resetPID>:

void resetPID(PID* p){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	p->Iterm = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
	p->e_old = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PID_controller>:

float PID_controller(PID* p , float y, float r){
 80011bc:	b480      	push	{r7}
 80011be:	b08d      	sub	sp, #52	@ 0x34
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011c8:	edc7 0a01 	vstr	s1, [r7, #4]
	float u;
	float newIterm;
	float e = 0;
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24

	e = r-y;
 80011d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (isinf(p->Iterm) || isnan(p->Iterm)) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80011e8:	eef0 7ae7 	vabs.f32	s15, s15
 80011ec:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800138c <PID_controller+0x1d0>
 80011f0:	eef4 7a47 	vcmp.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	bfd4      	ite	le
 80011fa:	2301      	movle	r3, #1
 80011fc:	2300      	movgt	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <PID_controller+0x5e>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001210:	eef4 7a67 	vcmp.f32	s15, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	d707      	bvc.n	800122a <PID_controller+0x6e>
		p->Iterm = 0;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
		p->e_old = 0;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
	}


	float Pterm = p->Kp*e;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	edc7 7a08 	vstr	s15, [r7, #32]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edd3 6a01 	vldr	s13, [r3, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a04 	vldr	s15, [r3, #16]
 800124e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edd3 7a07 	vldr	s15, [r3, #28]
 8001258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001260:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	edd3 6a02 	vldr	s13, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	edd3 7a07 	vldr	s15, [r3, #28]
 800127a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800127e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	edc7 7a07 	vstr	s15, [r7, #28]

	p->e_old = e;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128e:	61da      	str	r2, [r3, #28]


	u = Pterm + newIterm + Dterm + p->offset;
 8001290:	ed97 7a08 	vldr	s14, [r7, #32]
 8001294:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	edc7 7a06 	vstr	s15, [r7, #24]

	if(p->offset == 0){
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d11a      	bne.n	80012f8 <PID_controller+0x13c>
		// ANTI-WINDUP DEL TERMINE INTEGRALE
		if(newIterm > p->u_max){
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <PID_controller+0x122>
			newIterm = p->u_max;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012dc:	e00c      	b.n	80012f8 <PID_controller+0x13c>
		}
		else if(newIterm < p->u_min){
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d502      	bpl.n	80012f8 <PID_controller+0x13c>
			newIterm = p->u_min;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

		// saturazione con back-calculation
		float saturated_u = u;
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(saturated_u > p->u_max){
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001302:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd03      	ble.n	8001318 <PID_controller+0x15c>
			saturated_u = p->u_max;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001316:	e00c      	b.n	8001332 <PID_controller+0x176>
		}
		else if(saturated_u < p->u_min){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	edd3 7a06 	vldr	s15, [r3, #24]
 800131e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d502      	bpl.n	8001332 <PID_controller+0x176>
			saturated_u = p->u_min;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		float correction = p->Kb * (saturated_u - u) * p->Ki * p->Tc;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	ed93 7a03 	vldr	s14, [r3, #12]
 8001338:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800133c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001340:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	edd3 7a01 	vldr	s15, [r3, #4]
 800134e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	edd3 7a04 	vldr	s15, [r3, #16]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	edc7 7a05 	vstr	s15, [r7, #20]
		p->Iterm = newIterm + correction;
 8001360:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001364:	edd7 7a05 	vldr	s15, [r7, #20]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	edc3 7a08 	vstr	s15, [r3, #32]

		u = saturated_u;
 8001372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001374:	61bb      	str	r3, [r7, #24]

	if(p->offset == 0){
		//printf("%f;%f;%f\r\n", u, p->Iterm, correction);
	}

	return u;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	ee07 3a90 	vmov	s15, r3
}
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	3734      	adds	r7, #52	@ 0x34
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	7f7fffff 	.word	0x7f7fffff

08001390 <parseCSV>:


#define MAX_VALUES 3


void parseCSV(const char *csvString, float *values) {
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    char *token;
    char *copy = strdup(csvString); // Make a copy of the string to avoid modifying the original
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f009 fb10 	bl	800a9c0 <strdup>
 80013a0:	4603      	mov	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
    int index = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]

    token = strtok(copy, ",");
 80013a8:	4912      	ldr	r1, [pc, #72]	@ (80013f4 <parseCSV+0x64>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f009 fb36 	bl	800aa1c <strtok>
 80013b0:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80013b2:	e012      	b.n	80013da <parseCSV+0x4a>
        values[index++] = strtof(token, NULL); // Convert token to float and store in the array
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	613a      	str	r2, [r7, #16]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	18d4      	adds	r4, r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f008 f9fa 	bl	80097bc <strtof>
 80013c8:	eef0 7a40 	vmov.f32	s15, s0
 80013cc:	edc4 7a00 	vstr	s15, [r4]
        token = strtok(NULL, ",");
 80013d0:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <parseCSV+0x64>)
 80013d2:	2000      	movs	r0, #0
 80013d4:	f009 fb22 	bl	800aa1c <strtok>
 80013d8:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <parseCSV+0x56>
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dde6      	ble.n	80013b4 <parseCSV+0x24>
    }

    free(copy); // Free the dynamically allocated memory for the copied string
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f007 fb2a 	bl	8008a40 <free>
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	0800d3c0 	.word	0x0800d3c0

080013f8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4619      	mov	r1, r3
 8001406:	2007      	movs	r0, #7
 8001408:	f000 fadc 	bl	80019c4 <bno055_writeData>
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4619      	mov	r1, r3
 8001422:	203d      	movs	r0, #61	@ 0x3d
 8001424:	f000 face 	bl	80019c4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800142e:	2013      	movs	r0, #19
 8001430:	f000 fabc 	bl	80019ac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001434:	e002      	b.n	800143c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001436:	2007      	movs	r0, #7
 8001438:	f000 fab8 	bl	80019ac <bno055_delay>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ffe3 	bl	8001414 <bno055_setOperationMode>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}

08001452 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001456:	200c      	movs	r0, #12
 8001458:	f7ff ffdc 	bl	8001414 <bno055_setOperationMode>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001464:	2120      	movs	r1, #32
 8001466:	203f      	movs	r0, #63	@ 0x3f
 8001468:	f000 faac 	bl	80019c4 <bno055_writeData>
  bno055_delay(700);
 800146c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001470:	f000 fa9c 	bl	80019ac <bno055_delay>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  bno055_reset();
 800147e:	f7ff ffef 	bl	8001460 <bno055_reset>

  uint8_t id = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	2201      	movs	r2, #1
 800148a:	4619      	mov	r1, r3
 800148c:	2000      	movs	r0, #0
 800148e:	f000 fb85 	bl	8001b9c <bno055_readData>
  if (id != BNO055_ID) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2ba0      	cmp	r3, #160	@ 0xa0
 8001496:	d004      	beq.n	80014a2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4619      	mov	r1, r3
 800149c:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <bno055_setup+0x4c>)
 800149e:	f009 f91f 	bl	800a6e0 <iprintf>
  }
  bno055_setPage(0);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff ffa8 	bl	80013f8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	203f      	movs	r0, #63	@ 0x3f
 80014ac:	f000 fa8a 	bl	80019c4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80014b0:	f7ff ffc8 	bl	8001444 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 fa79 	bl	80019ac <bno055_delay>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	0800d3c4 	.word	0x0800d3c4

080014c8 <bno055_getSystemStatus>:
  uint8_t tmp;
  bno055_readData(BNO055_BL_REV_ID, &tmp, 1);
  return tmp;
}

uint8_t bno055_getSystemStatus() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ff92 	bl	80013f8 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_STATUS, &tmp, 1);
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	2039      	movs	r0, #57	@ 0x39
 80014dc:	f000 fb5e 	bl	8001b9c <bno055_readData>
  return tmp;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014f0:	b09e      	sub	sp, #120	@ 0x78
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ff7c 	bl	80013f8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001504:	2b20      	cmp	r3, #32
 8001506:	d108      	bne.n	800151a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001508:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001510:	2208      	movs	r2, #8
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fb42 	bl	8001b9c <bno055_readData>
 8001518:	e007      	b.n	800152a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800151a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800151e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001522:	2206      	movs	r2, #6
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fb39 	bl	8001b9c <bno055_readData>

  double scale = 1;
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b8b      	ldr	r3, [pc, #556]	@ (800175c <bno055_getVector+0x270>)
 8001530:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001538:	2b0e      	cmp	r3, #14
 800153a:	d109      	bne.n	8001550 <bno055_getVector+0x64>
    scale = magScale;
 800153c:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <bno055_getVector+0x274>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffe7 	bl	8000514 <__aeabi_ui2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800154e:	e03e      	b.n	80015ce <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001554:	2b08      	cmp	r3, #8
 8001556:	d007      	beq.n	8001568 <bno055_getVector+0x7c>
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	2b28      	cmp	r3, #40	@ 0x28
 800155e:	d003      	beq.n	8001568 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001564:	2b2e      	cmp	r3, #46	@ 0x2e
 8001566:	d109      	bne.n	800157c <bno055_getVector+0x90>
    scale = accelScale;
 8001568:	4b7e      	ldr	r3, [pc, #504]	@ (8001764 <bno055_getVector+0x278>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd1 	bl	8000514 <__aeabi_ui2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800157a:	e028      	b.n	80015ce <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800157c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001580:	2b14      	cmp	r3, #20
 8001582:	d109      	bne.n	8001598 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001584:	4b78      	ldr	r3, [pc, #480]	@ (8001768 <bno055_getVector+0x27c>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffc3 	bl	8000514 <__aeabi_ui2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001596:	e01a      	b.n	80015ce <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800159c:	2b1a      	cmp	r3, #26
 800159e:	d109      	bne.n	80015b4 <bno055_getVector+0xc8>
    scale = eulerScale;
 80015a0:	4b72      	ldr	r3, [pc, #456]	@ (800176c <bno055_getVector+0x280>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffb5 	bl	8000514 <__aeabi_ui2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80015b2:	e00c      	b.n	80015ce <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d108      	bne.n	80015ce <bno055_getVector+0xe2>
    scale = quaScale;
 80015bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001770 <bno055_getVector+0x284>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffa7 	bl	8000514 <__aeabi_ui2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d2:	2220      	movs	r2, #32
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 f9ea 	bl	800a9b0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80015dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d150      	bne.n	8001686 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015e4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff9c 	bl	8000534 <__aeabi_i2d>
 80015fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001600:	f7ff f92c 	bl	800085c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800160c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff88 	bl	8000534 <__aeabi_i2d>
 8001624:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001634:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff74 	bl	8000534 <__aeabi_i2d>
 800164c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001650:	f7ff f904 	bl	800085c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800165c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21b      	sxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff60 	bl	8000534 <__aeabi_i2d>
 8001674:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001678:	f7ff f8f0 	bl	800085c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001684:	e03b      	b.n	80016fe <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001686:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b21a      	sxth	r2, r3
 800168e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff4b 	bl	8000534 <__aeabi_i2d>
 800169e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016a2:	f7ff f8db 	bl	800085c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80016ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff37 	bl	8000534 <__aeabi_i2d>
 80016c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016ca:	f7ff f8c7 	bl	800085c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff23 	bl	8000534 <__aeabi_i2d>
 80016ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016f2:	f7ff f8b3 	bl	800085c <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 80016fe:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001702:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800170e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001712:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001716:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800171a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800171e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001722:	ec49 8b14 	vmov	d4, r8, r9
 8001726:	ec45 4b15 	vmov	d5, r4, r5
 800172a:	ec41 0b16 	vmov	d6, r0, r1
 800172e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001732:	eeb0 0a44 	vmov.f32	s0, s8
 8001736:	eef0 0a64 	vmov.f32	s1, s9
 800173a:	eeb0 1a45 	vmov.f32	s2, s10
 800173e:	eef0 1a65 	vmov.f32	s3, s11
 8001742:	eeb0 2a46 	vmov.f32	s4, s12
 8001746:	eef0 2a66 	vmov.f32	s5, s13
 800174a:	eeb0 3a47 	vmov.f32	s6, s14
 800174e:	eef0 3a67 	vmov.f32	s7, s15
 8001752:	3778      	adds	r7, #120	@ 0x78
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800175a:	bf00      	nop
 800175c:	3ff00000 	.word	0x3ff00000
 8001760:	20000006 	.word	0x20000006
 8001764:	20000000 	.word	0x20000000
 8001768:	20000002 	.word	0x20000002
 800176c:	20000004 	.word	0x20000004
 8001770:	20000008 	.word	0x20000008

08001774 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001774:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001778:	b090      	sub	sp, #64	@ 0x40
 800177a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 800177c:	2008      	movs	r0, #8
 800177e:	f7ff feb5 	bl	80014ec <bno055_getVector>
 8001782:	eeb0 4a40 	vmov.f32	s8, s0
 8001786:	eef0 4a60 	vmov.f32	s9, s1
 800178a:	eeb0 5a41 	vmov.f32	s10, s2
 800178e:	eef0 5a61 	vmov.f32	s11, s3
 8001792:	eeb0 6a42 	vmov.f32	s12, s4
 8001796:	eef0 6a62 	vmov.f32	s13, s5
 800179a:	eeb0 7a43 	vmov.f32	s14, s6
 800179e:	eef0 7a63 	vmov.f32	s15, s7
 80017a2:	ed87 4b08 	vstr	d4, [r7, #32]
 80017a6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80017aa:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80017ae:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80017b2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017b6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80017ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017c2:	ec49 8b14 	vmov	d4, r8, r9
 80017c6:	ec45 4b15 	vmov	d5, r4, r5
 80017ca:	ec41 0b16 	vmov	d6, r0, r1
 80017ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80017d2:	eeb0 0a44 	vmov.f32	s0, s8
 80017d6:	eef0 0a64 	vmov.f32	s1, s9
 80017da:	eeb0 1a45 	vmov.f32	s2, s10
 80017de:	eef0 1a65 	vmov.f32	s3, s11
 80017e2:	eeb0 2a46 	vmov.f32	s4, s12
 80017e6:	eef0 2a66 	vmov.f32	s5, s13
 80017ea:	eeb0 3a47 	vmov.f32	s6, s14
 80017ee:	eef0 3a67 	vmov.f32	s7, s15
 80017f2:	3740      	adds	r7, #64	@ 0x40
 80017f4:	46bd      	mov	sp, r7
 80017f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080017fa <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 80017fa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017fe:	b090      	sub	sp, #64	@ 0x40
 8001800:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001802:	200e      	movs	r0, #14
 8001804:	f7ff fe72 	bl	80014ec <bno055_getVector>
 8001808:	eeb0 4a40 	vmov.f32	s8, s0
 800180c:	eef0 4a60 	vmov.f32	s9, s1
 8001810:	eeb0 5a41 	vmov.f32	s10, s2
 8001814:	eef0 5a61 	vmov.f32	s11, s3
 8001818:	eeb0 6a42 	vmov.f32	s12, s4
 800181c:	eef0 6a62 	vmov.f32	s13, s5
 8001820:	eeb0 7a43 	vmov.f32	s14, s6
 8001824:	eef0 7a63 	vmov.f32	s15, s7
 8001828:	ed87 4b08 	vstr	d4, [r7, #32]
 800182c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001830:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001834:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800183c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001840:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001848:	ec49 8b14 	vmov	d4, r8, r9
 800184c:	ec45 4b15 	vmov	d5, r4, r5
 8001850:	ec41 0b16 	vmov	d6, r0, r1
 8001854:	ec43 2b17 	vmov	d7, r2, r3
}
 8001858:	eeb0 0a44 	vmov.f32	s0, s8
 800185c:	eef0 0a64 	vmov.f32	s1, s9
 8001860:	eeb0 1a45 	vmov.f32	s2, s10
 8001864:	eef0 1a65 	vmov.f32	s3, s11
 8001868:	eeb0 2a46 	vmov.f32	s4, s12
 800186c:	eef0 2a66 	vmov.f32	s5, s13
 8001870:	eeb0 3a47 	vmov.f32	s6, s14
 8001874:	eef0 3a67 	vmov.f32	s7, s15
 8001878:	3740      	adds	r7, #64	@ 0x40
 800187a:	46bd      	mov	sp, r7
 800187c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001880 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001884:	b090      	sub	sp, #64	@ 0x40
 8001886:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001888:	2014      	movs	r0, #20
 800188a:	f7ff fe2f 	bl	80014ec <bno055_getVector>
 800188e:	eeb0 4a40 	vmov.f32	s8, s0
 8001892:	eef0 4a60 	vmov.f32	s9, s1
 8001896:	eeb0 5a41 	vmov.f32	s10, s2
 800189a:	eef0 5a61 	vmov.f32	s11, s3
 800189e:	eeb0 6a42 	vmov.f32	s12, s4
 80018a2:	eef0 6a62 	vmov.f32	s13, s5
 80018a6:	eeb0 7a43 	vmov.f32	s14, s6
 80018aa:	eef0 7a63 	vmov.f32	s15, s7
 80018ae:	ed87 4b08 	vstr	d4, [r7, #32]
 80018b2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80018b6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80018ba:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80018be:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018c2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80018c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018ce:	ec49 8b14 	vmov	d4, r8, r9
 80018d2:	ec45 4b15 	vmov	d5, r4, r5
 80018d6:	ec41 0b16 	vmov	d6, r0, r1
 80018da:	ec43 2b17 	vmov	d7, r2, r3
}
 80018de:	eeb0 0a44 	vmov.f32	s0, s8
 80018e2:	eef0 0a64 	vmov.f32	s1, s9
 80018e6:	eeb0 1a45 	vmov.f32	s2, s10
 80018ea:	eef0 1a65 	vmov.f32	s3, s11
 80018ee:	eeb0 2a46 	vmov.f32	s4, s12
 80018f2:	eef0 2a66 	vmov.f32	s5, s13
 80018f6:	eeb0 3a47 	vmov.f32	s6, s14
 80018fa:	eef0 3a67 	vmov.f32	s7, s15
 80018fe:	3740      	adds	r7, #64	@ 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001906 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001906:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190a:	b090      	sub	sp, #64	@ 0x40
 800190c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800190e:	2020      	movs	r0, #32
 8001910:	f7ff fdec 	bl	80014ec <bno055_getVector>
 8001914:	eeb0 4a40 	vmov.f32	s8, s0
 8001918:	eef0 4a60 	vmov.f32	s9, s1
 800191c:	eeb0 5a41 	vmov.f32	s10, s2
 8001920:	eef0 5a61 	vmov.f32	s11, s3
 8001924:	eeb0 6a42 	vmov.f32	s12, s4
 8001928:	eef0 6a62 	vmov.f32	s13, s5
 800192c:	eeb0 7a43 	vmov.f32	s14, s6
 8001930:	eef0 7a63 	vmov.f32	s15, s7
 8001934:	ed87 4b08 	vstr	d4, [r7, #32]
 8001938:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800193c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001940:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001948:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800194c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001954:	ec49 8b14 	vmov	d4, r8, r9
 8001958:	ec45 4b15 	vmov	d5, r4, r5
 800195c:	ec41 0b16 	vmov	d6, r0, r1
 8001960:	ec43 2b17 	vmov	d7, r2, r3
}
 8001964:	eeb0 0a44 	vmov.f32	s0, s8
 8001968:	eef0 0a64 	vmov.f32	s1, s9
 800196c:	eeb0 1a45 	vmov.f32	s2, s10
 8001970:	eef0 1a65 	vmov.f32	s3, s11
 8001974:	eeb0 2a46 	vmov.f32	s4, s12
 8001978:	eef0 2a66 	vmov.f32	s5, s13
 800197c:	eeb0 3a47 	vmov.f32	s6, s14
 8001980:	eef0 3a67 	vmov.f32	s7, s15
 8001984:	3740      	adds	r7, #64	@ 0x40
 8001986:	46bd      	mov	sp, r7
 8001988:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800198c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <bno055_assignI2C+0x1c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000204 	.word	0x20000204

080019ac <bno055_delay>:

void bno055_delay(int time) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 ff0a 	bl	80037d0 <HAL_Delay>
#endif
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	733b      	strb	r3, [r7, #12]
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80019dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001b48 <bno055_writeData+0x184>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	f107 020c 	add.w	r2, r7, #12
 80019e4:	230a      	movs	r3, #10
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2302      	movs	r3, #2
 80019ea:	2150      	movs	r1, #80	@ 0x50
 80019ec:	f003 f99e 	bl	8004d2c <HAL_I2C_Master_Transmit>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a0 	beq.w	8001b3c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d103      	bne.n	8001a0a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001a02:	4852      	ldr	r0, [pc, #328]	@ (8001b4c <bno055_writeData+0x188>)
 8001a04:	f008 fed4 	bl	800a7b0 <puts>
 8001a08:	e012      	b.n	8001a30 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d103      	bne.n	8001a18 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001a10:	484f      	ldr	r0, [pc, #316]	@ (8001b50 <bno055_writeData+0x18c>)
 8001a12:	f008 fecd 	bl	800a7b0 <puts>
 8001a16:	e00b      	b.n	8001a30 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d103      	bne.n	8001a26 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001a1e:	484d      	ldr	r0, [pc, #308]	@ (8001b54 <bno055_writeData+0x190>)
 8001a20:	f008 fec6 	bl	800a7b0 <puts>
 8001a24:	e004      	b.n	8001a30 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	484b      	ldr	r0, [pc, #300]	@ (8001b58 <bno055_writeData+0x194>)
 8001a2c:	f008 fe58 	bl	800a6e0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001a30:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <bno055_writeData+0x184>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fcab 	bl	8005390 <HAL_I2C_GetError>
 8001a3a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07e      	beq.n	8001b40 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d103      	bne.n	8001a50 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001a48:	4844      	ldr	r0, [pc, #272]	@ (8001b5c <bno055_writeData+0x198>)
 8001a4a:	f008 feb1 	bl	800a7b0 <puts>
 8001a4e:	e021      	b.n	8001a94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001a56:	4842      	ldr	r0, [pc, #264]	@ (8001b60 <bno055_writeData+0x19c>)
 8001a58:	f008 feaa 	bl	800a7b0 <puts>
 8001a5c:	e01a      	b.n	8001a94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d103      	bne.n	8001a6c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001a64:	483f      	ldr	r0, [pc, #252]	@ (8001b64 <bno055_writeData+0x1a0>)
 8001a66:	f008 fea3 	bl	800a7b0 <puts>
 8001a6a:	e013      	b.n	8001a94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d103      	bne.n	8001a7a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001a72:	483d      	ldr	r0, [pc, #244]	@ (8001b68 <bno055_writeData+0x1a4>)
 8001a74:	f008 fe9c 	bl	800a7b0 <puts>
 8001a78:	e00c      	b.n	8001a94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d103      	bne.n	8001a88 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001a80:	483a      	ldr	r0, [pc, #232]	@ (8001b6c <bno055_writeData+0x1a8>)
 8001a82:	f008 fe95 	bl	800a7b0 <puts>
 8001a86:	e005      	b.n	8001a94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d102      	bne.n	8001a94 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001a8e:	4838      	ldr	r0, [pc, #224]	@ (8001b70 <bno055_writeData+0x1ac>)
 8001a90:	f008 fe8e 	bl	800a7b0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <bno055_writeData+0x184>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fc6b 	bl	8005374 <HAL_I2C_GetState>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001aa8:	4832      	ldr	r0, [pc, #200]	@ (8001b74 <bno055_writeData+0x1b0>)
 8001aaa:	f008 fe81 	bl	800a7b0 <puts>
 8001aae:	e048      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d103      	bne.n	8001abe <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ab6:	482f      	ldr	r0, [pc, #188]	@ (8001b74 <bno055_writeData+0x1b0>)
 8001ab8:	f008 fe7a 	bl	800a7b0 <puts>
 8001abc:	e041      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b24      	cmp	r3, #36	@ 0x24
 8001ac2:	d103      	bne.n	8001acc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001ac4:	482c      	ldr	r0, [pc, #176]	@ (8001b78 <bno055_writeData+0x1b4>)
 8001ac6:	f008 fe73 	bl	800a7b0 <puts>
 8001aca:	e03a      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b21      	cmp	r3, #33	@ 0x21
 8001ad0:	d103      	bne.n	8001ada <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001ad2:	482a      	ldr	r0, [pc, #168]	@ (8001b7c <bno055_writeData+0x1b8>)
 8001ad4:	f008 fe6c 	bl	800a7b0 <puts>
 8001ad8:	e033      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b22      	cmp	r3, #34	@ 0x22
 8001ade:	d103      	bne.n	8001ae8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001ae0:	4827      	ldr	r0, [pc, #156]	@ (8001b80 <bno055_writeData+0x1bc>)
 8001ae2:	f008 fe65 	bl	800a7b0 <puts>
 8001ae6:	e02c      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b28      	cmp	r3, #40	@ 0x28
 8001aec:	d103      	bne.n	8001af6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001aee:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <bno055_writeData+0x1c0>)
 8001af0:	f008 fe5e 	bl	800a7b0 <puts>
 8001af4:	e025      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b29      	cmp	r3, #41	@ 0x29
 8001afa:	d103      	bne.n	8001b04 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001afc:	4822      	ldr	r0, [pc, #136]	@ (8001b88 <bno055_writeData+0x1c4>)
 8001afe:	f008 fe57 	bl	800a7b0 <puts>
 8001b02:	e01e      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b08:	d103      	bne.n	8001b12 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001b0a:	4820      	ldr	r0, [pc, #128]	@ (8001b8c <bno055_writeData+0x1c8>)
 8001b0c:	f008 fe50 	bl	800a7b0 <puts>
 8001b10:	e017      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b60      	cmp	r3, #96	@ 0x60
 8001b16:	d103      	bne.n	8001b20 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001b18:	481d      	ldr	r0, [pc, #116]	@ (8001b90 <bno055_writeData+0x1cc>)
 8001b1a:	f008 fe49 	bl	800a7b0 <puts>
 8001b1e:	e010      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b24:	d103      	bne.n	8001b2e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001b26:	481b      	ldr	r0, [pc, #108]	@ (8001b94 <bno055_writeData+0x1d0>)
 8001b28:	f008 fe42 	bl	800a7b0 <puts>
 8001b2c:	e009      	b.n	8001b42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2be0      	cmp	r3, #224	@ 0xe0
 8001b32:	d106      	bne.n	8001b42 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001b34:	4818      	ldr	r0, [pc, #96]	@ (8001b98 <bno055_writeData+0x1d4>)
 8001b36:	f008 fe3b 	bl	800a7b0 <puts>
 8001b3a:	e002      	b.n	8001b42 <bno055_writeData+0x17e>
    return;
 8001b3c:	bf00      	nop
 8001b3e:	e000      	b.n	8001b42 <bno055_writeData+0x17e>
    return;
 8001b40:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000204 	.word	0x20000204
 8001b4c:	0800d400 	.word	0x0800d400
 8001b50:	0800d424 	.word	0x0800d424
 8001b54:	0800d44c 	.word	0x0800d44c
 8001b58:	0800d470 	.word	0x0800d470
 8001b5c:	0800d488 	.word	0x0800d488
 8001b60:	0800d49c 	.word	0x0800d49c
 8001b64:	0800d4b0 	.word	0x0800d4b0
 8001b68:	0800d4c4 	.word	0x0800d4c4
 8001b6c:	0800d4d8 	.word	0x0800d4d8
 8001b70:	0800d4ec 	.word	0x0800d4ec
 8001b74:	0800d504 	.word	0x0800d504
 8001b78:	0800d51c 	.word	0x0800d51c
 8001b7c:	0800d530 	.word	0x0800d530
 8001b80:	0800d548 	.word	0x0800d548
 8001b84:	0800d560 	.word	0x0800d560
 8001b88:	0800d578 	.word	0x0800d578
 8001b8c:	0800d598 	.word	0x0800d598
 8001b90:	0800d5b8 	.word	0x0800d5b8
 8001b94:	0800d5d0 	.word	0x0800d5d0
 8001b98:	0800d5e8 	.word	0x0800d5e8

08001b9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <bno055_readData+0x40>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	1dfa      	adds	r2, r7, #7
 8001bb2:	2364      	movs	r3, #100	@ 0x64
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2150      	movs	r1, #80	@ 0x50
 8001bba:	f003 f8b7 	bl	8004d2c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <bno055_readData+0x40>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2264      	movs	r2, #100	@ 0x64
 8001bc8:	9200      	str	r2, [sp, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	2150      	movs	r1, #80	@ 0x50
 8001bce:	f003 f9ab 	bl	8004f28 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000204 	.word	0x20000204

08001be0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be4:	b08d      	sub	sp, #52	@ 0x34
 8001be6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001be8:	f001 fd80 	bl	80036ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bec:	f000 fb3c 	bl	8002268 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bf0:	f000 fe02 	bl	80027f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001bf4:	f000 fde0 	bl	80027b8 <MX_DMA_Init>
	MX_I2C1_Init();
 8001bf8:	f000 fbf4 	bl	80023e4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001bfc:	f000 fc20 	bl	8002440 <MX_TIM1_Init>
	MX_TIM10_Init();
 8001c00:	f000 fd14 	bl	800262c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001c04:	f000 fd60 	bl	80026c8 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001c08:	f000 fd82 	bl	8002710 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001c0c:	f000 fcba 	bl	8002584 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8001c10:	f000 fda8 	bl	8002764 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001c14:	f000 fb94 	bl	8002340 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	//RESET BNO055
	resetBNO055();
 8001c18:	f001 f8f6 	bl	8002e08 <resetBNO055>
	printf("BNO055 Resetted!\r\n");
 8001c1c:	489e      	ldr	r0, [pc, #632]	@ (8001e98 <main+0x2b8>)
 8001c1e:	f008 fdc7 	bl	800a7b0 <puts>

	printf("Starting BNO055!\r\n");
 8001c22:	489e      	ldr	r0, [pc, #632]	@ (8001e9c <main+0x2bc>)
 8001c24:	f008 fdc4 	bl	800a7b0 <puts>
	bno055_assignI2C(&hi2c1);
 8001c28:	489d      	ldr	r0, [pc, #628]	@ (8001ea0 <main+0x2c0>)
 8001c2a:	f7ff feaf 	bl	800198c <bno055_assignI2C>
	bno055_setup();
 8001c2e:	f7ff fc23 	bl	8001478 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001c32:	f7ff fc0e 	bl	8001452 <bno055_setOperationModeNDOF>
	printf("BNO055 System Status: %i\r\n", bno055_getSystemStatus());
 8001c36:	f7ff fc47 	bl	80014c8 <bno055_getSystemStatus>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4899      	ldr	r0, [pc, #612]	@ (8001ea4 <main+0x2c4>)
 8001c40:	f008 fd4e 	bl	800a6e0 <iprintf>
	printf("BNO055 Initialization Completed!\r\n");
 8001c44:	4898      	ldr	r0, [pc, #608]	@ (8001ea8 <main+0x2c8>)
 8001c46:	f008 fdb3 	bl	800a7b0 <puts>


	//attivo DMA per ricezione dati seriale
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8001c4a:	2232      	movs	r2, #50	@ 0x32
 8001c4c:	4997      	ldr	r1, [pc, #604]	@ (8001eac <main+0x2cc>)
 8001c4e:	4898      	ldr	r0, [pc, #608]	@ (8001eb0 <main+0x2d0>)
 8001c50:	f005 fd99 	bl	8007786 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001c54:	4b97      	ldr	r3, [pc, #604]	@ (8001eb4 <main+0x2d4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b96      	ldr	r3, [pc, #600]	@ (8001eb4 <main+0x2d4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0208 	bic.w	r2, r2, #8
 8001c62:	601a      	str	r2, [r3, #0]
	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c64:	2100      	movs	r1, #0
 8001c66:	4894      	ldr	r0, [pc, #592]	@ (8001eb8 <main+0x2d8>)
 8001c68:	f004 fc70 	bl	800654c <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4893      	ldr	r0, [pc, #588]	@ (8001ebc <main+0x2dc>)
 8001c70:	f004 fc6c 	bl	800654c <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c74:	213c      	movs	r1, #60	@ 0x3c
 8001c76:	4892      	ldr	r0, [pc, #584]	@ (8001ec0 <main+0x2e0>)
 8001c78:	f004 fdbe 	bl	80067f8 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 8001c7c:	4891      	ldr	r0, [pc, #580]	@ (8001ec4 <main+0x2e4>)
 8001c7e:	f004 fba9 	bl	80063d4 <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION, NEUTRAL_PWM);
 8001c82:	eddf 1a91 	vldr	s3, [pc, #580]	@ 8001ec8 <main+0x2e8>
 8001c86:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8001ecc <main+0x2ec>
 8001c8a:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8001ed0 <main+0x2f0>
 8001c8e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8001ed4 <main+0x2f4>
 8001c92:	4891      	ldr	r0, [pc, #580]	@ (8001ed8 <main+0x2f8>)
 8001c94:	f7ff fa3c 	bl	8001110 <init_PID>
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0, 0);
 8001c98:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8001ec8 <main+0x2e8>
 8001c9c:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8001ec8 <main+0x2e8>
 8001ca0:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8001edc <main+0x2fc>
 8001ca4:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 8001ee0 <main+0x300>
 8001ca8:	488b      	ldr	r0, [pc, #556]	@ (8001ed8 <main+0x2f8>)
 8001caa:	f7ff fa57 	bl	800115c <tune_PID>

	//PID steering
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING, 0);
 8001cae:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001ec8 <main+0x2e8>
 8001cb2:	eebb 1a07 	vmov.f32	s2, #183	@ 0xc1b80000 -23.0
 8001cb6:	eef3 0a07 	vmov.f32	s1, #55	@ 0x41b80000  23.0
 8001cba:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8001ed4 <main+0x2f4>
 8001cbe:	4889      	ldr	r0, [pc, #548]	@ (8001ee4 <main+0x304>)
 8001cc0:	f7ff fa26 	bl	8001110 <init_PID>
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0, 50);
 8001cc4:	eddf 1a88 	vldr	s3, [pc, #544]	@ 8001ee8 <main+0x308>
 8001cc8:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 8001ec8 <main+0x2e8>
 8001ccc:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8001eec <main+0x30c>
 8001cd0:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001cd4:	4883      	ldr	r0, [pc, #524]	@ (8001ee4 <main+0x304>)
 8001cd6:	f7ff fa41 	bl	800115c <tune_PID>

	printf("Initialization Completed!\r\n");
 8001cda:	4885      	ldr	r0, [pc, #532]	@ (8001ef0 <main+0x310>)
 8001cdc:	f008 fd68 	bl	800a7b0 <puts>

	//Traction Motor Neutral
	set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001ce0:	4b84      	ldr	r3, [pc, #528]	@ (8001ef4 <main+0x314>)
 8001ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff f9d9 	bl	80010a0 <set_PWM_and_dir>
	//Servo Neutral Position
	servo_motor(0);
 8001cee:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8001ec8 <main+0x2e8>
 8001cf2:	f001 f8a9 	bl	8002e48 <servo_motor>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//-------------------------------------------------------------
		//Controllo
		if(bno055_getSystemStatus() != 5)
 8001cf6:	f7ff fbe7 	bl	80014c8 <bno055_getSystemStatus>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d001      	beq.n	8001d04 <main+0x124>
			HAL_NVIC_SystemReset();
 8001d00:	f002 f907 	bl	8003f12 <HAL_NVIC_SystemReset>

		if (HardwareEnable == 1 && dataRX.enable == 1) {
 8001d04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef8 <main+0x318>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f040 8287 	bne.w	800221c <main+0x63c>
 8001d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001efc <main+0x31c>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	f040 8282 	bne.w	800221c <main+0x63c>
			if (Flag_10ms == 1) {
 8001d18:	4b79      	ldr	r3, [pc, #484]	@ (8001f00 <main+0x320>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f040 8294 	bne.w	800224a <main+0x66a>
				Flag_10ms = 0;
 8001d22:	4b77      	ldr	r3, [pc, #476]	@ (8001f00 <main+0x320>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
				//-------------------------------------------------------------

				//TRACTION control

				//Measure speed with encoder
				vehicleState.ref_count = TIM2->ARR / 2;
 8001d28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b70      	ldr	r3, [pc, #448]	@ (8001ef4 <main+0x314>)
 8001d34:	605a      	str	r2, [r3, #4]
				vehicleState.delta_count = vehicleState.counts - vehicleState.ref_count;
 8001d36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <main+0x314>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef4 <main+0x314>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a6c      	ldr	r2, [pc, #432]	@ (8001ef4 <main+0x314>)
 8001d42:	6093      	str	r3, [r2, #8]

				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360) / ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO));
 8001d44:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef4 <main+0x314>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbef 	bl	8000534 <__aeabi_i2d>
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <main+0x324>)
 8001d5c:	f7fe fd7e 	bl	800085c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff46 	bl	8000bf8 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a61      	ldr	r2, [pc, #388]	@ (8001ef4 <main+0x314>)
 8001d70:	60d3      	str	r3, [r2, #12]
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg / ENCODER_SAMPLING_TIME;
 8001d72:	4b60      	ldr	r3, [pc, #384]	@ (8001ef4 <main+0x314>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbee 	bl	8000558 <__aeabi_f2d>
 8001d7c:	a344      	add	r3, pc, #272	@ (adr r3, 8001e90 <main+0x2b0>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fd6b 	bl	800085c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff33 	bl	8000bf8 <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a57      	ldr	r2, [pc, #348]	@ (8001ef4 <main+0x314>)
 8001d96:	6113      	str	r3, [r2, #16]
				tempRPM = DegreeSec2RPM(vehicleState.motor_speed_deg_sec);
 8001d98:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <main+0x314>)
 8001d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	f7ff f927 	bl	8000ff4 <DegreeSec2RPM>
 8001da6:	eef0 7a40 	vmov.f32	s15, s0
 8001daa:	4b57      	ldr	r3, [pc, #348]	@ (8001f08 <main+0x328>)
 8001dac:	edc3 7a00 	vstr	s15, [r3]

				//Filtraggio della velocità
				ArrayRPM[PtrRPM] = tempRPM;
 8001db0:	4b56      	ldr	r3, [pc, #344]	@ (8001f0c <main+0x32c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a54      	ldr	r2, [pc, #336]	@ (8001f08 <main+0x328>)
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	4955      	ldr	r1, [pc, #340]	@ (8001f10 <main+0x330>)
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	601a      	str	r2, [r3, #0]
				MeanRPM = 0;
 8001dc0:	4b54      	ldr	r3, [pc, #336]	@ (8001f14 <main+0x334>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_RPM_VALUES; i++){
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dcc:	e010      	b.n	8001df0 <main+0x210>
					MeanRPM += ArrayRPM[i];
 8001dce:	4a50      	ldr	r2, [pc, #320]	@ (8001f10 <main+0x330>)
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	ed93 7a00 	vldr	s14, [r3]
 8001dda:	4b4e      	ldr	r3, [pc, #312]	@ (8001f14 <main+0x334>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f14 <main+0x334>)
 8001de6:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i < MAX_RPM_VALUES; i++){
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	3301      	adds	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	ddeb      	ble.n	8001dce <main+0x1ee>
				}
				MeanRPM /= MAX_RPM_VALUES;
 8001df6:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <main+0x334>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e04:	4b43      	ldr	r3, [pc, #268]	@ (8001f14 <main+0x334>)
 8001e06:	edc3 7a00 	vstr	s15, [r3]

				if(PtrRPM == MAX_RPM_VALUES-1)
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <main+0x32c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b09      	cmp	r3, #9
 8001e10:	d103      	bne.n	8001e1a <main+0x23a>
					PtrRPM = 0;
 8001e12:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <main+0x32c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e004      	b.n	8001e24 <main+0x244>
				else
					PtrRPM++;
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <main+0x32c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a3a      	ldr	r2, [pc, #232]	@ (8001f0c <main+0x32c>)
 8001e22:	6013      	str	r3, [r2, #0]
				vehicleState.motor_speed_RPM = MeanRPM;
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <main+0x334>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a32      	ldr	r2, [pc, #200]	@ (8001ef4 <main+0x314>)
 8001e2a:	6153      	str	r3, [r2, #20]

				//Speed reference for motor
				vehicleState.motor_speed_ref_RPM = dataRX.linear_speed_ref_m_s / RPM_2_m_s;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <main+0x31c>)
 8001e2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <main+0x338>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <main+0x314>)
 8001e3e:	edc3 7a07 	vstr	s15, [r3, #28]

				u_trazione = PID_controller(&pid_traction, vehicleState.motor_speed_RPM, vehicleState.motor_speed_ref_RPM);
 8001e42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef4 <main+0x314>)
 8001e44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <main+0x314>)
 8001e4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e4e:	eef0 0a47 	vmov.f32	s1, s14
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	4820      	ldr	r0, [pc, #128]	@ (8001ed8 <main+0x2f8>)
 8001e58:	f7ff f9b0 	bl	80011bc <PID_controller>
 8001e5c:	ee10 3a10 	vmov	r3, s0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb79 	bl	8000558 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	492c      	ldr	r1, [pc, #176]	@ (8001f1c <main+0x33c>)
 8001e6c:	e9c1 2300 	strd	r2, r3, [r1]

				//Assegno il duty al motore
				if (vehicleState.motor_speed_ref_RPM == 0)
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <main+0x314>)
 8001e72:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d14f      	bne.n	8001f20 <main+0x340>
					set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001e80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <main+0x314>)
 8001e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e86:	4619      	mov	r1, r3
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff f909 	bl	80010a0 <set_PWM_and_dir>
 8001e8e:	e05f      	b.n	8001f50 <main+0x370>
 8001e90:	47ae147b 	.word	0x47ae147b
 8001e94:	3f847ae1 	.word	0x3f847ae1
 8001e98:	0800d600 	.word	0x0800d600
 8001e9c:	0800d614 	.word	0x0800d614
 8001ea0:	20000250 	.word	0x20000250
 8001ea4:	0800d628 	.word	0x0800d628
 8001ea8:	0800d644 	.word	0x0800d644
 8001eac:	20000624 	.word	0x20000624
 8001eb0:	20000408 	.word	0x20000408
 8001eb4:	2000044c 	.word	0x2000044c
 8001eb8:	200002a4 	.word	0x200002a4
 8001ebc:	20000334 	.word	0x20000334
 8001ec0:	200002ec 	.word	0x200002ec
 8001ec4:	2000037c 	.word	0x2000037c
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	c0266666 	.word	0xc0266666
 8001ed0:	40266666 	.word	0x40266666
 8001ed4:	3c23d70a 	.word	0x3c23d70a
 8001ed8:	20000538 	.word	0x20000538
 8001edc:	3b9374bc 	.word	0x3b9374bc
 8001ee0:	3a902de0 	.word	0x3a902de0
 8001ee4:	200005b0 	.word	0x200005b0
 8001ee8:	42480000 	.word	0x42480000
 8001eec:	437a0000 	.word	0x437a0000
 8001ef0:	0800d668 	.word	0x0800d668
 8001ef4:	200004f8 	.word	0x200004f8
 8001ef8:	200005ec 	.word	0x200005ec
 8001efc:	200004ac 	.word	0x200004ac
 8001f00:	200005e8 	.word	0x200005e8
 8001f04:	40c00000 	.word	0x40c00000
 8001f08:	200005f0 	.word	0x200005f0
 8001f0c:	200005f4 	.word	0x200005f4
 8001f10:	200005fc 	.word	0x200005fc
 8001f14:	200005f8 	.word	0x200005f8
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	200005d8 	.word	0x200005d8
				else
					set_PWM_and_dir((uint32_t) Voltage2Duty(u_trazione), vehicleState.motor_direction_ref);
 8001f20:	4bb5      	ldr	r3, [pc, #724]	@ (80021f8 <main+0x618>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe65 	bl	8000bf8 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	ee00 3a10 	vmov	s0, r3
 8001f34:	f7ff f87e 	bl	8001034 <Voltage2Duty>
 8001f38:	eef0 7a40 	vmov.f32	s15, s0
 8001f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f40:	4bae      	ldr	r3, [pc, #696]	@ (80021fc <main+0x61c>)
 8001f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f46:	4619      	mov	r1, r3
 8001f48:	ee17 0a90 	vmov	r0, s15
 8001f4c:	f7ff f8a8 	bl	80010a0 <set_PWM_and_dir>
				//-------------------------------------------------------------

				//STEERING control

				//Get yawrate from IMU
				bno055_vector_t v = bno055_getVectorGyroscope();
 8001f50:	f7ff fc96 	bl	8001880 <bno055_getVectorGyroscope>
 8001f54:	eeb0 4a40 	vmov.f32	s8, s0
 8001f58:	eef0 4a60 	vmov.f32	s9, s1
 8001f5c:	eeb0 5a41 	vmov.f32	s10, s2
 8001f60:	eef0 5a61 	vmov.f32	s11, s3
 8001f64:	eeb0 6a42 	vmov.f32	s12, s4
 8001f68:	eef0 6a62 	vmov.f32	s13, s5
 8001f6c:	eeb0 7a43 	vmov.f32	s14, s6
 8001f70:	eef0 7a63 	vmov.f32	s15, s7
 8001f74:	ed87 4b00 	vstr	d4, [r7]
 8001f78:	ed87 5b02 	vstr	d5, [r7, #8]
 8001f7c:	ed87 6b04 	vstr	d6, [r7, #16]
 8001f80:	ed87 7b06 	vstr	d7, [r7, #24]
				vehicleState.yaw_rate_deg_sec = v.z;
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	499c      	ldr	r1, [pc, #624]	@ (80021fc <main+0x61c>)
 8001f8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec * M_PI) / 180;
 8001f8e:	4b9b      	ldr	r3, [pc, #620]	@ (80021fc <main+0x61c>)
 8001f90:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001f94:	a396      	add	r3, pc, #600	@ (adr r3, 80021f0 <main+0x610>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb35 	bl	8000608 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b95      	ldr	r3, [pc, #596]	@ (8002200 <main+0x620>)
 8001fac:	f7fe fc56 	bl	800085c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4991      	ldr	r1, [pc, #580]	@ (80021fc <main+0x61c>)
 8001fb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				last_read = dataRX.curvature_radius_ref_m;
 8001fba:	4b92      	ldr	r3, [pc, #584]	@ (8002204 <main+0x624>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a92      	ldr	r2, [pc, #584]	@ (8002208 <main+0x628>)
 8001fc0:	6013      	str	r3, [r2, #0]

				if (dataRX.curvature_radius_ref_m >= MAX_CURVATURE_RADIUS_FOR_STRAIGHT) {
 8001fc2:	4b90      	ldr	r3, [pc, #576]	@ (8002204 <main+0x624>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd4:	db38      	blt.n	8002048 <main+0x468>

					vehicleState.yaw_rate_ref_rad_sec = 0;
 8001fd6:	4989      	ldr	r1, [pc, #548]	@ (80021fc <main+0x61c>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

					u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec);
 8001fe4:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <main+0x61c>)
 8001fe6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fe03 	bl	8000bf8 <__aeabi_d2f>
 8001ff2:	4606      	mov	r6, r0
 8001ff4:	4b81      	ldr	r3, [pc, #516]	@ (80021fc <main+0x61c>)
 8001ff6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fdfb 	bl	8000bf8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	ee00 3a90 	vmov	s1, r3
 8002008:	ee00 6a10 	vmov	s0, r6
 800200c:	487f      	ldr	r0, [pc, #508]	@ (800220c <main+0x62c>)
 800200e:	f7ff f8d5 	bl	80011bc <PID_controller>
 8002012:	ee10 3a10 	vmov	r3, s0
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa9e 	bl	8000558 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	497b      	ldr	r1, [pc, #492]	@ (8002210 <main+0x630>)
 8002022:	e9c1 2300 	strd	r2, r3, [r1]

					servo_motor(-u_sterzo); //Minus because yawrate and steering are opposite
 8002026:	4b7a      	ldr	r3, [pc, #488]	@ (8002210 <main+0x630>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fde2 	bl	8000bf8 <__aeabi_d2f>
 8002034:	4603      	mov	r3, r0
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef1 7a67 	vneg.f32	s15, s15
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	f000 ff01 	bl	8002e48 <servo_motor>
 8002046:	e0c8      	b.n	80021da <main+0x5fa>
				} else {

					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM * RPM_2_m_s;
 8002048:	4b6c      	ldr	r3, [pc, #432]	@ (80021fc <main+0x61c>)
 800204a:	ed93 7a05 	vldr	s14, [r3, #20]
 800204e:	4b71      	ldr	r3, [pc, #452]	@ (8002214 <main+0x634>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	4b68      	ldr	r3, [pc, #416]	@ (80021fc <main+0x61c>)
 800205a:	edc3 7a06 	vstr	s15, [r3, #24]
					if (dataRX.curvature_radius_ref_m == 0)
 800205e:	4b69      	ldr	r3, [pc, #420]	@ (8002204 <main+0x624>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d107      	bne.n	800207e <main+0x49e>
						vehicleState.yaw_rate_ref_rad_sec = 0;
 800206e:	4963      	ldr	r1, [pc, #396]	@ (80021fc <main+0x61c>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800207c:	e010      	b.n	80020a0 <main+0x4c0>
					else
						vehicleState.yaw_rate_ref_rad_sec = vehicleState.linear_speed_m_s / dataRX.curvature_radius_ref_m;
 800207e:	4b5f      	ldr	r3, [pc, #380]	@ (80021fc <main+0x61c>)
 8002080:	ed93 7a06 	vldr	s14, [r3, #24]
 8002084:	4b5f      	ldr	r3, [pc, #380]	@ (8002204 <main+0x624>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800208e:	ee16 0a90 	vmov	r0, s13
 8002092:	f7fe fa61 	bl	8000558 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4958      	ldr	r1, [pc, #352]	@ (80021fc <main+0x61c>)
 800209c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

					float yaw_rate_ref_rad_sec_abs = vehicleState.yaw_rate_ref_rad_sec;
 80020a0:	4b56      	ldr	r3, [pc, #344]	@ (80021fc <main+0x61c>)
 80020a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fda5 	bl	8000bf8 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					float yaw_rate_rad_sec_abs = vehicleState.yaw_rate_rad_sec;
 80020b2:	4b52      	ldr	r3, [pc, #328]	@ (80021fc <main+0x61c>)
 80020b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fd9c 	bl	8000bf8 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
					if (vehicleState.yaw_rate_ref_rad_sec < 0)
 80020c4:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <main+0x61c>)
 80020c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f7fe fd0b 	bl	8000aec <__aeabi_dcmplt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <main+0x518>
						yaw_rate_ref_rad_sec_abs = -vehicleState.yaw_rate_ref_rad_sec;
 80020dc:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <main+0x61c>)
 80020de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd87 	bl	8000bf8 <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef1 7a67 	vneg.f32	s15, s15
 80020f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					if (vehicleState.yaw_rate_rad_sec < 0)
 80020f8:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <main+0x61c>)
 80020fa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	f7fe fcf1 	bl	8000aec <__aeabi_dcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <main+0x54c>
						yaw_rate_rad_sec_abs = -vehicleState.yaw_rate_rad_sec;
 8002110:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <main+0x61c>)
 8002112:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd6d 	bl	8000bf8 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef1 7a67 	vneg.f32	s15, s15
 8002128:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

					u_sterzo = PID_controller(&pid_steering, yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs);
 800212c:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8002130:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002134:	4835      	ldr	r0, [pc, #212]	@ (800220c <main+0x62c>)
 8002136:	f7ff f841 	bl	80011bc <PID_controller>
 800213a:	ee10 3a10 	vmov	r3, s0
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa0a 	bl	8000558 <__aeabi_f2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4931      	ldr	r1, [pc, #196]	@ (8002210 <main+0x630>)
 800214a:	e9c1 2300 	strd	r2, r3, [r1]

					//Minus because yawrate and steering are opposite
					if (dataRX.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <main+0x624>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	db14      	blt.n	8002188 <main+0x5a8>
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <main+0x630>)
 8002160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	f7fe fcdc 	bl	8000b28 <__aeabi_dcmpgt>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <main+0x5a8>
						u_sterzo *= -1.0;
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <main+0x630>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	4614      	mov	r4, r2
 800217e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <main+0x630>)
 8002184:	e9c3 4500 	strd	r4, r5, [r3]
					if (dataRX.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8002188:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <main+0x624>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d514      	bpl.n	80021c2 <main+0x5e2>
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <main+0x630>)
 800219a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f7fe fca1 	bl	8000aec <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <main+0x5e2>
						u_sterzo *= -1.0;
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <main+0x630>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	4690      	mov	r8, r2
 80021b8:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <main+0x630>)
 80021be:	e9c3 8900 	strd	r8, r9, [r3]

					servo_motor(u_sterzo);
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <main+0x630>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fd14 	bl	8000bf8 <__aeabi_d2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	ee00 3a10 	vmov	s0, r3
 80021d6:	f000 fe37 	bl	8002e48 <servo_motor>
				}
				dataTX.current_servo_angle_deg = u_sterzo;
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <main+0x630>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd08 	bl	8000bf8 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <main+0x638>)
 80021ec:	6053      	str	r3, [r2, #4]
			if (Flag_10ms == 1) {
 80021ee:	e02c      	b.n	800224a <main+0x66a>
 80021f0:	54442d18 	.word	0x54442d18
 80021f4:	400921fb 	.word	0x400921fb
 80021f8:	200005d8 	.word	0x200005d8
 80021fc:	200004f8 	.word	0x200004f8
 8002200:	40668000 	.word	0x40668000
 8002204:	200004ac 	.word	0x200004ac
 8002208:	20000688 	.word	0x20000688
 800220c:	200005b0 	.word	0x200005b0
 8002210:	200005e0 	.word	0x200005e0
 8002214:	20000010 	.word	0x20000010
 8002218:	200004b8 	.word	0x200004b8
			}
		} else {
			set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <main+0x670>)
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	4619      	mov	r1, r3
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe ff3b 	bl	80010a0 <set_PWM_and_dir>
			servo_motor(0);
 800222a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002254 <main+0x674>
 800222e:	f000 fe0b 	bl	8002e48 <servo_motor>

			// Reset dei pid
			resetPID(&pid_steering);
 8002232:	4809      	ldr	r0, [pc, #36]	@ (8002258 <main+0x678>)
 8002234:	f7fe ffb0 	bl	8001198 <resetPID>
			resetPID(&pid_traction);
 8002238:	4808      	ldr	r0, [pc, #32]	@ (800225c <main+0x67c>)
 800223a:	f7fe ffad 	bl	8001198 <resetPID>
			resetPID(&pid_traction_RWD);
 800223e:	4808      	ldr	r0, [pc, #32]	@ (8002260 <main+0x680>)
 8002240:	f7fe ffaa 	bl	8001198 <resetPID>
			resetPID(&pid_traction_DESC);
 8002244:	4807      	ldr	r0, [pc, #28]	@ (8002264 <main+0x684>)
 8002246:	f7fe ffa7 	bl	8001198 <resetPID>
		}

		TransmitTelemetry();
 800224a:	f000 fca1 	bl	8002b90 <TransmitTelemetry>
		if(bno055_getSystemStatus() != 5)
 800224e:	e552      	b.n	8001cf6 <main+0x116>
 8002250:	200004f8 	.word	0x200004f8
 8002254:	00000000 	.word	0x00000000
 8002258:	200005b0 	.word	0x200005b0
 800225c:	20000538 	.word	0x20000538
 8002260:	20000560 	.word	0x20000560
 8002264:	20000588 	.word	0x20000588

08002268 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	@ 0x50
 800226c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	2230      	movs	r2, #48	@ 0x30
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f008 fb9a 	bl	800a9b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <SystemClock_Config+0xd0>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a28      	ldr	r2, [pc, #160]	@ (8002338 <SystemClock_Config+0xd0>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
 800229c:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <SystemClock_Config+0xd0>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <SystemClock_Config+0xd4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022b4:	4a21      	ldr	r2, [pc, #132]	@ (800233c <SystemClock_Config+0xd4>)
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <SystemClock_Config+0xd4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2310      	movs	r3, #16
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80022dc:	2310      	movs	r3, #16
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80022e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022e4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022e6:	2304      	movs	r3, #4
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80022ea:	2307      	movs	r3, #7
 80022ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fb86 	bl	8005a04 <HAL_RCC_OscConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80022fe:	f000 fd9d 	bl	8002e3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002312:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2102      	movs	r1, #2
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fde8 	bl	8005ef4 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800232a:	f000 fd87 	bl	8002e3c <Error_Handler>
	}
}
 800232e:	bf00      	nop
 8002330:	3750      	adds	r7, #80	@ 0x50
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002354:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <MX_ADC1_Init+0x9c>)
 8002356:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <MX_ADC1_Init+0x98>)
 800235a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800235e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <MX_ADC1_Init+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800237a:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <MX_ADC1_Init+0x98>)
 800237c:	2200      	movs	r2, #0
 800237e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <MX_ADC1_Init+0xa0>)
 8002384:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002386:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <MX_ADC1_Init+0x98>)
 800238e:	2201      	movs	r2, #1
 8002390:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_ADC1_Init+0x98>)
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <MX_ADC1_Init+0x98>)
 800239c:	2201      	movs	r2, #1
 800239e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a0:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_ADC1_Init+0x98>)
 80023a2:	f001 fa39 	bl	8003818 <HAL_ADC_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80023ac:	f000 fd46 	bl	8002e3c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80023b0:	230b      	movs	r3, #11
 80023b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <MX_ADC1_Init+0x98>)
 80023c2:	f001 fa6d 	bl	80038a0 <HAL_ADC_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80023cc:	f000 fd36 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000208 	.word	0x20000208
 80023dc:	40012000 	.word	0x40012000
 80023e0:	0f000001 	.word	0x0f000001

080023e4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <MX_I2C1_Init+0x54>)
 80023ec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <MX_I2C1_Init+0x58>)
 80023f2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002406:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <MX_I2C1_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <MX_I2C1_Init+0x50>)
 8002422:	f002 fb3f 	bl	8004aa4 <HAL_I2C_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800242c:	f000 fd06 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000250 	.word	0x20000250
 8002438:	40005400 	.word	0x40005400
 800243c:	00061a80 	.word	0x00061a80

08002440 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b096      	sub	sp, #88	@ 0x58
 8002444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800245e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2220      	movs	r2, #32
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f008 fa99 	bl	800a9b0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800247e:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <MX_TIM1_Init+0x13c>)
 8002480:	4a3f      	ldr	r2, [pc, #252]	@ (8002580 <MX_TIM1_Init+0x140>)
 8002482:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1681-1;
 8002484:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <MX_TIM1_Init+0x13c>)
 8002486:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800248a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <MX_TIM1_Init+0x13c>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1001-1;
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <MX_TIM1_Init+0x13c>)
 8002494:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002498:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b38      	ldr	r3, [pc, #224]	@ (800257c <MX_TIM1_Init+0x13c>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80024a0:	4b36      	ldr	r3, [pc, #216]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b35      	ldr	r3, [pc, #212]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ac:	4833      	ldr	r0, [pc, #204]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024ae:	f003 ff41 	bl	8006334 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80024b8:	f000 fcc0 	bl	8002e3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024c6:	4619      	mov	r1, r3
 80024c8:	482c      	ldr	r0, [pc, #176]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024ca:	f004 fbed 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80024d4:	f000 fcb2 	bl	8002e3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024d8:	4828      	ldr	r0, [pc, #160]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024da:	f003 ffdd 	bl	8006498 <HAL_TIM_PWM_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80024e4:	f000 fcaa 	bl	8002e3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024f4:	4619      	mov	r1, r3
 80024f6:	4821      	ldr	r0, [pc, #132]	@ (800257c <MX_TIM1_Init+0x13c>)
 80024f8:	f004 ff92 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8002502:	f000 fc9b 	bl	8002e3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002506:	2360      	movs	r3, #96	@ 0x60
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002512:	2300      	movs	r3, #0
 8002514:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002526:	2200      	movs	r2, #0
 8002528:	4619      	mov	r1, r3
 800252a:	4814      	ldr	r0, [pc, #80]	@ (800257c <MX_TIM1_Init+0x13c>)
 800252c:	f004 fafa 	bl	8006b24 <HAL_TIM_PWM_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 8002536:	f000 fc81 	bl	8002e3c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800254e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002552:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4619      	mov	r1, r3
 800255c:	4807      	ldr	r0, [pc, #28]	@ (800257c <MX_TIM1_Init+0x13c>)
 800255e:	f004 ffcd 	bl	80074fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 8002568:	f000 fc68 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800256c:	4803      	ldr	r0, [pc, #12]	@ (800257c <MX_TIM1_Init+0x13c>)
 800256e:	f000 fe35 	bl	80031dc <HAL_TIM_MspPostInit>

}
 8002572:	bf00      	nop
 8002574:	3758      	adds	r7, #88	@ 0x58
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002a4 	.word	0x200002a4
 8002580:	40010000 	.word	0x40010000

08002584 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f008 fa0c 	bl	800a9b0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295-1;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025c8:	2303      	movs	r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d0:	2301      	movs	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e0:	2301      	movs	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_TIM2_Init+0xa4>)
 80025f4:	f004 f85a 	bl	80066ac <HAL_TIM_Encoder_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 80025fe:	f000 fc1d 	bl	8002e3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <MX_TIM2_Init+0xa4>)
 8002610:	f004 ff06 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 800261a:	f000 fc0f 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3730      	adds	r7, #48	@ 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200002ec 	.word	0x200002ec

0800262c <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002644:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <MX_TIM10_Init+0x94>)
 8002646:	4a1f      	ldr	r2, [pc, #124]	@ (80026c4 <MX_TIM10_Init+0x98>)
 8002648:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 840-1;
 800264a:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <MX_TIM10_Init+0x94>)
 800264c:	f240 3247 	movw	r2, #839	@ 0x347
 8002650:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <MX_TIM10_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 2000-1;
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <MX_TIM10_Init+0x94>)
 800265a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800265e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002660:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <MX_TIM10_Init+0x94>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <MX_TIM10_Init+0x94>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800266c:	4814      	ldr	r0, [pc, #80]	@ (80026c0 <MX_TIM10_Init+0x94>)
 800266e:	f003 fe61 	bl	8006334 <HAL_TIM_Base_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM10_Init+0x50>
	{
		Error_Handler();
 8002678:	f000 fbe0 	bl	8002e3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <MX_TIM10_Init+0x94>)
 800267e:	f003 ff0b 	bl	8006498 <HAL_TIM_PWM_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM10_Init+0x60>
	{
		Error_Handler();
 8002688:	f000 fbd8 	bl	8002e3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268c:	2360      	movs	r3, #96	@ 0x60
 800268e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2200      	movs	r2, #0
 80026a0:	4619      	mov	r1, r3
 80026a2:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <MX_TIM10_Init+0x94>)
 80026a4:	f004 fa3e 	bl	8006b24 <HAL_TIM_PWM_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM10_Init+0x86>
	{
		Error_Handler();
 80026ae:	f000 fbc5 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80026b2:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <MX_TIM10_Init+0x94>)
 80026b4:	f000 fd92 	bl	80031dc <HAL_TIM_MspPostInit>

}
 80026b8:	bf00      	nop
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000334 	.word	0x20000334
 80026c4:	40014400 	.word	0x40014400

080026c8 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026ce:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <MX_TIM11_Init+0x44>)
 80026d0:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 120-1;
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026d4:	2277      	movs	r2, #119	@ 0x77
 80026d6:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 7000-1;
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026e0:	f641 3257 	movw	r2, #6999	@ 0x1b57
 80026e4:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <MX_TIM11_Init+0x40>)
 80026f4:	f003 fe1e 	bl	8006334 <HAL_TIM_Base_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM11_Init+0x3a>
	{
		Error_Handler();
 80026fe:	f000 fb9d 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000037c 	.word	0x2000037c
 800270c:	40014800 	.word	0x40014800

08002710 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <MX_USART2_UART_Init+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002748:	f004 ff3e 	bl	80075c8 <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002752:	f000 fb73 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200003c4 	.word	0x200003c4
 8002760:	40004400 	.word	0x40004400

08002764 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <MX_USART6_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_USART6_UART_Init+0x4c>)
 800279c:	f004 ff14 	bl	80075c8 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 80027a6:	f000 fb49 	bl	8002e3c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000408 	.word	0x20000408
 80027b4:	40011400 	.word	0x40011400

080027b8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <MX_DMA_Init+0x3c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <MX_DMA_Init+0x3c>)
 80027c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <MX_DMA_Init+0x3c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2039      	movs	r0, #57	@ 0x39
 80027e0:	f001 fb6d 	bl	8003ebe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80027e4:	2039      	movs	r0, #57	@ 0x39
 80027e6:	f001 fb86 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6313      	str	r3, [r2, #48]	@ 0x30
 800281e:	4b46      	ldr	r3, [pc, #280]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b42      	ldr	r3, [pc, #264]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a41      	ldr	r2, [pc, #260]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b3f      	ldr	r3, [pc, #252]	@ (8002938 <MX_GPIO_Init+0x140>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <MX_GPIO_Init+0x140>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <MX_GPIO_Init+0x140>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <MX_GPIO_Init+0x140>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800287e:	2200      	movs	r2, #0
 8002880:	2101      	movs	r1, #1
 8002882:	482e      	ldr	r0, [pc, #184]	@ (800293c <MX_GPIO_Init+0x144>)
 8002884:	f002 f8dc 	bl	8004a40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	2120      	movs	r1, #32
 800288c:	482c      	ldr	r0, [pc, #176]	@ (8002940 <MX_GPIO_Init+0x148>)
 800288e:	f002 f8d7 	bl	8004a40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002898:	4828      	ldr	r0, [pc, #160]	@ (800293c <MX_GPIO_Init+0x144>)
 800289a:	f002 f8d1 	bl	8004a40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800289e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4821      	ldr	r0, [pc, #132]	@ (800293c <MX_GPIO_Init+0x144>)
 80028b6:	f001 ff3f 	bl	8004738 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_Pin IMU_RESET_Pin */
	GPIO_InitStruct.Pin = DIR_Pin|IMU_RESET_Pin;
 80028ba:	f240 1301 	movw	r3, #257	@ 0x101
 80028be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	481a      	ldr	r0, [pc, #104]	@ (800293c <MX_GPIO_Init+0x144>)
 80028d4:	f001 ff30 	bl	8004738 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80028d8:	2320      	movs	r3, #32
 80028da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4814      	ldr	r0, [pc, #80]	@ (8002940 <MX_GPIO_Init+0x148>)
 80028f0:	f001 ff22 	bl	8004738 <HAL_GPIO_Init>

	/*Configure GPIO pin : External_button_Pin */
	GPIO_InitStruct.Pin = External_button_Pin;
 80028f4:	2304      	movs	r3, #4
 80028f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028f8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80028fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(External_button_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	480e      	ldr	r0, [pc, #56]	@ (8002944 <MX_GPIO_Init+0x14c>)
 800290a:	f001 ff15 	bl	8004738 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2008      	movs	r0, #8
 8002914:	f001 fad3 	bl	8003ebe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002918:	2008      	movs	r0, #8
 800291a:	f001 faec 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2028      	movs	r0, #40	@ 0x28
 8002924:	f001 facb 	bl	8003ebe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002928:	2028      	movs	r0, #40	@ 0x28
 800292a:	f001 fae4 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40020800 	.word	0x40020800
 8002940:	40020000 	.word	0x40020000
 8002944:	40020400 	.word	0x40020400

08002948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Timer11 for temporization
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d12b      	bne.n	80029b0 <HAL_TIM_PeriodElapsedCallback+0x68>
		Flag_10ms = 1;
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

		if (dataRX.curvature_radius_ref_m == last_read){
 800295e:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	eeb4 7a67 	vcmp.f32	s14, s15
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d110      	bne.n	8002996 <HAL_TIM_PeriodElapsedCallback+0x4e>
			cnt_DMA++;
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800297c:	6013      	str	r3, [r2, #0]
			if(cnt_DMA >= 5){
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b04      	cmp	r3, #4
 8002984:	dd07      	ble.n	8002996 <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8002986:	2232      	movs	r2, #50	@ 0x32
 8002988:	4910      	ldr	r1, [pc, #64]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800298a:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800298c:	f004 fefb 	bl	8007786 <HAL_UARTEx_ReceiveToIdle_DMA>
				cnt_DMA = 0;
 8002990:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
			}
		}

		//Encoder
		vehicleState.counts = TIM2->CNT;
 8002996:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	461a      	mov	r2, r3
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029a0:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 80029a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000037c 	.word	0x2000037c
 80029bc:	200005e8 	.word	0x200005e8
 80029c0:	200004ac 	.word	0x200004ac
 80029c4:	20000688 	.word	0x20000688
 80029c8:	2000068c 	.word	0x2000068c
 80029cc:	20000624 	.word	0x20000624
 80029d0:	20000408 	.word	0x20000408
 80029d4:	200004f8 	.word	0x200004f8

080029d8 <__io_putchar>:

//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF); //putty
 80029e0:	1d39      	adds	r1, r7, #4
 80029e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029e6:	2201      	movs	r2, #1
 80029e8:	4807      	ldr	r0, [pc, #28]	@ (8002a08 <__io_putchar+0x30>)
 80029ea:	f004 fe3a 	bl	8007662 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF); //rpi
 80029ee:	1d39      	adds	r1, r7, #4
 80029f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029f4:	2201      	movs	r2, #1
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <__io_putchar+0x34>)
 80029f8:	f004 fe33 	bl	8007662 <HAL_UART_Transmit>
	return ch;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003c4 	.word	0x200003c4
 8002a0c:	20000408 	.word	0x20000408

08002a10 <HAL_GPIO_EXTI_Callback>:

//-------------------------------------------------------------
//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a20:	d114      	bne.n	8002a4c <HAL_GPIO_EXTI_Callback+0x3c>
		if (HardwareEnable == 0) {
 8002a22:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_GPIO_EXTI_Callback+0x2c>
			HardwareEnable = 1;
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	2120      	movs	r1, #32
 8002a34:	4808      	ldr	r0, [pc, #32]	@ (8002a58 <HAL_GPIO_EXTI_Callback+0x48>)
 8002a36:	f002 f803 	bl	8004a40 <HAL_GPIO_WritePin>
		} else {
			HardwareEnable = 0;
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		}
	}
}
 8002a3a:	e007      	b.n	8002a4c <HAL_GPIO_EXTI_Callback+0x3c>
			HardwareEnable = 0;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2120      	movs	r1, #32
 8002a46:	4804      	ldr	r0, [pc, #16]	@ (8002a58 <HAL_GPIO_EXTI_Callback+0x48>)
 8002a48:	f001 fffa 	bl	8004a40 <HAL_GPIO_WritePin>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200005ec 	.word	0x200005ec
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_UARTEx_RxEventCallback>:

//-------------------------------------------------------------
// COMUNICAZIONE (RICEZIONE DATI)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6){
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b68 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d174      	bne.n	8002b5e <HAL_UARTEx_RxEventCallback+0x102>
 8002a74:	466b      	mov	r3, sp
 8002a76:	461e      	mov	r6, r3
		memcpy(msg, RxBuf, Size);
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	493b      	ldr	r1, [pc, #236]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0x110>)
 8002a7e:	483c      	ldr	r0, [pc, #240]	@ (8002b70 <HAL_UARTEx_RxEventCallback+0x114>)
 8002a80:	f008 f8af 	bl	800abe2 <memcpy>
		float floatArray[MAX_VALUES];
 8002a84:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_UARTEx_RxEventCallback+0x118>)
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	1e4b      	subs	r3, r1, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	460a      	mov	r2, r1
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4690      	mov	r8, r2
 8002a92:	4699      	mov	r9, r3
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002aa0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002aa4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4614      	mov	r4, r2
 8002aae:	461d      	mov	r5, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	016b      	lsls	r3, r5, #5
 8002aba:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002abe:	0162      	lsls	r2, r4, #5
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	3307      	adds	r3, #7
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	ebad 0d03 	sub.w	sp, sp, r3
 8002ace:	466b      	mov	r3, sp
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	60bb      	str	r3, [r7, #8]
		parseCSV(msg, floatArray);
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	4825      	ldr	r0, [pc, #148]	@ (8002b70 <HAL_UARTEx_RxEventCallback+0x114>)
 8002adc:	f7fe fc58 	bl	8001390 <parseCSV>

		if(floatArray[0] == 0 || floatArray[0] == 1){
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	d009      	beq.n	8002b04 <HAL_UARTEx_RxEventCallback+0xa8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002afa:	eef4 7a47 	vcmp.f32	s15, s14
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	d110      	bne.n	8002b26 <HAL_UARTEx_RxEventCallback+0xca>
			dataRX.enable = floatArray[0];
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0e:	ee17 2a90 	vmov	r2, s15
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002b14:	609a      	str	r2, [r3, #8]
			dataRX.linear_speed_ref_m_s = floatArray[1];
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002b1c:	6053      	str	r3, [r2, #4]
			dataRX.curvature_radius_ref_m = floatArray[2];
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a15      	ldr	r2, [pc, #84]	@ (8002b78 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002b24:	6013      	str	r3, [r2, #0]
		}

		if(floatArray[0] == 3){
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002b30:	eef4 7a47 	vcmp.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d10b      	bne.n	8002b52 <HAL_UARTEx_RxEventCallback+0xf6>
			// Reset dei pid
			resetPID(&pid_steering);
 8002b3a:	4810      	ldr	r0, [pc, #64]	@ (8002b7c <HAL_UARTEx_RxEventCallback+0x120>)
 8002b3c:	f7fe fb2c 	bl	8001198 <resetPID>
			resetPID(&pid_traction);
 8002b40:	480f      	ldr	r0, [pc, #60]	@ (8002b80 <HAL_UARTEx_RxEventCallback+0x124>)
 8002b42:	f7fe fb29 	bl	8001198 <resetPID>
			resetPID(&pid_traction_RWD);
 8002b46:	480f      	ldr	r0, [pc, #60]	@ (8002b84 <HAL_UARTEx_RxEventCallback+0x128>)
 8002b48:	f7fe fb26 	bl	8001198 <resetPID>
			resetPID(&pid_traction_DESC);
 8002b4c:	480e      	ldr	r0, [pc, #56]	@ (8002b88 <HAL_UARTEx_RxEventCallback+0x12c>)
 8002b4e:	f7fe fb23 	bl	8001198 <resetPID>
			//printf("PID RESETTATO! (TASTO)\r\n");
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8002b52:	2232      	movs	r2, #50	@ 0x32
 8002b54:	4905      	ldr	r1, [pc, #20]	@ (8002b6c <HAL_UARTEx_RxEventCallback+0x110>)
 8002b56:	480d      	ldr	r0, [pc, #52]	@ (8002b8c <HAL_UARTEx_RxEventCallback+0x130>)
 8002b58:	f004 fe15 	bl	8007786 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002b5c:	46b5      	mov	sp, r6
	}
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	20000624 	.word	0x20000624
 8002b70:	20000658 	.word	0x20000658
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	200004ac 	.word	0x200004ac
 8002b7c:	200005b0 	.word	0x200005b0
 8002b80:	20000538 	.word	0x20000538
 8002b84:	20000560 	.word	0x20000560
 8002b88:	20000588 	.word	0x20000588
 8002b8c:	20000408 	.word	0x20000408

08002b90 <TransmitTelemetry>:

// COMUNICAZIONE (TRASMISSIONE DATI)
void TransmitTelemetry(){
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	ed2d 8b0a 	vpush	{d8-d12}
 8002b98:	b0b4      	sub	sp, #208	@ 0xd0
 8002b9a:	af12      	add	r7, sp, #72	@ 0x48
	dataTX.current_speed_rpm = vehicleState.motor_speed_RPM;
 8002b9c:	4b95      	ldr	r3, [pc, #596]	@ (8002df4 <TransmitTelemetry+0x264>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	4a95      	ldr	r2, [pc, #596]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002ba2:	6013      	str	r3, [r2, #0]
	dataTX.current_yaw_rate_deg_sec = vehicleState.yaw_rate_deg_sec;
 8002ba4:	4b93      	ldr	r3, [pc, #588]	@ (8002df4 <TransmitTelemetry+0x264>)
 8002ba6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fe f823 	bl	8000bf8 <__aeabi_d2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a90      	ldr	r2, [pc, #576]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002bb6:	6093      	str	r3, [r2, #8]

	bno055_vector_t accel = bno055_getVectorAccelerometer();
 8002bb8:	f7fe fddc 	bl	8001774 <bno055_getVectorAccelerometer>
 8002bbc:	eeb0 4a40 	vmov.f32	s8, s0
 8002bc0:	eef0 4a60 	vmov.f32	s9, s1
 8002bc4:	eeb0 5a41 	vmov.f32	s10, s2
 8002bc8:	eef0 5a61 	vmov.f32	s11, s3
 8002bcc:	eeb0 6a42 	vmov.f32	s12, s4
 8002bd0:	eef0 6a62 	vmov.f32	s13, s5
 8002bd4:	eeb0 7a43 	vmov.f32	s14, s6
 8002bd8:	eef0 7a63 	vmov.f32	s15, s7
 8002bdc:	ed87 4b1a 	vstr	d4, [r7, #104]	@ 0x68
 8002be0:	ed87 5b1c 	vstr	d5, [r7, #112]	@ 0x70
 8002be4:	ed87 6b1e 	vstr	d6, [r7, #120]	@ 0x78
 8002be8:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
	bno055_vector_t angle = bno055_getVectorGyroscope();
 8002bec:	f7fe fe48 	bl	8001880 <bno055_getVectorGyroscope>
 8002bf0:	eeb0 4a40 	vmov.f32	s8, s0
 8002bf4:	eef0 4a60 	vmov.f32	s9, s1
 8002bf8:	eeb0 5a41 	vmov.f32	s10, s2
 8002bfc:	eef0 5a61 	vmov.f32	s11, s3
 8002c00:	eeb0 6a42 	vmov.f32	s12, s4
 8002c04:	eef0 6a62 	vmov.f32	s13, s5
 8002c08:	eeb0 7a43 	vmov.f32	s14, s6
 8002c0c:	eef0 7a63 	vmov.f32	s15, s7
 8002c10:	ed87 4b12 	vstr	d4, [r7, #72]	@ 0x48
 8002c14:	ed87 5b14 	vstr	d5, [r7, #80]	@ 0x50
 8002c18:	ed87 6b16 	vstr	d6, [r7, #88]	@ 0x58
 8002c1c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
	bno055_vector_t magne = bno055_getVectorMagnetometer();
 8002c20:	f7fe fdeb 	bl	80017fa <bno055_getVectorMagnetometer>
 8002c24:	eeb0 4a40 	vmov.f32	s8, s0
 8002c28:	eef0 4a60 	vmov.f32	s9, s1
 8002c2c:	eeb0 5a41 	vmov.f32	s10, s2
 8002c30:	eef0 5a61 	vmov.f32	s11, s3
 8002c34:	eeb0 6a42 	vmov.f32	s12, s4
 8002c38:	eef0 6a62 	vmov.f32	s13, s5
 8002c3c:	eeb0 7a43 	vmov.f32	s14, s6
 8002c40:	eef0 7a63 	vmov.f32	s15, s7
 8002c44:	ed87 4b0a 	vstr	d4, [r7, #40]	@ 0x28
 8002c48:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 8002c4c:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 8002c50:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	bno055_vector_t quat = bno055_getVectorQuaternion();
 8002c54:	f7fe fe57 	bl	8001906 <bno055_getVectorQuaternion>
 8002c58:	eeb0 4a40 	vmov.f32	s8, s0
 8002c5c:	eef0 4a60 	vmov.f32	s9, s1
 8002c60:	eeb0 5a41 	vmov.f32	s10, s2
 8002c64:	eef0 5a61 	vmov.f32	s11, s3
 8002c68:	eeb0 6a42 	vmov.f32	s12, s4
 8002c6c:	eef0 6a62 	vmov.f32	s13, s5
 8002c70:	eeb0 7a43 	vmov.f32	s14, s6
 8002c74:	eef0 7a63 	vmov.f32	s15, s7
 8002c78:	ed87 4b02 	vstr	d4, [r7, #8]
 8002c7c:	ed87 5b04 	vstr	d5, [r7, #16]
 8002c80:	ed87 6b06 	vstr	d6, [r7, #24]
 8002c84:	ed87 7b08 	vstr	d7, [r7, #32]
	dataTX.accel_x = accel.x;
 8002c88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ffb2 	bl	8000bf8 <__aeabi_d2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4a58      	ldr	r2, [pc, #352]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002c98:	6293      	str	r3, [r2, #40]	@ 0x28
	dataTX.accel_y = accel.y;
 8002c9a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fd ffa9 	bl	8000bf8 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a53      	ldr	r2, [pc, #332]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
	dataTX.accel_z = accel.z;
 8002cac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f7fd ffa0 	bl	8000bf8 <__aeabi_d2f>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a4f      	ldr	r2, [pc, #316]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
	dataTX.angle_x = angle.x;
 8002cbe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f7fd ff97 	bl	8000bf8 <__aeabi_d2f>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002cce:	6353      	str	r3, [r2, #52]	@ 0x34
	dataTX.angle_y = angle.y;
 8002cd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff8e 	bl	8000bf8 <__aeabi_d2f>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a46      	ldr	r2, [pc, #280]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002ce0:	6393      	str	r3, [r2, #56]	@ 0x38
	dataTX.angle_z = angle.z;
 8002ce2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff85 	bl	8000bf8 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a41      	ldr	r2, [pc, #260]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002cf2:	63d3      	str	r3, [r2, #60]	@ 0x3c
	dataTX.magne_x = magne.x;
 8002cf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ff7c 	bl	8000bf8 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a3d      	ldr	r2, [pc, #244]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d04:	61d3      	str	r3, [r2, #28]
	dataTX.magne_y = magne.y;
 8002d06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff73 	bl	8000bf8 <__aeabi_d2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a38      	ldr	r2, [pc, #224]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d16:	6213      	str	r3, [r2, #32]
	dataTX.magne_z = magne.z;
 8002d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd ff6a 	bl	8000bf8 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d28:	6253      	str	r3, [r2, #36]	@ 0x24
	dataTX.quaternion_x = quat.x;
 8002d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7fd ff61 	bl	8000bf8 <__aeabi_d2f>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4a2f      	ldr	r2, [pc, #188]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d3a:	60d3      	str	r3, [r2, #12]
	dataTX.quaternion_y = quat.y;
 8002d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7fd ff58 	bl	8000bf8 <__aeabi_d2f>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d4c:	6113      	str	r3, [r2, #16]
	dataTX.quaternion_z = quat.z;
 8002d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd ff4f 	bl	8000bf8 <__aeabi_d2f>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d5e:	6153      	str	r3, [r2, #20]
	dataTX.quaternion_w = quat.w;
 8002d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff46 	bl	8000bf8 <__aeabi_d2f>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a22      	ldr	r2, [pc, #136]	@ (8002df8 <TransmitTelemetry+0x268>)
 8002d70:	6193      	str	r3, [r2, #24]
	printf("%+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f\r\n", accel.x, accel.y, accel.z, angle.x, angle.y, angle.z, magne.x, magne.y, magne.z, tempRPM * RPM_2_m_s);
 8002d72:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8002d76:	ed87 7b00 	vstr	d7, [r7]
 8002d7a:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	@ 0x78
 8002d7e:	ed97 8b20 	vldr	d8, [r7, #128]	@ 0x80
 8002d82:	ed97 9b14 	vldr	d9, [r7, #80]	@ 0x50
 8002d86:	ed97 ab16 	vldr	d10, [r7, #88]	@ 0x58
 8002d8a:	ed97 bb18 	vldr	d11, [r7, #96]	@ 0x60
 8002d8e:	ed97 cb0c 	vldr	d12, [r7, #48]	@ 0x30
 8002d92:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d96:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002d9a:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <TransmitTelemetry+0x26c>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <TransmitTelemetry+0x270>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002daa:	ee17 0a90 	vmov	r0, s15
 8002dae:	f7fd fbd3 	bl	8000558 <__aeabi_f2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002dba:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8002dbe:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8002dc2:	ed8d cb0a 	vstr	d12, [sp, #40]	@ 0x28
 8002dc6:	ed8d bb08 	vstr	d11, [sp, #32]
 8002dca:	ed8d ab06 	vstr	d10, [sp, #24]
 8002dce:	ed8d 9b04 	vstr	d9, [sp, #16]
 8002dd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002dd6:	e9cd ab00 	strd	sl, fp, [sp]
 8002dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dde:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <TransmitTelemetry+0x274>)
 8002de0:	f007 fc7e 	bl	800a6e0 <iprintf>
}
 8002de4:	bf00      	nop
 8002de6:	3788      	adds	r7, #136	@ 0x88
 8002de8:	46bd      	mov	sp, r7
 8002dea:	ecbd 8b0a 	vpop	{d8-d12}
 8002dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	200004f8 	.word	0x200004f8
 8002df8:	200004b8 	.word	0x200004b8
 8002dfc:	200005f0 	.word	0x200005f0
 8002e00:	20000010 	.word	0x20000010
 8002e04:	0800d684 	.word	0x0800d684

08002e08 <resetBNO055>:

void resetBNO055(){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e12:	4809      	ldr	r0, [pc, #36]	@ (8002e38 <resetBNO055+0x30>)
 8002e14:	f001 fe14 	bl	8004a40 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 8002e18:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002e1c:	f000 fcd8 	bl	80037d0 <HAL_Delay>
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e26:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <resetBNO055+0x30>)
 8002e28:	f001 fe0a 	bl	8004a40 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 8002e2c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002e30:	f000 fcce 	bl	80037d0 <HAL_Delay>
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40020800 	.word	0x40020800

08002e3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <Error_Handler+0x8>

08002e48 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <servo_motor+0xb8>)
 8002e54:	617b      	str	r3, [r7, #20]
	  float ccr;
	  float conv_angolo;

	  if(angolo < MIN_ANGOLO)
 8002e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e5a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002f04 <servo_motor+0xbc>
 8002e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d502      	bpl.n	8002e6e <servo_motor+0x26>

		   angolo = MIN_ANGOLO;
 8002e68:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <servo_motor+0xc0>)
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	e00a      	b.n	8002e84 <servo_motor+0x3c>

	  else if (angolo > MAX_ANGOLO)
 8002e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e72:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002f0c <servo_motor+0xc4>
 8002e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	dd01      	ble.n	8002e84 <servo_motor+0x3c>

		   angolo = MAX_ANGOLO;
 8002e80:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <servo_motor+0xc8>)
 8002e82:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + DRITTO;
 8002e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e88:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002f14 <servo_motor+0xcc>
 8002e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e90:	edc7 7a04 	vstr	s15, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8002e94:	6938      	ldr	r0, [r7, #16]
 8002e96:	f7fd fb5f 	bl	8000558 <__aeabi_f2d>
 8002e9a:	a317      	add	r3, pc, #92	@ (adr r3, 8002ef8 <servo_motor+0xb0>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fbb2 	bl	8000608 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <servo_motor+0xd0>)
 8002eb2:	f7fd f9f3 	bl	800029c <__adddf3>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f7fd fb4a 	bl	8000558 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd fcc6 	bl	800085c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fe8e 	bl	8000bf8 <__aeabi_d2f>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <servo_motor+0xd4>)
 8002ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eea:	ee17 2a90 	vmov	r2, s15
 8002eee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef8:	f544bb1b 	.word	0xf544bb1b
 8002efc:	3f86c0d6 	.word	0x3f86c0d6
 8002f00:	3ca3d70a 	.word	0x3ca3d70a
 8002f04:	c2380000 	.word	0xc2380000
 8002f08:	c2380000 	.word	0xc2380000
 8002f0c:	42380000 	.word	0x42380000
 8002f10:	42380000 	.word	0x42380000
 8002f14:	42b40000 	.word	0x42b40000
 8002f18:	3fe00000 	.word	0x3fe00000
 8002f1c:	40010000 	.word	0x40010000

08002f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_MspInit+0x4c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f5e:	2007      	movs	r0, #7
 8002f60:	f000 ffa2 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	@ (8002fec <HAL_ADC_MspInit+0x7c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d127      	bne.n	8002fe2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <HAL_ADC_MspInit+0x80>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <HAL_ADC_MspInit+0x84>)
 8002fde:	f001 fbab 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	@ 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40012000 	.word	0x40012000
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40020800 	.word	0x40020800

08002ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	@ 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_I2C_MspInit+0x84>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12b      	bne.n	8003072 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a17      	ldr	r2, [pc, #92]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 8003036:	23c0      	movs	r3, #192	@ 0xc0
 8003038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800303a:	2312      	movs	r3, #18
 800303c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003046:	2304      	movs	r3, #4
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4619      	mov	r1, r3
 8003050:	480c      	ldr	r0, [pc, #48]	@ (8003084 <HAL_I2C_MspInit+0x8c>)
 8003052:	f001 fb71 	bl	8004738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 8003060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003064:	6413      	str	r3, [r2, #64]	@ 0x40
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_I2C_MspInit+0x88>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40005400 	.word	0x40005400
 8003080:	40023800 	.word	0x40023800
 8003084:	40020400 	.word	0x40020400

08003088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2a      	ldr	r2, [pc, #168]	@ (8003140 <HAL_TIM_Base_MspInit+0xb8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d11e      	bne.n	80030d8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2018      	movs	r0, #24
 80030bc:	f000 feff 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80030c0:	2018      	movs	r0, #24
 80030c2:	f000 ff18 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	201a      	movs	r0, #26
 80030cc:	f000 fef7 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030d0:	201a      	movs	r0, #26
 80030d2:	f000 ff10 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80030d6:	e02e      	b.n	8003136 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_TIM_Base_MspInit+0xc0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
}
 80030fe:	e01a      	b.n	8003136 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_TIM_Base_MspInit+0xc4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d115      	bne.n	8003136 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003118:	6453      	str	r3, [r2, #68]	@ 0x44
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <HAL_TIM_Base_MspInit+0xbc>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	201a      	movs	r0, #26
 800312c:	f000 fec7 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003130:	201a      	movs	r0, #26
 8003132:	f000 fee0 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40023800 	.word	0x40023800
 8003148:	40014400 	.word	0x40014400
 800314c:	40014800 	.word	0x40014800

08003150 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d12b      	bne.n	80031ca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	4a16      	ldr	r2, [pc, #88]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40
 8003182:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a0f      	ldr	r2, [pc, #60]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x84>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80031aa:	2303      	movs	r3, #3
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ba:	2301      	movs	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4804      	ldr	r0, [pc, #16]	@ (80031d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80031c6:	f001 fab7 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	@ 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020000 	.word	0x40020000

080031dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	@ (8003290 <HAL_TIM_MspPostInit+0xb4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d11f      	bne.n	800323e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800321a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800321e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	4818      	ldr	r0, [pc, #96]	@ (8003298 <HAL_TIM_MspPostInit+0xbc>)
 8003238:	f001 fa7e 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800323c:	e023      	b.n	8003286 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_MspPostInit+0xc0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d11e      	bne.n	8003286 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	4a10      	ldr	r2, [pc, #64]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	6313      	str	r3, [r2, #48]	@ 0x30
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_TIM_MspPostInit+0xb8>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8003264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003276:	2303      	movs	r3, #3
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <HAL_TIM_MspPostInit+0xc4>)
 8003282:	f001 fa59 	bl	8004738 <HAL_GPIO_Init>
}
 8003286:	bf00      	nop
 8003288:	3728      	adds	r7, #40	@ 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40020400 	.word	0x40020400

080032a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	@ 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4d      	ldr	r2, [pc, #308]	@ (80033f8 <HAL_UART_MspInit+0x154>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d12c      	bne.n	8003320 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	4b4c      	ldr	r3, [pc, #304]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a4b      	ldr	r2, [pc, #300]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d6:	4b49      	ldr	r3, [pc, #292]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a44      	ldr	r2, [pc, #272]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b42      	ldr	r3, [pc, #264]	@ (80033fc <HAL_UART_MspInit+0x158>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 80032fe:	230c      	movs	r3, #12
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800330e:	2307      	movs	r3, #7
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4839      	ldr	r0, [pc, #228]	@ (8003400 <HAL_UART_MspInit+0x15c>)
 800331a:	f001 fa0d 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800331e:	e066      	b.n	80033ee <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART6)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a37      	ldr	r2, [pc, #220]	@ (8003404 <HAL_UART_MspInit+0x160>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d161      	bne.n	80033ee <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_UART_MspInit+0x158>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_UART_MspInit+0x158>)
 8003334:	f043 0320 	orr.w	r3, r3, #32
 8003338:	6453      	str	r3, [r2, #68]	@ 0x44
 800333a:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_UART_MspInit+0x158>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <HAL_UART_MspInit+0x158>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a2b      	ldr	r2, [pc, #172]	@ (80033fc <HAL_UART_MspInit+0x158>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_UART_MspInit+0x158>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003362:	23c0      	movs	r3, #192	@ 0xc0
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003372:	2308      	movs	r3, #8
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	4619      	mov	r1, r3
 800337c:	4822      	ldr	r0, [pc, #136]	@ (8003408 <HAL_UART_MspInit+0x164>)
 800337e:	f001 f9db 	bl	8004738 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_UART_MspInit+0x168>)
 8003384:	4a22      	ldr	r2, [pc, #136]	@ (8003410 <HAL_UART_MspInit+0x16c>)
 8003386:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003388:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_UART_MspInit+0x168>)
 800338a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800338e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003390:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_UART_MspInit+0x168>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <HAL_UART_MspInit+0x168>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_UART_MspInit+0x168>)
 800339e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033aa:	4b18      	ldr	r3, [pc, #96]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80033c2:	4812      	ldr	r0, [pc, #72]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033c4:	f000 fdb6 	bl	8003f34 <HAL_DMA_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80033ce:	f7ff fd35 	bl	8002e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80033d8:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <HAL_UART_MspInit+0x168>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	2047      	movs	r0, #71	@ 0x47
 80033e4:	f000 fd6b 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80033e8:	2047      	movs	r0, #71	@ 0x47
 80033ea:	f000 fd84 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3730      	adds	r7, #48	@ 0x30
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40004400 	.word	0x40004400
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000
 8003404:	40011400 	.word	0x40011400
 8003408:	40020800 	.word	0x40020800
 800340c:	2000044c 	.word	0x2000044c
 8003410:	40026428 	.word	0x40026428

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <NMI_Handler+0x4>

0800341c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <HardFault_Handler+0x4>

08003424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <MemManage_Handler+0x4>

0800342c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <BusFault_Handler+0x4>

08003434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <UsageFault_Handler+0x4>

0800343c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800346a:	f000 f991 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}

08003472 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(External_button_Pin);
 8003476:	2004      	movs	r0, #4
 8003478:	f001 fafc 	bl	8004a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003486:	f003 fa45 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200002a4 	.word	0x200002a4

08003494 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003498:	4803      	ldr	r0, [pc, #12]	@ (80034a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800349a:	f003 fa3b 	bl	8006914 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800349e:	4803      	ldr	r0, [pc, #12]	@ (80034ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80034a0:	f003 fa38 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200002a4 	.word	0x200002a4
 80034ac:	2000037c 	.word	0x2000037c

080034b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80034b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034b8:	f001 fadc 	bl	8004a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}

080034c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <DMA2_Stream1_IRQHandler+0x10>)
 80034c6:	f000 fecd 	bl	8004264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000044c 	.word	0x2000044c

080034d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80034d8:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <USART6_IRQHandler+0x10>)
 80034da:	f004 f9b9 	bl	8007850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000408 	.word	0x20000408

080034e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return 1;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_kill>:

int _kill(int pid, int sig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003502:	f007 fb41 	bl	800ab88 <__errno>
 8003506:	4603      	mov	r3, r0
 8003508:	2216      	movs	r2, #22
 800350a:	601a      	str	r2, [r3, #0]
  return -1;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_exit>:

void _exit (int status)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ffe7 	bl	80034f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <_exit+0x12>

0800352e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e00a      	b.n	8003556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003540:	f3af 8000 	nop.w
 8003544:	4601      	mov	r1, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	60ba      	str	r2, [r7, #8]
 800354c:	b2ca      	uxtb	r2, r1
 800354e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3301      	adds	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbf0      	blt.n	8003540 <_read+0x12>
  }

  return len;
 800355e:	687b      	ldr	r3, [r7, #4]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e009      	b.n	800358e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fa28 	bl	80029d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	dbf1      	blt.n	800357a <_write+0x12>
  }
  return len;
 8003596:	687b      	ldr	r3, [r7, #4]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_close>:

int _close(int file)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c8:	605a      	str	r2, [r3, #4]
  return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_isatty>:

int _isatty(int file)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	@ (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003638:	f007 faa6 	bl	800ab88 <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	220c      	movs	r2, #12
 8003640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20018000 	.word	0x20018000
 8003668:	00000400 	.word	0x00000400
 800366c:	20000690 	.word	0x20000690
 8003670:	200007e8 	.word	0x200007e8

08003674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <SystemInit+0x20>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <SystemInit+0x20>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800369c:	480d      	ldr	r0, [pc, #52]	@ (80036d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800369e:	490e      	ldr	r1, [pc, #56]	@ (80036d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036a0:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a4:	e002      	b.n	80036ac <LoopCopyDataInit>

080036a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036aa:	3304      	adds	r3, #4

080036ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b0:	d3f9      	bcc.n	80036a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b2:	4a0b      	ldr	r2, [pc, #44]	@ (80036e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036b4:	4c0b      	ldr	r4, [pc, #44]	@ (80036e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b8:	e001      	b.n	80036be <LoopFillZerobss>

080036ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036bc:	3204      	adds	r2, #4

080036be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c0:	d3fb      	bcc.n	80036ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036c2:	f7ff ffd7 	bl	8003674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036c6:	f007 fa65 	bl	800ab94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ca:	f7fe fa89 	bl	8001be0 <main>
  bx  lr    
 80036ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80036dc:	0800db94 	.word	0x0800db94
  ldr r2, =_sbss
 80036e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80036e4:	200007e4 	.word	0x200007e4

080036e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC_IRQHandler>
	...

080036ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f0:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	@ (800372c <HAL_Init+0x40>)
 80036f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_Init+0x40>)
 8003702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a07      	ldr	r2, [pc, #28]	@ (800372c <HAL_Init+0x40>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 fbc7 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371a:	2000      	movs	r0, #0
 800371c:	f000 f808 	bl	8003730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003720:	f7ff fbfe 	bl	8002f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023c00 	.word	0x40023c00

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003738:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_InitTick+0x54>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x58>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003746:	fbb3 f3f1 	udiv	r3, r3, r1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fbe3 	bl	8003f1a <HAL_SYSTICK_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00e      	b.n	800377c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d80a      	bhi.n	800377a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003764:	2200      	movs	r2, #0
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f000 fba7 	bl	8003ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003770:	4a06      	ldr	r2, [pc, #24]	@ (800378c <HAL_InitTick+0x5c>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000014 	.word	0x20000014
 8003788:	2000001c 	.word	0x2000001c
 800378c:	20000018 	.word	0x20000018

08003790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_IncTick+0x20>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x24>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_IncTick+0x24>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000001c 	.word	0x2000001c
 80037b4:	20000694 	.word	0x20000694

080037b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_GetTick+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000694 	.word	0x20000694

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff ffee 	bl	80037b8 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d005      	beq.n	80037f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <HAL_Delay+0x44>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037f6:	bf00      	nop
 80037f8:	f7ff ffde 	bl	80037b8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f7      	bhi.n	80037f8 <HAL_Delay+0x28>
  {
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000001c 	.word	0x2000001c

08003818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e033      	b.n	8003896 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fb9a 	bl	8002f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d118      	bne.n	8003888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800385e:	f023 0302 	bic.w	r3, r3, #2
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f93a 	bl	8003ae4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
 8003886:	e001      	b.n	800388c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e105      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x228>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d925      	bls.n	8003918 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68d9      	ldr	r1, [r3, #12]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	3b1e      	subs	r3, #30
 80038e2:	2207      	movs	r2, #7
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43da      	mvns	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	400a      	ands	r2, r1
 80038f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68d9      	ldr	r1, [r3, #12]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	4618      	mov	r0, r3
 8003904:	4603      	mov	r3, r0
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4403      	add	r3, r0
 800390a:	3b1e      	subs	r3, #30
 800390c:	409a      	lsls	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	e022      	b.n	800395e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6919      	ldr	r1, [r3, #16]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	2207      	movs	r2, #7
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	400a      	ands	r2, r1
 800393a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6919      	ldr	r1, [r3, #16]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	4618      	mov	r0, r3
 800394e:	4603      	mov	r3, r0
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4403      	add	r3, r0
 8003954:	409a      	lsls	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d824      	bhi.n	80039b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	3b05      	subs	r3, #5
 8003978:	221f      	movs	r2, #31
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	400a      	ands	r2, r1
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	4618      	mov	r0, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	3b05      	subs	r3, #5
 80039a2:	fa00 f203 	lsl.w	r2, r0, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ae:	e04c      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	d824      	bhi.n	8003a02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	3b23      	subs	r3, #35	@ 0x23
 80039ca:	221f      	movs	r2, #31
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43da      	mvns	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	400a      	ands	r2, r1
 80039d8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	3b23      	subs	r3, #35	@ 0x23
 80039f4:	fa00 f203 	lsl.w	r2, r0, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a00:	e023      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	3b41      	subs	r3, #65	@ 0x41
 8003a14:	221f      	movs	r2, #31
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	400a      	ands	r2, r1
 8003a22:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b41      	subs	r3, #65	@ 0x41
 8003a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x234>)
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x238>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d109      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1cc>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d105      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x238>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d123      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x21e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d003      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x1e6>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b11      	cmp	r3, #17
 8003a84:	d11b      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d111      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_ADC_ConfigChannel+0x23c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x240>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	0c9a      	lsrs	r2, r3, #18
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ab0:	e002      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f9      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012300 	.word	0x40012300
 8003ad8:	40012000 	.word	0x40012000
 8003adc:	20000014 	.word	0x20000014
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aec:	4b79      	ldr	r3, [pc, #484]	@ (8003cd4 <ADC_Init+0x1f0>)
 8003aee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6899      	ldr	r1, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	4a58      	ldr	r2, [pc, #352]	@ (8003cd8 <ADC_Init+0x1f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	e00f      	b.n	8003be2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003be0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0202 	bic.w	r2, r2, #2
 8003bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7e1b      	ldrb	r3, [r3, #24]
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01b      	beq.n	8003c48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	035a      	lsls	r2, r3, #13
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	e007      	b.n	8003c58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	051a      	lsls	r2, r3, #20
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6899      	ldr	r1, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c9a:	025a      	lsls	r2, r3, #9
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	029a      	lsls	r2, r3, #10
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012300 	.word	0x40012300
 8003cd8:	0f000001 	.word	0x0f000001

08003cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cec:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <__NVIC_SetPriorityGrouping+0x44>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0e:	4a04      	ldr	r2, [pc, #16]	@ (8003d20 <__NVIC_SetPriorityGrouping+0x44>)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	60d3      	str	r3, [r2, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <__NVIC_GetPriorityGrouping+0x18>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 0307 	and.w	r3, r3, #7
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	db0b      	blt.n	8003d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	4907      	ldr	r1, [pc, #28]	@ (8003d78 <__NVIC_EnableIRQ+0x38>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2001      	movs	r0, #1
 8003d62:	fa00 f202 	lsl.w	r2, r0, r2
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000e100 	.word	0xe000e100

08003d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db0a      	blt.n	8003da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	490c      	ldr	r1, [pc, #48]	@ (8003dc8 <__NVIC_SetPriority+0x4c>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da4:	e00a      	b.n	8003dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4908      	ldr	r1, [pc, #32]	@ (8003dcc <__NVIC_SetPriority+0x50>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3b04      	subs	r3, #4
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	440b      	add	r3, r1
 8003dba:	761a      	strb	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	@ 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f1c3 0307 	rsb	r3, r3, #7
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	bf28      	it	cs
 8003dee:	2304      	movcs	r3, #4
 8003df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d902      	bls.n	8003e00 <NVIC_EncodePriority+0x30>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3b03      	subs	r3, #3
 8003dfe:	e000      	b.n	8003e02 <NVIC_EncodePriority+0x32>
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	401a      	ands	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e18:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	43d9      	mvns	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	4313      	orrs	r3, r2
         );
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3724      	adds	r7, #36	@ 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e3c:	f3bf 8f4f 	dsb	sy
}
 8003e40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e42:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <__NVIC_SystemReset+0x24>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e4a:	4904      	ldr	r1, [pc, #16]	@ (8003e5c <__NVIC_SystemReset+0x24>)
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <__NVIC_SystemReset+0x28>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e52:	f3bf 8f4f 	dsb	sy
}
 8003e56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <__NVIC_SystemReset+0x20>
 8003e5c:	e000ed00 	.word	0xe000ed00
 8003e60:	05fa0004 	.word	0x05fa0004

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f7ff ff78 	bl	8003d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff13 	bl	8003cdc <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff28 	bl	8003d24 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff78 	bl	8003dd0 <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff47 	bl	8003d7c <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff1b 	bl	8003d40 <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f16:	f7ff ff8f 	bl	8003e38 <__NVIC_SystemReset>

08003f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff9e 	bl	8003e64 <SysTick_Config>
 8003f28:	4603      	mov	r3, r0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f40:	f7ff fc3a 	bl	80037b8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e099      	b.n	8004084 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f70:	e00f      	b.n	8003f92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f72:	f7ff fc21 	bl	80037b8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d908      	bls.n	8003f92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e078      	b.n	8004084 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e8      	bne.n	8003f72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4b38      	ldr	r3, [pc, #224]	@ (800408c <HAL_DMA_Init+0x158>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d107      	bne.n	8003ffc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	2b04      	cmp	r3, #4
 8004024:	d117      	bne.n	8004056 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb01 	bl	8004640 <DMA_CheckFifoParam>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2240      	movs	r2, #64	@ 0x40
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004052:	2301      	movs	r3, #1
 8004054:	e016      	b.n	8004084 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fab8 	bl	80045d4 <DMA_CalcBaseAndBitshift>
 8004064:	4603      	mov	r3, r0
 8004066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	223f      	movs	r2, #63	@ 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	f010803f 	.word	0xf010803f

08004090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_DMA_Start_IT+0x26>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e040      	b.n	8004138 <HAL_DMA_Start_IT+0xa8>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d12f      	bne.n	800412a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa4a 	bl	8004578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	223f      	movs	r2, #63	@ 0x3f
 80040ea:	409a      	lsls	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0216 	orr.w	r2, r2, #22
 80040fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e005      	b.n	8004136 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800414e:	f7ff fb33 	bl	80037b8 <HAL_GetTick>
 8004152:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d008      	beq.n	8004172 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2280      	movs	r2, #128	@ 0x80
 8004164:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e052      	b.n	8004218 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0216 	bic.w	r2, r2, #22
 8004180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <HAL_DMA_Abort+0x62>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0208 	bic.w	r2, r2, #8
 80041b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c2:	e013      	b.n	80041ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041c4:	f7ff faf8 	bl	80037b8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d90c      	bls.n	80041ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2203      	movs	r2, #3
 80041dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e015      	b.n	8004218 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e4      	bne.n	80041c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	223f      	movs	r2, #63	@ 0x3f
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d004      	beq.n	800423e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2280      	movs	r2, #128	@ 0x80
 8004238:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e00c      	b.n	8004258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2205      	movs	r2, #5
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004270:	4b8e      	ldr	r3, [pc, #568]	@ (80044ac <HAL_DMA_IRQHandler+0x248>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a8e      	ldr	r2, [pc, #568]	@ (80044b0 <HAL_DMA_IRQHandler+0x24c>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	0a9b      	lsrs	r3, r3, #10
 800427c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	2208      	movs	r2, #8
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01a      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	2208      	movs	r2, #8
 80042be:	409a      	lsls	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	2201      	movs	r2, #1
 80042f4:	409a      	lsls	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430a:	2204      	movs	r2, #4
 800430c:	409a      	lsls	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	2204      	movs	r2, #4
 800432a:	409a      	lsls	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	2210      	movs	r2, #16
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d043      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435e:	2210      	movs	r2, #16
 8004360:	409a      	lsls	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d018      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d108      	bne.n	8004394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d024      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e01f      	b.n	80043d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
 80043a4:	e016      	b.n	80043d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0208 	bic.w	r2, r2, #8
 80043c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	2220      	movs	r2, #32
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 808f 	beq.w	8004504 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8087 	beq.w	8004504 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	2220      	movs	r2, #32
 80043fc:	409a      	lsls	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b05      	cmp	r3, #5
 800440c:	d136      	bne.n	800447c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0216 	bic.w	r2, r2, #22
 800441c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <HAL_DMA_IRQHandler+0x1da>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0208 	bic.w	r2, r2, #8
 800444c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	223f      	movs	r2, #63	@ 0x3f
 8004454:	409a      	lsls	r2, r3
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446e:	2b00      	cmp	r3, #0
 8004470:	d07e      	beq.n	8004570 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
        }
        return;
 800447a:	e079      	b.n	8004570 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	2b00      	cmp	r3, #0
 800449e:	d031      	beq.n	8004504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
 80044a8:	e02c      	b.n	8004504 <HAL_DMA_IRQHandler+0x2a0>
 80044aa:	bf00      	nop
 80044ac:	20000014 	.word	0x20000014
 80044b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d023      	beq.n	8004504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e01e      	b.n	8004504 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0210 	bic.w	r2, r2, #16
 80044e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	2b00      	cmp	r3, #0
 800450a:	d032      	beq.n	8004572 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d022      	beq.n	800455e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2205      	movs	r2, #5
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3301      	adds	r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	d307      	bcc.n	800454c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f2      	bne.n	8004530 <HAL_DMA_IRQHandler+0x2cc>
 800454a:	e000      	b.n	800454e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800454c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004570:	bf00      	nop
    }
  }
}
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d108      	bne.n	80045b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045b6:	e007      	b.n	80045c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	3b10      	subs	r3, #16
 80045e4:	4a14      	ldr	r2, [pc, #80]	@ (8004638 <DMA_CalcBaseAndBitshift+0x64>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ee:	4a13      	ldr	r2, [pc, #76]	@ (800463c <DMA_CalcBaseAndBitshift+0x68>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d909      	bls.n	8004616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	1d1a      	adds	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	659a      	str	r2, [r3, #88]	@ 0x58
 8004614:	e007      	b.n	8004626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	aaaaaaab 	.word	0xaaaaaaab
 800463c:	0800d6f0 	.word	0x0800d6f0

08004640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11f      	bne.n	800469a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d856      	bhi.n	800470e <DMA_CheckFifoParam+0xce>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <DMA_CheckFifoParam+0x28>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004679 	.word	0x08004679
 800466c:	0800468b 	.word	0x0800468b
 8004670:	08004679 	.word	0x08004679
 8004674:	0800470f 	.word	0x0800470f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d046      	beq.n	8004712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e043      	b.n	8004712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004692:	d140      	bne.n	8004716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e03d      	b.n	8004716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a2:	d121      	bne.n	80046e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d837      	bhi.n	800471a <DMA_CheckFifoParam+0xda>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <DMA_CheckFifoParam+0x70>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046c7 	.word	0x080046c7
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	080046d9 	.word	0x080046d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e030      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d025      	beq.n	800471e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d6:	e022      	b.n	800471e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046e0:	d11f      	bne.n	8004722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046e6:	e01c      	b.n	8004722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d903      	bls.n	80046f6 <DMA_CheckFifoParam+0xb6>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d003      	beq.n	80046fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046f4:	e018      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      break;
 80046fa:	e015      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00e      	beq.n	8004726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e00b      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 800470e:	bf00      	nop
 8004710:	e00a      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e008      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004716:	bf00      	nop
 8004718:	e006      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 800471a:	bf00      	nop
 800471c:	e004      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;   
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
    }
  } 
  
  return status; 
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	@ 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e159      	b.n	8004a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004754:	2201      	movs	r2, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	f040 8148 	bne.w	8004a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d005      	beq.n	800478a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004786:	2b02      	cmp	r3, #2
 8004788:	d130      	bne.n	80047ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 0201 	and.w	r2, r3, #1
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d017      	beq.n	8004828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d123      	bne.n	800487c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	08da      	lsrs	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3208      	adds	r2, #8
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0203 	and.w	r2, r3, #3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a2 	beq.w	8004a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	4b57      	ldr	r3, [pc, #348]	@ (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	4a56      	ldr	r2, [pc, #344]	@ (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ce:	4b54      	ldr	r3, [pc, #336]	@ (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048da:	4a52      	ldr	r2, [pc, #328]	@ (8004a24 <HAL_GPIO_Init+0x2ec>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	220f      	movs	r2, #15
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a49      	ldr	r2, [pc, #292]	@ (8004a28 <HAL_GPIO_Init+0x2f0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x202>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a48      	ldr	r2, [pc, #288]	@ (8004a2c <HAL_GPIO_Init+0x2f4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x1fe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a47      	ldr	r2, [pc, #284]	@ (8004a30 <HAL_GPIO_Init+0x2f8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a46      	ldr	r2, [pc, #280]	@ (8004a34 <HAL_GPIO_Init+0x2fc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x1f6>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a45      	ldr	r2, [pc, #276]	@ (8004a38 <HAL_GPIO_Init+0x300>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x1f2>
 8004926:	2304      	movs	r3, #4
 8004928:	e008      	b.n	800493c <HAL_GPIO_Init+0x204>
 800492a:	2307      	movs	r3, #7
 800492c:	e006      	b.n	800493c <HAL_GPIO_Init+0x204>
 800492e:	2303      	movs	r3, #3
 8004930:	e004      	b.n	800493c <HAL_GPIO_Init+0x204>
 8004932:	2302      	movs	r3, #2
 8004934:	e002      	b.n	800493c <HAL_GPIO_Init+0x204>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_GPIO_Init+0x204>
 800493a:	2300      	movs	r3, #0
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	f002 0203 	and.w	r2, r2, #3
 8004942:	0092      	lsls	r2, r2, #2
 8004944:	4093      	lsls	r3, r2
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800494c:	4935      	ldr	r1, [pc, #212]	@ (8004a24 <HAL_GPIO_Init+0x2ec>)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495a:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800497e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004984:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a8:	4a24      	ldr	r2, [pc, #144]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ae:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049d2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049d8:	4b18      	ldr	r3, [pc, #96]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049fc:	4a0f      	ldr	r2, [pc, #60]	@ (8004a3c <HAL_GPIO_Init+0x304>)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	f67f aea2 	bls.w	8004754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	3724      	adds	r7, #36	@ 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40013800 	.word	0x40013800
 8004a28:	40020000 	.word	0x40020000
 8004a2c:	40020400 	.word	0x40020400
 8004a30:	40020800 	.word	0x40020800
 8004a34:	40020c00 	.word	0x40020c00
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40013c00 	.word	0x40013c00

08004a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a50:	787b      	ldrb	r3, [r7, #1]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a56:	887a      	ldrh	r2, [r7, #2]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a5c:	e003      	b.n	8004a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	041a      	lsls	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	619a      	str	r2, [r3, #24]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a7e:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a8a:	4a05      	ldr	r2, [pc, #20]	@ (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd ffbc 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40013c00 	.word	0x40013c00

08004aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e12b      	b.n	8004d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fe fa94 	bl	8002ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	@ 0x24
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b08:	f001 fbec 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a81      	ldr	r2, [pc, #516]	@ (8004d18 <HAL_I2C_Init+0x274>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d807      	bhi.n	8004b28 <HAL_I2C_Init+0x84>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a80      	ldr	r2, [pc, #512]	@ (8004d1c <HAL_I2C_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bf94      	ite	ls
 8004b20:	2301      	movls	r3, #1
 8004b22:	2300      	movhi	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e006      	b.n	8004b36 <HAL_I2C_Init+0x92>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d20 <HAL_I2C_Init+0x27c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bf94      	ite	ls
 8004b30:	2301      	movls	r3, #1
 8004b32:	2300      	movhi	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e0e7      	b.n	8004d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a78      	ldr	r2, [pc, #480]	@ (8004d24 <HAL_I2C_Init+0x280>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0c9b      	lsrs	r3, r3, #18
 8004b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004d18 <HAL_I2C_Init+0x274>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <HAL_I2C_Init+0xd4>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3301      	adds	r3, #1
 8004b76:	e009      	b.n	8004b8c <HAL_I2C_Init+0xe8>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	4a69      	ldr	r2, [pc, #420]	@ (8004d28 <HAL_I2C_Init+0x284>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	495c      	ldr	r1, [pc, #368]	@ (8004d18 <HAL_I2C_Init+0x274>)
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	d819      	bhi.n	8004be0 <HAL_I2C_Init+0x13c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e59      	subs	r1, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bc0:	400b      	ands	r3, r1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_I2C_Init+0x138>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1e59      	subs	r1, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	e051      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	e04f      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <HAL_I2C_Init+0x168>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1e58      	subs	r0, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e012      	b.n	8004c32 <HAL_I2C_Init+0x18e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1e58      	subs	r0, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	0099      	lsls	r1, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Init+0x196>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e022      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10e      	bne.n	8004c60 <HAL_I2C_Init+0x1bc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1e58      	subs	r0, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	440b      	add	r3, r1
 8004c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c5e:	e00f      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e58      	subs	r0, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	0099      	lsls	r1, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	6809      	ldr	r1, [r1, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6911      	ldr	r1, [r2, #16]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	000186a0 	.word	0x000186a0
 8004d1c:	001e847f 	.word	0x001e847f
 8004d20:	003d08ff 	.word	0x003d08ff
 8004d24:	431bde83 	.word	0x431bde83
 8004d28:	10624dd3 	.word	0x10624dd3

08004d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7fe fd3a 	bl	80037b8 <HAL_GetTick>
 8004d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 80e0 	bne.w	8004f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2319      	movs	r3, #25
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4970      	ldr	r1, [pc, #448]	@ (8004f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fc72 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0d3      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_I2C_Master_Transmit+0x50>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0cc      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d007      	beq.n	8004da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2221      	movs	r2, #33	@ 0x21
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	893a      	ldrh	r2, [r7, #8]
 8004dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a50      	ldr	r2, [pc, #320]	@ (8004f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8004de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fadc 	bl	80053a8 <I2C_MasterRequestWrite>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e08d      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e10:	e066      	b.n	8004ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fcec 	bl	80057f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d107      	bne.n	8004e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06b      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_I2C_Master_Transmit+0x188>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	6a39      	ldr	r1, [r7, #32]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fcdc 	bl	8005876 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d107      	bne.n	8004edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e01a      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d194      	bne.n	8004e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e000      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	00100002 	.word	0x00100002
 8004f24:	ffff0000 	.word	0xffff0000

08004f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3c:	f7fe fc3c 	bl	80037b8 <HAL_GetTick>
 8004f40:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	f040 820b 	bne.w	8005366 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2319      	movs	r3, #25
 8004f56:	2201      	movs	r2, #1
 8004f58:	497c      	ldr	r1, [pc, #496]	@ (800514c <HAL_I2C_Master_Receive+0x224>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb74 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	e1fe      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_I2C_Master_Receive+0x50>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e1f7      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d007      	beq.n	8004f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2222      	movs	r2, #34	@ 0x22
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8005150 <HAL_I2C_Master_Receive+0x228>)
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fe0:	8979      	ldrh	r1, [r7, #10]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fa60 	bl	80054ac <I2C_MasterRequestRead>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1b8      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e18c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502a:	2b01      	cmp	r3, #1
 800502c:	d11b      	bne.n	8005066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e16c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11b      	bne.n	80050a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800507c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	e14c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050cc:	e138      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	f200 80f1 	bhi.w	80052ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d123      	bne.n	8005128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fc07 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e139      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005126:	e10b      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	2b02      	cmp	r3, #2
 800512e:	d14e      	bne.n	80051ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	4906      	ldr	r1, [pc, #24]	@ (8005154 <HAL_I2C_Master_Receive+0x22c>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fa84 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e10e      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
 800514a:	bf00      	nop
 800514c:	00100002 	.word	0x00100002
 8005150:	ffff0000 	.word	0xffff0000
 8005154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051cc:	e0b8      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	4966      	ldr	r1, [pc, #408]	@ (8005370 <HAL_I2C_Master_Receive+0x448>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fa35 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0bf      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	494f      	ldr	r1, [pc, #316]	@ (8005370 <HAL_I2C_Master_Receive+0x448>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fa07 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e091      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052b8:	e042      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fb1a 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e04c      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d118      	bne.n	8005340 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f aec2 	bne.w	80050ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	@ 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	00010004 	.word	0x00010004

08005374 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005382:	b2db      	uxtb	r3, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	460b      	mov	r3, r1
 80053b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d006      	beq.n	80053d2 <I2C_MasterRequestWrite+0x2a>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d003      	beq.n	80053d2 <I2C_MasterRequestWrite+0x2a>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053d0:	d108      	bne.n	80053e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e00b      	b.n	80053fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	2b12      	cmp	r3, #18
 80053ea:	d107      	bne.n	80053fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f91d 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005422:	d103      	bne.n	800542c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800542a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e035      	b.n	800549c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005438:	d108      	bne.n	800544c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	e01b      	b.n	8005484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800544c:	897b      	ldrh	r3, [r7, #10]
 800544e:	11db      	asrs	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f063 030f 	orn	r3, r3, #15
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	490e      	ldr	r1, [pc, #56]	@ (80054a4 <I2C_MasterRequestWrite+0xfc>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f943 	bl	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e010      	b.n	800549c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4907      	ldr	r1, [pc, #28]	@ (80054a8 <I2C_MasterRequestWrite+0x100>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f933 	bl	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	00010008 	.word	0x00010008
 80054a8:	00010002 	.word	0x00010002

080054ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	460b      	mov	r3, r1
 80054ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d006      	beq.n	80054e6 <I2C_MasterRequestRead+0x3a>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d003      	beq.n	80054e6 <I2C_MasterRequestRead+0x3a>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054e4:	d108      	bne.n	80054f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e00b      	b.n	8005510 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	2b11      	cmp	r3, #17
 80054fe:	d107      	bne.n	8005510 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800550e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f893 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005536:	d103      	bne.n	8005540 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e079      	b.n	8005638 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800554c:	d108      	bne.n	8005560 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800554e:	897b      	ldrh	r3, [r7, #10]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	e05f      	b.n	8005620 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005560:	897b      	ldrh	r3, [r7, #10]
 8005562:	11db      	asrs	r3, r3, #7
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 0306 	and.w	r3, r3, #6
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f063 030f 	orn	r3, r3, #15
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4930      	ldr	r1, [pc, #192]	@ (8005640 <I2C_MasterRequestRead+0x194>)
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f8b9 	bl	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e054      	b.n	8005638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800558e:	897b      	ldrh	r3, [r7, #10]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4929      	ldr	r1, [pc, #164]	@ (8005644 <I2C_MasterRequestRead+0x198>)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f8a9 	bl	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e044      	b.n	8005638 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f831 	bl	8005648 <I2C_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fa:	d103      	bne.n	8005604 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e017      	b.n	8005638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005608:	897b      	ldrh	r3, [r7, #10]
 800560a:	11db      	asrs	r3, r3, #7
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 0306 	and.w	r3, r3, #6
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f063 030e 	orn	r3, r3, #14
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4907      	ldr	r1, [pc, #28]	@ (8005644 <I2C_MasterRequestRead+0x198>)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f865 	bl	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	00010008 	.word	0x00010008
 8005644:	00010002 	.word	0x00010002

08005648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005658:	e025      	b.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d021      	beq.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005662:	f7fe f8a9 	bl	80037b8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d116      	bne.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e023      	b.n	80056ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10d      	bne.n	80056cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	43da      	mvns	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	e00c      	b.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf0c      	ite	eq
 80056de:	2301      	moveq	r3, #1
 80056e0:	2300      	movne	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d0b6      	beq.n	800565a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005704:	e051      	b.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005714:	d123      	bne.n	800575e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005724:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800572e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	f043 0204 	orr.w	r2, r3, #4
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e046      	b.n	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d021      	beq.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fe f827 	bl	80037b8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e020      	b.n	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10c      	bne.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	43da      	mvns	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	e00b      	b.n	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	43da      	mvns	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d18d      	bne.n	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005800:	e02d      	b.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f8ce 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e02d      	b.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d021      	beq.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581a:	f7fd ffcd 	bl	80037b8 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e007      	b.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005868:	2b80      	cmp	r3, #128	@ 0x80
 800586a:	d1ca      	bne.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005882:	e02d      	b.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f88d 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e02d      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d021      	beq.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589c:	f7fd ff8c 	bl	80037b8 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e007      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d1ca      	bne.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005904:	e042      	b.n	800598c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d119      	bne.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0210 	mvn.w	r2, #16
 800591c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e029      	b.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005948:	f7fd ff36 	bl	80037b8 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e007      	b.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d1b5      	bne.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ba:	d11b      	bne.n	80059f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	f043 0204 	orr.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e267      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d075      	beq.n	8005b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a22:	4b88      	ldr	r3, [pc, #544]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4b85      	ldr	r3, [pc, #532]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d112      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b82      	ldr	r3, [pc, #520]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b7e      	ldr	r3, [pc, #504]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e242      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x74>
 8005a6a:	4b76      	ldr	r3, [pc, #472]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a75      	ldr	r2, [pc, #468]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e01d      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4b70      	ldr	r3, [pc, #448]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6f      	ldr	r2, [pc, #444]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6c      	ldr	r2, [pc, #432]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e00b      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	4b69      	ldr	r3, [pc, #420]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a68      	ldr	r2, [pc, #416]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4b66      	ldr	r3, [pc, #408]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a65      	ldr	r2, [pc, #404]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fd fe7c 	bl	80037b8 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fd fe78 	bl	80037b8 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	@ 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e207      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005ae2:	e014      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fe68 	bl	80037b8 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fd fe64 	bl	80037b8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	@ 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1f3      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	4b51      	ldr	r3, [pc, #324]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d11c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b44      	ldr	r3, [pc, #272]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	4b41      	ldr	r3, [pc, #260]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e1c7      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4937      	ldr	r1, [pc, #220]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6a:	e03a      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b74:	4b34      	ldr	r3, [pc, #208]	@ (8005c48 <HAL_RCC_OscConfig+0x244>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fd fe1d 	bl	80037b8 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fd fe19 	bl	80037b8 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e1a8      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4b28      	ldr	r3, [pc, #160]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4925      	ldr	r1, [pc, #148]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb6:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RCC_OscConfig+0x244>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fdfc 	bl	80037b8 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fd fdf8 	bl	80037b8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e187      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d036      	beq.n	8005c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_RCC_OscConfig+0x248>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fd fddc 	bl	80037b8 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fd fdd8 	bl	80037b8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e167      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_OscConfig+0x240>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x200>
 8005c22:	e01b      	b.n	8005c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_RCC_OscConfig+0x248>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2a:	f7fd fdc5 	bl	80037b8 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	e00e      	b.n	8005c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fd fdc1 	bl	80037b8 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d907      	bls.n	8005c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e150      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
 8005c44:	40023800 	.word	0x40023800
 8005c48:	42470000 	.word	0x42470000
 8005c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c50:	4b88      	ldr	r3, [pc, #544]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ea      	bne.n	8005c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8097 	beq.w	8005d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6e:	4b81      	ldr	r3, [pc, #516]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	4a7c      	ldr	r2, [pc, #496]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9a:	4b77      	ldr	r3, [pc, #476]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d118      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca6:	4b74      	ldr	r3, [pc, #464]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a73      	ldr	r2, [pc, #460]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb2:	f7fd fd81 	bl	80037b8 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cba:	f7fd fd7d 	bl	80037b8 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e10c      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCC_OscConfig+0x474>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x2ea>
 8005ce0:	4b64      	ldr	r3, [pc, #400]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a63      	ldr	r2, [pc, #396]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cec:	e01c      	b.n	8005d28 <HAL_RCC_OscConfig+0x324>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x30c>
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	f043 0304 	orr.w	r3, r3, #4
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d02:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d06:	4a5b      	ldr	r2, [pc, #364]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0x324>
 8005d10:	4b58      	ldr	r3, [pc, #352]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d14:	4a57      	ldr	r2, [pc, #348]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1c:	4b55      	ldr	r3, [pc, #340]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d20:	4a54      	ldr	r2, [pc, #336]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fd fd42 	bl	80037b8 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fd fd3e 	bl	80037b8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0cb      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	4b49      	ldr	r3, [pc, #292]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ee      	beq.n	8005d38 <HAL_RCC_OscConfig+0x334>
 8005d5a:	e014      	b.n	8005d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fd fd2c 	bl	80037b8 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fd fd28 	bl	80037b8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e0b5      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8c:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	4a38      	ldr	r2, [pc, #224]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80a1 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da2:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d05c      	beq.n	8005e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d141      	bne.n	8005e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fd fcfc 	bl	80037b8 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fd fcf8 	bl	80037b8 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e087      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fd fcd1 	bl	80037b8 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fd fccd 	bl	80037b8 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e05c      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2c:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f0      	beq.n	8005e1a <HAL_RCC_OscConfig+0x416>
 8005e38:	e054      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	4b10      	ldr	r3, [pc, #64]	@ (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fd fcba 	bl	80037b8 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fd fcb6 	bl	80037b8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e045      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x444>
 8005e66:	e03d      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e038      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
 8005e74:	40023800 	.word	0x40023800
 8005e78:	40007000 	.word	0x40007000
 8005e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_RCC_OscConfig+0x4ec>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d028      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d121      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d11a      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d111      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800

08005ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0cc      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f08:	4b68      	ldr	r3, [pc, #416]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90c      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b65      	ldr	r3, [pc, #404]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0b8      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f48:	4b59      	ldr	r3, [pc, #356]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4a58      	ldr	r2, [pc, #352]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f60:	4b53      	ldr	r3, [pc, #332]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a52      	ldr	r2, [pc, #328]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6c:	4b50      	ldr	r3, [pc, #320]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	494d      	ldr	r1, [pc, #308]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d044      	beq.n	8006014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f92:	4b47      	ldr	r3, [pc, #284]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d119      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e07f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d003      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e06f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e067      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd2:	4b37      	ldr	r3, [pc, #220]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f023 0203 	bic.w	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4934      	ldr	r1, [pc, #208]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe4:	f7fd fbe8 	bl	80037b8 <HAL_GetTick>
 8005fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fec:	f7fd fbe4 	bl	80037b8 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e04f      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	4b2b      	ldr	r3, [pc, #172]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 020c 	and.w	r2, r3, #12
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	429a      	cmp	r2, r3
 8006012:	d1eb      	bne.n	8005fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006014:	4b25      	ldr	r3, [pc, #148]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d20c      	bcs.n	800603c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006022:	4b22      	ldr	r3, [pc, #136]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <HAL_RCC_ClockConfig+0x1b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d001      	beq.n	800603c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e032      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006048:	4b19      	ldr	r3, [pc, #100]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4916      	ldr	r1, [pc, #88]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	490e      	ldr	r1, [pc, #56]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800607a:	f000 f821 	bl	80060c0 <HAL_RCC_GetSysClockFreq>
 800607e:	4602      	mov	r2, r0
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	490a      	ldr	r1, [pc, #40]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c0>)
 800608c:	5ccb      	ldrb	r3, [r1, r3]
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	4a09      	ldr	r2, [pc, #36]	@ (80060b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <HAL_RCC_ClockConfig+0x1c8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fd fb48 	bl	8003730 <HAL_InitTick>

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40023c00 	.word	0x40023c00
 80060b0:	40023800 	.word	0x40023800
 80060b4:	0800d6d8 	.word	0x0800d6d8
 80060b8:	20000014 	.word	0x20000014
 80060bc:	20000018 	.word	0x20000018

080060c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c4:	b094      	sub	sp, #80	@ 0x50
 80060c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80060cc:	2300      	movs	r3, #0
 80060ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d0:	2300      	movs	r3, #0
 80060d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060d8:	4b79      	ldr	r3, [pc, #484]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d00d      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0x40>
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	f200 80e1 	bhi.w	80062ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d003      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0x3a>
 80060f2:	e0db      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060f4:	4b73      	ldr	r3, [pc, #460]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80060f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80060f8:	e0db      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060fa:	4b73      	ldr	r3, [pc, #460]	@ (80062c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060fe:	e0d8      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006100:	4b6f      	ldr	r3, [pc, #444]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800610a:	4b6d      	ldr	r3, [pc, #436]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d063      	beq.n	80061de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006116:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	099b      	lsrs	r3, r3, #6
 800611c:	2200      	movs	r2, #0
 800611e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006120:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
 800612e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	f04f 0000 	mov.w	r0, #0
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	0159      	lsls	r1, r3, #5
 8006140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006144:	0150      	lsls	r0, r2, #5
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4621      	mov	r1, r4
 800614c:	1a51      	subs	r1, r2, r1
 800614e:	6139      	str	r1, [r7, #16]
 8006150:	4629      	mov	r1, r5
 8006152:	eb63 0301 	sbc.w	r3, r3, r1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006164:	4659      	mov	r1, fp
 8006166:	018b      	lsls	r3, r1, #6
 8006168:	4651      	mov	r1, sl
 800616a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800616e:	4651      	mov	r1, sl
 8006170:	018a      	lsls	r2, r1, #6
 8006172:	4651      	mov	r1, sl
 8006174:	ebb2 0801 	subs.w	r8, r2, r1
 8006178:	4659      	mov	r1, fp
 800617a:	eb63 0901 	sbc.w	r9, r3, r1
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800618a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800618e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006192:	4690      	mov	r8, r2
 8006194:	4699      	mov	r9, r3
 8006196:	4623      	mov	r3, r4
 8006198:	eb18 0303 	adds.w	r3, r8, r3
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	462b      	mov	r3, r5
 80061a0:	eb49 0303 	adc.w	r3, r9, r3
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061b2:	4629      	mov	r1, r5
 80061b4:	024b      	lsls	r3, r1, #9
 80061b6:	4621      	mov	r1, r4
 80061b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061bc:	4621      	mov	r1, r4
 80061be:	024a      	lsls	r2, r1, #9
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
 80061c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c6:	2200      	movs	r2, #0
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061d0:	f7fa fd62 	bl	8000c98 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4613      	mov	r3, r2
 80061da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061dc:	e058      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b38      	ldr	r3, [pc, #224]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	4611      	mov	r1, r2
 80061ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	2300      	movs	r3, #0
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f04f 0000 	mov.w	r0, #0
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	0159      	lsls	r1, r3, #5
 8006206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800620a:	0150      	lsls	r0, r2, #5
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4641      	mov	r1, r8
 8006212:	ebb2 0a01 	subs.w	sl, r2, r1
 8006216:	4649      	mov	r1, r9
 8006218:	eb63 0b01 	sbc.w	fp, r3, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800622c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006230:	ebb2 040a 	subs.w	r4, r2, sl
 8006234:	eb63 050b 	sbc.w	r5, r3, fp
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	00eb      	lsls	r3, r5, #3
 8006242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006246:	00e2      	lsls	r2, r4, #3
 8006248:	4614      	mov	r4, r2
 800624a:	461d      	mov	r5, r3
 800624c:	4643      	mov	r3, r8
 800624e:	18e3      	adds	r3, r4, r3
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	464b      	mov	r3, r9
 8006254:	eb45 0303 	adc.w	r3, r5, r3
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006266:	4629      	mov	r1, r5
 8006268:	028b      	lsls	r3, r1, #10
 800626a:	4621      	mov	r1, r4
 800626c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006270:	4621      	mov	r1, r4
 8006272:	028a      	lsls	r2, r1, #10
 8006274:	4610      	mov	r0, r2
 8006276:	4619      	mov	r1, r3
 8006278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627a:	2200      	movs	r2, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	61fa      	str	r2, [r7, #28]
 8006280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006284:	f7fa fd08 	bl	8000c98 <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80062a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062aa:	e002      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3750      	adds	r7, #80	@ 0x50
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	007a1200 	.word	0x007a1200

080062cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062d0:	4b03      	ldr	r3, [pc, #12]	@ (80062e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000014 	.word	0x20000014

080062e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062e8:	f7ff fff0 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0a9b      	lsrs	r3, r3, #10
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4903      	ldr	r1, [pc, #12]	@ (8006308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40023800 	.word	0x40023800
 8006308:	0800d6e8 	.word	0x0800d6e8

0800630c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006310:	f7ff ffdc 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b05      	ldr	r3, [pc, #20]	@ (800632c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0b5b      	lsrs	r3, r3, #13
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4903      	ldr	r1, [pc, #12]	@ (8006330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800
 8006330:	0800d6e8 	.word	0x0800d6e8

08006334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e041      	b.n	80063ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc fe94 	bl	8003088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fd88 	bl	8006e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d001      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e044      	b.n	8006476 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1e      	ldr	r2, [pc, #120]	@ (8006484 <HAL_TIM_Base_Start_IT+0xb0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x6c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006416:	d013      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x6c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1a      	ldr	r2, [pc, #104]	@ (8006488 <HAL_TIM_Base_Start_IT+0xb4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x6c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a19      	ldr	r2, [pc, #100]	@ (800648c <HAL_TIM_Base_Start_IT+0xb8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x6c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a17      	ldr	r2, [pc, #92]	@ (8006490 <HAL_TIM_Base_Start_IT+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x6c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a16      	ldr	r2, [pc, #88]	@ (8006494 <HAL_TIM_Base_Start_IT+0xc0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d111      	bne.n	8006464 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b06      	cmp	r3, #6
 8006450:	d010      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	e007      	b.n	8006474 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000

08006498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e041      	b.n	800652e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f839 	bl	8006536 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f000 fcd6 	bl	8006e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_TIM_PWM_Start+0x24>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e022      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b04      	cmp	r3, #4
 8006574:	d109      	bne.n	800658a <HAL_TIM_PWM_Start+0x3e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	e015      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b08      	cmp	r3, #8
 800658e:	d109      	bne.n	80065a4 <HAL_TIM_PWM_Start+0x58>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e008      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e068      	b.n	8006690 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0x82>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065cc:	e013      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0x92>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0xa2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ec:	e003      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fee8 	bl	80073d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a23      	ldr	r2, [pc, #140]	@ (8006698 <HAL_TIM_PWM_Start+0x14c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d107      	bne.n	800661e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1d      	ldr	r2, [pc, #116]	@ (8006698 <HAL_TIM_PWM_Start+0x14c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d018      	beq.n	800665a <HAL_TIM_PWM_Start+0x10e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006630:	d013      	beq.n	800665a <HAL_TIM_PWM_Start+0x10e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a19      	ldr	r2, [pc, #100]	@ (800669c <HAL_TIM_PWM_Start+0x150>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0x10e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a17      	ldr	r2, [pc, #92]	@ (80066a0 <HAL_TIM_PWM_Start+0x154>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0x10e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a16      	ldr	r2, [pc, #88]	@ (80066a4 <HAL_TIM_PWM_Start+0x158>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0x10e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a14      	ldr	r2, [pc, #80]	@ (80066a8 <HAL_TIM_PWM_Start+0x15c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d111      	bne.n	800667e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d010      	beq.n	800668e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667c:	e007      	b.n	800668e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40014000 	.word	0x40014000

080066ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e097      	b.n	80067f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7fc fd3b 	bl	8003150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f000 fbc1 	bl	8006e88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	4313      	orrs	r3, r2
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800674c:	f023 030c 	bic.w	r3, r3, #12
 8006750:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800675c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	4313      	orrs	r3, r2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	011a      	lsls	r2, r3, #4
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	031b      	lsls	r3, r3, #12
 800677c:	4313      	orrs	r3, r2
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800678a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4313      	orrs	r3, r2
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006808:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006810:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006818:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006820:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d110      	bne.n	800684a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d102      	bne.n	8006834 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800682e:	7b7b      	ldrb	r3, [r7, #13]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e069      	b.n	800690c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006848:	e031      	b.n	80068ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b04      	cmp	r3, #4
 800684e:	d110      	bne.n	8006872 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d102      	bne.n	800685c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006856:	7b3b      	ldrb	r3, [r7, #12]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d001      	beq.n	8006860 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e055      	b.n	800690c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006870:	e01d      	b.n	80068ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d108      	bne.n	800688a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d105      	bne.n	800688a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800687e:	7b7b      	ldrb	r3, [r7, #13]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d102      	bne.n	800688a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006884:	7b3b      	ldrb	r3, [r7, #12]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d001      	beq.n	800688e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e03e      	b.n	800690c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_TIM_Encoder_Start+0xc4>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d008      	beq.n	80068cc <HAL_TIM_Encoder_Start+0xd4>
 80068ba:	e00f      	b.n	80068dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2201      	movs	r2, #1
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fd85 	bl	80073d4 <TIM_CCxChannelCmd>
      break;
 80068ca:	e016      	b.n	80068fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2201      	movs	r2, #1
 80068d2:	2104      	movs	r1, #4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd7d 	bl	80073d4 <TIM_CCxChannelCmd>
      break;
 80068da:	e00e      	b.n	80068fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2201      	movs	r2, #1
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fd75 	bl	80073d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	2104      	movs	r1, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fd6e 	bl	80073d4 <TIM_CCxChannelCmd>
      break;
 80068f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d122      	bne.n	8006970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d11b      	bne.n	8006970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0202 	mvn.w	r2, #2
 8006940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa77 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa69 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa7a 	bl	8006e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b04      	cmp	r3, #4
 800697c:	d122      	bne.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d11b      	bne.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0204 	mvn.w	r2, #4
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa4d 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa3f 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa50 	bl	8006e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d122      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d11b      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0208 	mvn.w	r2, #8
 80069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2204      	movs	r2, #4
 80069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa23 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa15 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa26 	bl	8006e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b10      	cmp	r3, #16
 8006a24:	d122      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0210 	mvn.w	r2, #16
 8006a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2208      	movs	r2, #8
 8006a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9f9 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9eb 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9fc 	bl	8006e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10e      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0201 	mvn.w	r2, #1
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fb ff58 	bl	8002948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa2:	2b80      	cmp	r3, #128	@ 0x80
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab0:	2b80      	cmp	r3, #128	@ 0x80
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd78 	bl	80075b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9c1 	bl	8006e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d10e      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0220 	mvn.w	r2, #32
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fd42 	bl	80075a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e0ae      	b.n	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	f200 809f 	bhi.w	8006c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006c91 	.word	0x08006c91
 8006b60:	08006c91 	.word	0x08006c91
 8006b64:	08006c91 	.word	0x08006c91
 8006b68:	08006bcd 	.word	0x08006bcd
 8006b6c:	08006c91 	.word	0x08006c91
 8006b70:	08006c91 	.word	0x08006c91
 8006b74:	08006c91 	.word	0x08006c91
 8006b78:	08006c0f 	.word	0x08006c0f
 8006b7c:	08006c91 	.word	0x08006c91
 8006b80:	08006c91 	.word	0x08006c91
 8006b84:	08006c91 	.word	0x08006c91
 8006b88:	08006c4f 	.word	0x08006c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f9f8 	bl	8006f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0204 	bic.w	r2, r2, #4
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
      break;
 8006bca:	e064      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fa3e 	bl	8007054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	619a      	str	r2, [r3, #24]
      break;
 8006c0c:	e043      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fa89 	bl	800712c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0208 	orr.w	r2, r2, #8
 8006c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0204 	bic.w	r2, r2, #4
 8006c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69d9      	ldr	r1, [r3, #28]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	61da      	str	r2, [r3, #28]
      break;
 8006c4c:	e023      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fad3 	bl	8007200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	61da      	str	r2, [r3, #28]
      break;
 8006c8e:	e002      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
      break;
 8006c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0b4      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x186>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cfc:	d03e      	beq.n	8006d7c <HAL_TIM_ConfigClockSource+0xd4>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d02:	f200 8087 	bhi.w	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	f000 8086 	beq.w	8006e1a <HAL_TIM_ConfigClockSource+0x172>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	d87f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b70      	cmp	r3, #112	@ 0x70
 8006d16:	d01a      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xa6>
 8006d18:	2b70      	cmp	r3, #112	@ 0x70
 8006d1a:	d87b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b60      	cmp	r3, #96	@ 0x60
 8006d1e:	d050      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d20:	2b60      	cmp	r3, #96	@ 0x60
 8006d22:	d877      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b50      	cmp	r3, #80	@ 0x50
 8006d26:	d03c      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d28:	2b50      	cmp	r3, #80	@ 0x50
 8006d2a:	d873      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b40      	cmp	r3, #64	@ 0x40
 8006d2e:	d058      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d86f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b30      	cmp	r3, #48	@ 0x30
 8006d36:	d064      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d38:	2b30      	cmp	r3, #48	@ 0x30
 8006d3a:	d86b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d060      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d867      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d05c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d05a      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d4c:	e062      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f000 fb19 	bl	8007394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
      break;
 8006d7a:	e04f      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6899      	ldr	r1, [r3, #8]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f000 fb02 	bl	8007394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d9e:	609a      	str	r2, [r3, #8]
      break;
 8006da0:	e03c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fa76 	bl	80072a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2150      	movs	r1, #80	@ 0x50
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 facf 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e02c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 fa95 	bl	80072fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2160      	movs	r1, #96	@ 0x60
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fabf 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 8006de0:	e01c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 fa56 	bl	80072a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2140      	movs	r1, #64	@ 0x40
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 faaf 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 8006e00:	e00c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f000 faa6 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 8006e12:	e003      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e000      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a34      	ldr	r2, [pc, #208]	@ (8006f6c <TIM_Base_SetConfig+0xe4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a31      	ldr	r2, [pc, #196]	@ (8006f70 <TIM_Base_SetConfig+0xe8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a30      	ldr	r2, [pc, #192]	@ (8006f74 <TIM_Base_SetConfig+0xec>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0x38>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a2f      	ldr	r2, [pc, #188]	@ (8006f78 <TIM_Base_SetConfig+0xf0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a25      	ldr	r2, [pc, #148]	@ (8006f6c <TIM_Base_SetConfig+0xe4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01b      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee0:	d017      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	@ (8006f70 <TIM_Base_SetConfig+0xe8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a21      	ldr	r2, [pc, #132]	@ (8006f74 <TIM_Base_SetConfig+0xec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00f      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a20      	ldr	r2, [pc, #128]	@ (8006f78 <TIM_Base_SetConfig+0xf0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <TIM_Base_SetConfig+0xf4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1e      	ldr	r2, [pc, #120]	@ (8006f80 <TIM_Base_SetConfig+0xf8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <TIM_Base_SetConfig+0xfc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a08      	ldr	r2, [pc, #32]	@ (8006f6c <TIM_Base_SetConfig+0xe4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d103      	bne.n	8006f58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	615a      	str	r2, [r3, #20]
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0201 	bic.w	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f023 0302 	bic.w	r3, r3, #2
 8006fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1c      	ldr	r2, [pc, #112]	@ (8007050 <TIM_OC1_SetConfig+0xc8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d10c      	bne.n	8006ffe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f023 0308 	bic.w	r3, r3, #8
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f023 0304 	bic.w	r3, r3, #4
 8006ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a13      	ldr	r2, [pc, #76]	@ (8007050 <TIM_OC1_SetConfig+0xc8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d111      	bne.n	800702a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	40010000 	.word	0x40010000

08007054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f023 0210 	bic.w	r2, r3, #16
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800708a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0320 	bic.w	r3, r3, #32
 800709e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007128 <TIM_OC2_SetConfig+0xd4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10d      	bne.n	80070d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <TIM_OC2_SetConfig+0xd4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d113      	bne.n	8007100 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000

0800712c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1d      	ldr	r2, [pc, #116]	@ (80071fc <TIM_OC3_SetConfig+0xd0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10d      	bne.n	80071a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a14      	ldr	r2, [pc, #80]	@ (80071fc <TIM_OC3_SetConfig+0xd0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d113      	bne.n	80071d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	40010000 	.word	0x40010000

08007200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800724a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	031b      	lsls	r3, r3, #12
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a10      	ldr	r2, [pc, #64]	@ (800729c <TIM_OC4_SetConfig+0x9c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	019b      	lsls	r3, r3, #6
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000

080072a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 030a 	bic.w	r3, r3, #10
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0210 	bic.w	r2, r3, #16
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	031b      	lsls	r3, r3, #12
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800733a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4313      	orrs	r3, r2
 800737c:	f043 0307 	orr.w	r3, r3, #7
 8007380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	021a      	lsls	r2, r3, #8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	609a      	str	r2, [r3, #8]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	2201      	movs	r2, #1
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	43db      	mvns	r3, r3
 80073f6:	401a      	ands	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	fa01 f303 	lsl.w	r3, r1, r3
 800740c:	431a      	orrs	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e050      	b.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007484:	d013      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a13      	ldr	r2, [pc, #76]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d10c      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40014000 	.word	0x40014000

080074fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007514:	2302      	movs	r3, #2
 8007516:	e03d      	b.n	8007594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e03f      	b.n	800765a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb fe58 	bl	80032a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2224      	movs	r2, #36	@ 0x24
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800760a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 ff9b 	bl	8008548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08a      	sub	sp, #40	@ 0x28
 8007666:	af02      	add	r7, sp, #8
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	d17c      	bne.n	800777c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_UART_Transmit+0x2c>
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e075      	b.n	800777e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Transmit+0x3e>
 800769c:	2302      	movs	r3, #2
 800769e:	e06e      	b.n	800777e <HAL_UART_Transmit+0x11c>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2221      	movs	r2, #33	@ 0x21
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b6:	f7fc f87f 	bl	80037b8 <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	88fa      	ldrh	r2, [r7, #6]
 80076c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d0:	d108      	bne.n	80076e4 <HAL_UART_Transmit+0x82>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e003      	b.n	80076ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80076f4:	e02a      	b.n	800774c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2180      	movs	r1, #128	@ 0x80
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fc53 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e036      	b.n	800777e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	3302      	adds	r3, #2
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e007      	b.n	800773e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	3301      	adds	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1cf      	bne.n	80076f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2200      	movs	r2, #0
 800775e:	2140      	movs	r1, #64	@ 0x40
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fc23 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e006      	b.n	800777e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e000      	b.n	800777e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800777c:	2302      	movs	r3, #2
  }
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08c      	sub	sp, #48	@ 0x30
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b20      	cmp	r3, #32
 800779e:	d152      	bne.n	8007846 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e04b      	b.n	8007848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e044      	b.n	8007848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	461a      	mov	r2, r3
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fc58 	bl	8008088 <UART_Start_Receive_DMA>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80077de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d12c      	bne.n	8007840 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d125      	bne.n	800783a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	617b      	str	r3, [r7, #20]
   return(result);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f043 0310 	orr.w	r3, r3, #16
 800781a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007824:	627a      	str	r2, [r7, #36]	@ 0x24
 8007826:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6a39      	ldr	r1, [r7, #32]
 800782a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	61fb      	str	r3, [r7, #28]
   return(result);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007838:	e002      	b.n	8007840 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007844:	e000      	b.n	8007848 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007846:	2302      	movs	r3, #2
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3730      	adds	r7, #48	@ 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b0ba      	sub	sp, #232	@ 0xe8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007876:	2300      	movs	r3, #0
 8007878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800788e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_UART_IRQHandler+0x66>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd8f 	bl	80083d2 <UART_Receive_IT>
      return;
 80078b4:	e256      	b.n	8007d64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80de 	beq.w	8007a7c <HAL_UART_IRQHandler+0x22c>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80d1 	beq.w	8007a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_UART_IRQHandler+0xae>
 80078e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <HAL_UART_IRQHandler+0xd2>
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	f043 0202 	orr.w	r2, r3, #2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <HAL_UART_IRQHandler+0xf6>
 800792e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <HAL_UART_IRQHandler+0x126>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	f043 0208 	orr.w	r2, r3, #8
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 81ed 	beq.w	8007d5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_UART_IRQHandler+0x14e>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fd1a 	bl	80083d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <HAL_UART_IRQHandler+0x17a>
 80079c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d04f      	beq.n	8007a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc22 	bl	8008214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d141      	bne.n	8007a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3314      	adds	r3, #20
 8007a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1d9      	bne.n	80079de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d013      	beq.n	8007a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	4a7d      	ldr	r2, [pc, #500]	@ (8007c2c <HAL_UART_IRQHandler+0x3dc>)
 8007a38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fc fbee 	bl	8004220 <HAL_DMA_Abort_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d016      	beq.n	8007a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00e      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9a4 	bl	8007da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e00a      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9a0 	bl	8007da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a68:	e006      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f99c 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007a76:	e170      	b.n	8007d5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	bf00      	nop
    return;
 8007a7a:	e16e      	b.n	8007d5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	f040 814a 	bne.w	8007d1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8143 	beq.w	8007d1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 813c 	beq.w	8007d1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b40      	cmp	r3, #64	@ 0x40
 8007ac4:	f040 80b4 	bne.w	8007c30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8140 	beq.w	8007d5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	f080 8139 	bcs.w	8007d5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007afe:	f000 8088 	beq.w	8007c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	330c      	adds	r3, #12
 8007b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d9      	bne.n	8007b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3314      	adds	r3, #20
 8007b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e1      	bne.n	8007b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e3      	bne.n	8007b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be2:	f023 0310 	bic.w	r3, r3, #16
 8007be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e3      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc fa97 	bl	8004140 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fa ff1a 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c28:	e099      	b.n	8007d5e <HAL_UART_IRQHandler+0x50e>
 8007c2a:	bf00      	nop
 8007c2c:	080082db 	.word	0x080082db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 808b 	beq.w	8007d62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8086 	beq.w	8007d62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e3      	bne.n	8007c56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3314      	adds	r3, #20
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e3      	bne.n	8007c8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007cf8:	61fa      	str	r2, [r7, #28]
 8007cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	617b      	str	r3, [r7, #20]
   return(result);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e3      	bne.n	8007cd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fa fea2 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d18:	e023      	b.n	8007d62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <HAL_UART_IRQHandler+0x4ea>
 8007d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fae5 	bl	8008302 <UART_Transmit_IT>
    return;
 8007d38:	e014      	b.n	8007d64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <HAL_UART_IRQHandler+0x514>
 8007d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fb25 	bl	80083a2 <UART_EndTransmit_IT>
    return;
 8007d58:	e004      	b.n	8007d64 <HAL_UART_IRQHandler+0x514>
    return;
 8007d5a:	bf00      	nop
 8007d5c:	e002      	b.n	8007d64 <HAL_UART_IRQHandler+0x514>
      return;
 8007d5e:	bf00      	nop
 8007d60:	e000      	b.n	8007d64 <HAL_UART_IRQHandler+0x514>
      return;
 8007d62:	bf00      	nop
  }
}
 8007d64:	37e8      	adds	r7, #232	@ 0xe8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b09c      	sub	sp, #112	@ 0x70
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d172      	bne.n	8007ebe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dda:	2200      	movs	r2, #0
 8007ddc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	330c      	adds	r3, #12
 8007de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dfe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3314      	adds	r3, #20
 8007e30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e32:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e5      	bne.n	8007e12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	623b      	str	r3, [r7, #32]
   return(result);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3314      	adds	r3, #20
 8007e64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e66:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d119      	bne.n	8007ebe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f023 0310 	bic.w	r3, r3, #16
 8007ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007eaa:	61fa      	str	r2, [r7, #28]
 8007eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	69b9      	ldr	r1, [r7, #24]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d106      	bne.n	8007ed4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ece:	f7fa fdc5 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ed2:	e002      	b.n	8007eda <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007ed4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ed6:	f7ff ff53 	bl	8007d80 <HAL_UART_RxCpltCallback>
}
 8007eda:	bf00      	nop
 8007edc:	3770      	adds	r7, #112	@ 0x70
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d108      	bne.n	8007f0a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4619      	mov	r1, r3
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7fa fdaa 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f08:	e002      	b.n	8007f10 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff ff42 	bl	8007d94 <HAL_UART_RxHalfCpltCallback>
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f34:	2b80      	cmp	r3, #128	@ 0x80
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b21      	cmp	r3, #33	@ 0x21
 8007f4a:	d108      	bne.n	8007f5e <UART_DMAError+0x46>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	f000 f933 	bl	80081c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f68:	2b40      	cmp	r3, #64	@ 0x40
 8007f6a:	bf0c      	ite	eq
 8007f6c:	2301      	moveq	r3, #1
 8007f6e:	2300      	movne	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b22      	cmp	r3, #34	@ 0x22
 8007f7e:	d108      	bne.n	8007f92 <UART_DMAError+0x7a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007f8c:	68b8      	ldr	r0, [r7, #8]
 8007f8e:	f000 f941 	bl	8008214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f96:	f043 0210 	orr.w	r2, r3, #16
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9e:	68b8      	ldr	r0, [r7, #8]
 8007fa0:	f7ff ff02 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa4:	bf00      	nop
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b090      	sub	sp, #64	@ 0x40
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fbc:	e050      	b.n	8008060 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d04c      	beq.n	8008060 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8007fcc:	f7fb fbf4 	bl	80037b8 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d241      	bcs.n	8008060 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ffc:	637a      	str	r2, [r7, #52]	@ 0x34
 8007ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e5      	bne.n	8007fdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3314      	adds	r3, #20
 8008016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	613b      	str	r3, [r7, #16]
   return(result);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3314      	adds	r3, #20
 800802e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008030:	623a      	str	r2, [r7, #32]
 8008032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	69f9      	ldr	r1, [r7, #28]
 8008036:	6a3a      	ldr	r2, [r7, #32]
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	61bb      	str	r3, [r7, #24]
   return(result);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e5      	bne.n	8008010 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e00f      	b.n	8008080 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4013      	ands	r3, r2
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	bf0c      	ite	eq
 8008070:	2301      	moveq	r3, #1
 8008072:	2300      	movne	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	429a      	cmp	r2, r3
 800807c:	d09f      	beq.n	8007fbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3740      	adds	r7, #64	@ 0x40
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b098      	sub	sp, #96	@ 0x60
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2222      	movs	r2, #34	@ 0x22
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b4:	4a40      	ldr	r2, [pc, #256]	@ (80081b8 <UART_Start_Receive_DMA+0x130>)
 80080b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	4a3f      	ldr	r2, [pc, #252]	@ (80081bc <UART_Start_Receive_DMA+0x134>)
 80080be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	4a3e      	ldr	r2, [pc, #248]	@ (80081c0 <UART_Start_Receive_DMA+0x138>)
 80080c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	2200      	movs	r2, #0
 80080ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80080d0:	f107 0308 	add.w	r3, r7, #8
 80080d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	f7fb ffd2 	bl	8004090 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80080ec:	2300      	movs	r3, #0
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d019      	beq.n	8008146 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	330c      	adds	r3, #12
 8008130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008132:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3314      	adds	r3, #20
 800814c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	657b      	str	r3, [r7, #84]	@ 0x54
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3314      	adds	r3, #20
 8008164:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008166:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800816c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	617b      	str	r3, [r7, #20]
   return(result);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	653b      	str	r3, [r7, #80]	@ 0x50
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3314      	adds	r3, #20
 8008198:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800819a:	627a      	str	r2, [r7, #36]	@ 0x24
 800819c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6a39      	ldr	r1, [r7, #32]
 80081a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e5      	bne.n	800817a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3760      	adds	r7, #96	@ 0x60
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	08007dbd 	.word	0x08007dbd
 80081bc:	08007ee3 	.word	0x08007ee3
 80081c0:	08007f19 	.word	0x08007f19

080081c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	@ 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	330c      	adds	r3, #12
 80081d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	60bb      	str	r3, [r7, #8]
   return(result);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	61ba      	str	r2, [r7, #24]
 80081ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	613b      	str	r3, [r7, #16]
   return(result);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e5      	bne.n	80081cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008208:	bf00      	nop
 800820a:	3724      	adds	r7, #36	@ 0x24
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b095      	sub	sp, #84	@ 0x54
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800823c:	643a      	str	r2, [r7, #64]	@ 0x40
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e5      	bne.n	800821c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3314      	adds	r3, #20
 800826e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	2b01      	cmp	r3, #1
 800828a:	d119      	bne.n	80082c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	60bb      	str	r3, [r7, #8]
   return(result);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f023 0310 	bic.w	r3, r3, #16
 80082a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082ac:	61ba      	str	r2, [r7, #24]
 80082ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6979      	ldr	r1, [r7, #20]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80082ce:	bf00      	nop
 80082d0:	3754      	adds	r7, #84	@ 0x54
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff fd57 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b21      	cmp	r3, #33	@ 0x21
 8008314:	d13e      	bne.n	8008394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831e:	d114      	bne.n	800834a <UART_Transmit_IT+0x48>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d110      	bne.n	800834a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800833c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	621a      	str	r2, [r3, #32]
 8008348:	e008      	b.n	800835c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	1c59      	adds	r1, r3, #1
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6211      	str	r1, [r2, #32]
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	4619      	mov	r1, r3
 800836a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10f      	bne.n	8008390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800837e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800838e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008394:	2302      	movs	r3, #2
  }
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fcd2 	bl	8007d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b08c      	sub	sp, #48	@ 0x30
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b22      	cmp	r3, #34	@ 0x22
 80083e4:	f040 80ab 	bne.w	800853e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f0:	d117      	bne.n	8008422 <UART_Receive_IT+0x50>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d113      	bne.n	8008422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008410:	b29a      	uxth	r2, r3
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841a:	1c9a      	adds	r2, r3, #2
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008420:	e026      	b.n	8008470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008434:	d007      	beq.n	8008446 <UART_Receive_IT+0x74>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <UART_Receive_IT+0x82>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d106      	bne.n	8008454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	b2da      	uxtb	r2, r3
 800844e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e008      	b.n	8008466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008460:	b2da      	uxtb	r2, r3
 8008462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29b      	uxth	r3, r3
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	4619      	mov	r1, r3
 800847e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008480:	2b00      	cmp	r3, #0
 8008482:	d15a      	bne.n	800853a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0220 	bic.w	r2, r2, #32
 8008492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695a      	ldr	r2, [r3, #20]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0201 	bic.w	r2, r2, #1
 80084b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d135      	bne.n	8008530 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	613b      	str	r3, [r7, #16]
   return(result);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f023 0310 	bic.w	r3, r3, #16
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	330c      	adds	r3, #12
 80084e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ea:	623a      	str	r2, [r7, #32]
 80084ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69f9      	ldr	r1, [r7, #28]
 80084f0:	6a3a      	ldr	r2, [r7, #32]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b10      	cmp	r3, #16
 800850a:	d10a      	bne.n	8008522 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fa fa97 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
 800852e:	e002      	b.n	8008536 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff fc25 	bl	8007d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e002      	b.n	8008540 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	e000      	b.n	8008540 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800853e:	2302      	movs	r3, #2
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3730      	adds	r7, #48	@ 0x30
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800854c:	b0c0      	sub	sp, #256	@ 0x100
 800854e:	af00      	add	r7, sp, #0
 8008550:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	68d9      	ldr	r1, [r3, #12]
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	ea40 0301 	orr.w	r3, r0, r1
 8008570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	431a      	orrs	r2, r3
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	431a      	orrs	r2, r3
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80085a0:	f021 010c 	bic.w	r1, r1, #12
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80085ae:	430b      	orrs	r3, r1
 80085b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80085be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c2:	6999      	ldr	r1, [r3, #24]
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	ea40 0301 	orr.w	r3, r0, r1
 80085ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b8f      	ldr	r3, [pc, #572]	@ (8008814 <UART_SetConfig+0x2cc>)
 80085d8:	429a      	cmp	r2, r3
 80085da:	d005      	beq.n	80085e8 <UART_SetConfig+0xa0>
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008818 <UART_SetConfig+0x2d0>)
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d104      	bne.n	80085f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085e8:	f7fd fe90 	bl	800630c <HAL_RCC_GetPCLK2Freq>
 80085ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085f0:	e003      	b.n	80085fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085f2:	f7fd fe77 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 80085f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008604:	f040 810c 	bne.w	8008820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800860c:	2200      	movs	r2, #0
 800860e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008612:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800861a:	4622      	mov	r2, r4
 800861c:	462b      	mov	r3, r5
 800861e:	1891      	adds	r1, r2, r2
 8008620:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008622:	415b      	adcs	r3, r3
 8008624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800862a:	4621      	mov	r1, r4
 800862c:	eb12 0801 	adds.w	r8, r2, r1
 8008630:	4629      	mov	r1, r5
 8008632:	eb43 0901 	adc.w	r9, r3, r1
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800864a:	4690      	mov	r8, r2
 800864c:	4699      	mov	r9, r3
 800864e:	4623      	mov	r3, r4
 8008650:	eb18 0303 	adds.w	r3, r8, r3
 8008654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008658:	462b      	mov	r3, r5
 800865a:	eb49 0303 	adc.w	r3, r9, r3
 800865e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800866e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008676:	460b      	mov	r3, r1
 8008678:	18db      	adds	r3, r3, r3
 800867a:	653b      	str	r3, [r7, #80]	@ 0x50
 800867c:	4613      	mov	r3, r2
 800867e:	eb42 0303 	adc.w	r3, r2, r3
 8008682:	657b      	str	r3, [r7, #84]	@ 0x54
 8008684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800868c:	f7f8 fb04 	bl	8000c98 <__aeabi_uldivmod>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4b61      	ldr	r3, [pc, #388]	@ (800881c <UART_SetConfig+0x2d4>)
 8008696:	fba3 2302 	umull	r2, r3, r3, r2
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	011c      	lsls	r4, r3, #4
 800869e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80086ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80086b0:	4642      	mov	r2, r8
 80086b2:	464b      	mov	r3, r9
 80086b4:	1891      	adds	r1, r2, r2
 80086b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80086b8:	415b      	adcs	r3, r3
 80086ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80086c0:	4641      	mov	r1, r8
 80086c2:	eb12 0a01 	adds.w	sl, r2, r1
 80086c6:	4649      	mov	r1, r9
 80086c8:	eb43 0b01 	adc.w	fp, r3, r1
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086e0:	4692      	mov	sl, r2
 80086e2:	469b      	mov	fp, r3
 80086e4:	4643      	mov	r3, r8
 80086e6:	eb1a 0303 	adds.w	r3, sl, r3
 80086ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ee:	464b      	mov	r3, r9
 80086f0:	eb4b 0303 	adc.w	r3, fp, r3
 80086f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008704:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800870c:	460b      	mov	r3, r1
 800870e:	18db      	adds	r3, r3, r3
 8008710:	643b      	str	r3, [r7, #64]	@ 0x40
 8008712:	4613      	mov	r3, r2
 8008714:	eb42 0303 	adc.w	r3, r2, r3
 8008718:	647b      	str	r3, [r7, #68]	@ 0x44
 800871a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800871e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008722:	f7f8 fab9 	bl	8000c98 <__aeabi_uldivmod>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4611      	mov	r1, r2
 800872c:	4b3b      	ldr	r3, [pc, #236]	@ (800881c <UART_SetConfig+0x2d4>)
 800872e:	fba3 2301 	umull	r2, r3, r3, r1
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	2264      	movs	r2, #100	@ 0x64
 8008736:	fb02 f303 	mul.w	r3, r2, r3
 800873a:	1acb      	subs	r3, r1, r3
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008742:	4b36      	ldr	r3, [pc, #216]	@ (800881c <UART_SetConfig+0x2d4>)
 8008744:	fba3 2302 	umull	r2, r3, r3, r2
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008750:	441c      	add	r4, r3
 8008752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008756:	2200      	movs	r2, #0
 8008758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800875c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	1891      	adds	r1, r2, r2
 800876a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800876c:	415b      	adcs	r3, r3
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008774:	4641      	mov	r1, r8
 8008776:	1851      	adds	r1, r2, r1
 8008778:	6339      	str	r1, [r7, #48]	@ 0x30
 800877a:	4649      	mov	r1, r9
 800877c:	414b      	adcs	r3, r1
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800878c:	4659      	mov	r1, fp
 800878e:	00cb      	lsls	r3, r1, #3
 8008790:	4651      	mov	r1, sl
 8008792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008796:	4651      	mov	r1, sl
 8008798:	00ca      	lsls	r2, r1, #3
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	4642      	mov	r2, r8
 80087a2:	189b      	adds	r3, r3, r2
 80087a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087a8:	464b      	mov	r3, r9
 80087aa:	460a      	mov	r2, r1
 80087ac:	eb42 0303 	adc.w	r3, r2, r3
 80087b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80087c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087c8:	460b      	mov	r3, r1
 80087ca:	18db      	adds	r3, r3, r3
 80087cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087ce:	4613      	mov	r3, r2
 80087d0:	eb42 0303 	adc.w	r3, r2, r3
 80087d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80087da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80087de:	f7f8 fa5b 	bl	8000c98 <__aeabi_uldivmod>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4b0d      	ldr	r3, [pc, #52]	@ (800881c <UART_SetConfig+0x2d4>)
 80087e8:	fba3 1302 	umull	r1, r3, r3, r2
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	2164      	movs	r1, #100	@ 0x64
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	3332      	adds	r3, #50	@ 0x32
 80087fa:	4a08      	ldr	r2, [pc, #32]	@ (800881c <UART_SetConfig+0x2d4>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f003 0207 	and.w	r2, r3, #7
 8008806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4422      	add	r2, r4
 800880e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008810:	e106      	b.n	8008a20 <UART_SetConfig+0x4d8>
 8008812:	bf00      	nop
 8008814:	40011000 	.word	0x40011000
 8008818:	40011400 	.word	0x40011400
 800881c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008824:	2200      	movs	r2, #0
 8008826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800882a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800882e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008832:	4642      	mov	r2, r8
 8008834:	464b      	mov	r3, r9
 8008836:	1891      	adds	r1, r2, r2
 8008838:	6239      	str	r1, [r7, #32]
 800883a:	415b      	adcs	r3, r3
 800883c:	627b      	str	r3, [r7, #36]	@ 0x24
 800883e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008842:	4641      	mov	r1, r8
 8008844:	1854      	adds	r4, r2, r1
 8008846:	4649      	mov	r1, r9
 8008848:	eb43 0501 	adc.w	r5, r3, r1
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	00eb      	lsls	r3, r5, #3
 8008856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800885a:	00e2      	lsls	r2, r4, #3
 800885c:	4614      	mov	r4, r2
 800885e:	461d      	mov	r5, r3
 8008860:	4643      	mov	r3, r8
 8008862:	18e3      	adds	r3, r4, r3
 8008864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008868:	464b      	mov	r3, r9
 800886a:	eb45 0303 	adc.w	r3, r5, r3
 800886e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800887e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008882:	f04f 0200 	mov.w	r2, #0
 8008886:	f04f 0300 	mov.w	r3, #0
 800888a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800888e:	4629      	mov	r1, r5
 8008890:	008b      	lsls	r3, r1, #2
 8008892:	4621      	mov	r1, r4
 8008894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008898:	4621      	mov	r1, r4
 800889a:	008a      	lsls	r2, r1, #2
 800889c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80088a0:	f7f8 f9fa 	bl	8000c98 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4b60      	ldr	r3, [pc, #384]	@ (8008a2c <UART_SetConfig+0x4e4>)
 80088aa:	fba3 2302 	umull	r2, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	011c      	lsls	r4, r3, #4
 80088b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80088c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	1891      	adds	r1, r2, r2
 80088ca:	61b9      	str	r1, [r7, #24]
 80088cc:	415b      	adcs	r3, r3
 80088ce:	61fb      	str	r3, [r7, #28]
 80088d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088d4:	4641      	mov	r1, r8
 80088d6:	1851      	adds	r1, r2, r1
 80088d8:	6139      	str	r1, [r7, #16]
 80088da:	4649      	mov	r1, r9
 80088dc:	414b      	adcs	r3, r1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088ec:	4659      	mov	r1, fp
 80088ee:	00cb      	lsls	r3, r1, #3
 80088f0:	4651      	mov	r1, sl
 80088f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088f6:	4651      	mov	r1, sl
 80088f8:	00ca      	lsls	r2, r1, #3
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	4603      	mov	r3, r0
 8008900:	4642      	mov	r2, r8
 8008902:	189b      	adds	r3, r3, r2
 8008904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008908:	464b      	mov	r3, r9
 800890a:	460a      	mov	r2, r1
 800890c:	eb42 0303 	adc.w	r3, r2, r3
 8008910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800891e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800892c:	4649      	mov	r1, r9
 800892e:	008b      	lsls	r3, r1, #2
 8008930:	4641      	mov	r1, r8
 8008932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008936:	4641      	mov	r1, r8
 8008938:	008a      	lsls	r2, r1, #2
 800893a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800893e:	f7f8 f9ab 	bl	8000c98 <__aeabi_uldivmod>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4611      	mov	r1, r2
 8008948:	4b38      	ldr	r3, [pc, #224]	@ (8008a2c <UART_SetConfig+0x4e4>)
 800894a:	fba3 2301 	umull	r2, r3, r3, r1
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	2264      	movs	r2, #100	@ 0x64
 8008952:	fb02 f303 	mul.w	r3, r2, r3
 8008956:	1acb      	subs	r3, r1, r3
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	3332      	adds	r3, #50	@ 0x32
 800895c:	4a33      	ldr	r2, [pc, #204]	@ (8008a2c <UART_SetConfig+0x4e4>)
 800895e:	fba2 2303 	umull	r2, r3, r2, r3
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008968:	441c      	add	r4, r3
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896e:	2200      	movs	r2, #0
 8008970:	673b      	str	r3, [r7, #112]	@ 0x70
 8008972:	677a      	str	r2, [r7, #116]	@ 0x74
 8008974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	415b      	adcs	r3, r3
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008988:	4641      	mov	r1, r8
 800898a:	1851      	adds	r1, r2, r1
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	4649      	mov	r1, r9
 8008990:	414b      	adcs	r3, r1
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80089a0:	4659      	mov	r1, fp
 80089a2:	00cb      	lsls	r3, r1, #3
 80089a4:	4651      	mov	r1, sl
 80089a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089aa:	4651      	mov	r1, sl
 80089ac:	00ca      	lsls	r2, r1, #3
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	4642      	mov	r2, r8
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089ba:	464b      	mov	r3, r9
 80089bc:	460a      	mov	r2, r1
 80089be:	eb42 0303 	adc.w	r3, r2, r3
 80089c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80089dc:	4649      	mov	r1, r9
 80089de:	008b      	lsls	r3, r1, #2
 80089e0:	4641      	mov	r1, r8
 80089e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089e6:	4641      	mov	r1, r8
 80089e8:	008a      	lsls	r2, r1, #2
 80089ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089ee:	f7f8 f953 	bl	8000c98 <__aeabi_uldivmod>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <UART_SetConfig+0x4e4>)
 80089f8:	fba3 1302 	umull	r1, r3, r3, r2
 80089fc:	095b      	lsrs	r3, r3, #5
 80089fe:	2164      	movs	r1, #100	@ 0x64
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	3332      	adds	r3, #50	@ 0x32
 8008a0a:	4a08      	ldr	r2, [pc, #32]	@ (8008a2c <UART_SetConfig+0x4e4>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	f003 020f 	and.w	r2, r3, #15
 8008a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4422      	add	r2, r4
 8008a1e:	609a      	str	r2, [r3, #8]
}
 8008a20:	bf00      	nop
 8008a22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008a26:	46bd      	mov	sp, r7
 8008a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a2c:	51eb851f 	.word	0x51eb851f

08008a30 <malloc>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <malloc+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f000 b82d 	b.w	8008a94 <_malloc_r>
 8008a3a:	bf00      	nop
 8008a3c:	20000198 	.word	0x20000198

08008a40 <free>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	@ (8008a4c <free+0xc>)
 8008a42:	4601      	mov	r1, r0
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f002 bf53 	b.w	800b8f0 <_free_r>
 8008a4a:	bf00      	nop
 8008a4c:	20000198 	.word	0x20000198

08008a50 <sbrk_aligned>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4e0f      	ldr	r6, [pc, #60]	@ (8008a90 <sbrk_aligned+0x40>)
 8008a54:	460c      	mov	r4, r1
 8008a56:	6831      	ldr	r1, [r6, #0]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	b911      	cbnz	r1, 8008a62 <sbrk_aligned+0x12>
 8008a5c:	f002 f872 	bl	800ab44 <_sbrk_r>
 8008a60:	6030      	str	r0, [r6, #0]
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	f002 f86d 	bl	800ab44 <_sbrk_r>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d103      	bne.n	8008a76 <sbrk_aligned+0x26>
 8008a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a72:	4620      	mov	r0, r4
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	1cc4      	adds	r4, r0, #3
 8008a78:	f024 0403 	bic.w	r4, r4, #3
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d0f8      	beq.n	8008a72 <sbrk_aligned+0x22>
 8008a80:	1a21      	subs	r1, r4, r0
 8008a82:	4628      	mov	r0, r5
 8008a84:	f002 f85e 	bl	800ab44 <_sbrk_r>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d1f2      	bne.n	8008a72 <sbrk_aligned+0x22>
 8008a8c:	e7ef      	b.n	8008a6e <sbrk_aligned+0x1e>
 8008a8e:	bf00      	nop
 8008a90:	20000698 	.word	0x20000698

08008a94 <_malloc_r>:
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a98:	1ccd      	adds	r5, r1, #3
 8008a9a:	f025 0503 	bic.w	r5, r5, #3
 8008a9e:	3508      	adds	r5, #8
 8008aa0:	2d0c      	cmp	r5, #12
 8008aa2:	bf38      	it	cc
 8008aa4:	250c      	movcc	r5, #12
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	db01      	blt.n	8008ab0 <_malloc_r+0x1c>
 8008aac:	42a9      	cmp	r1, r5
 8008aae:	d904      	bls.n	8008aba <_malloc_r+0x26>
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b90 <_malloc_r+0xfc>
 8008abe:	f000 f869 	bl	8008b94 <__malloc_lock>
 8008ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	bb44      	cbnz	r4, 8008b1c <_malloc_r+0x88>
 8008aca:	4629      	mov	r1, r5
 8008acc:	4630      	mov	r0, r6
 8008ace:	f7ff ffbf 	bl	8008a50 <sbrk_aligned>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	d158      	bne.n	8008b8a <_malloc_r+0xf6>
 8008ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8008adc:	4627      	mov	r7, r4
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d143      	bne.n	8008b6a <_malloc_r+0xd6>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	d04b      	beq.n	8008b7e <_malloc_r+0xea>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4630      	mov	r0, r6
 8008aec:	eb04 0903 	add.w	r9, r4, r3
 8008af0:	f002 f828 	bl	800ab44 <_sbrk_r>
 8008af4:	4581      	cmp	r9, r0
 8008af6:	d142      	bne.n	8008b7e <_malloc_r+0xea>
 8008af8:	6821      	ldr	r1, [r4, #0]
 8008afa:	1a6d      	subs	r5, r5, r1
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffa6 	bl	8008a50 <sbrk_aligned>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d03a      	beq.n	8008b7e <_malloc_r+0xea>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	442b      	add	r3, r5
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	bb62      	cbnz	r2, 8008b70 <_malloc_r+0xdc>
 8008b16:	f8c8 7000 	str.w	r7, [r8]
 8008b1a:	e00f      	b.n	8008b3c <_malloc_r+0xa8>
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	1b52      	subs	r2, r2, r5
 8008b20:	d420      	bmi.n	8008b64 <_malloc_r+0xd0>
 8008b22:	2a0b      	cmp	r2, #11
 8008b24:	d917      	bls.n	8008b56 <_malloc_r+0xc2>
 8008b26:	1961      	adds	r1, r4, r5
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	6025      	str	r5, [r4, #0]
 8008b2c:	bf18      	it	ne
 8008b2e:	6059      	strne	r1, [r3, #4]
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	bf08      	it	eq
 8008b34:	f8c8 1000 	streq.w	r1, [r8]
 8008b38:	5162      	str	r2, [r4, r5]
 8008b3a:	604b      	str	r3, [r1, #4]
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f000 f82f 	bl	8008ba0 <__malloc_unlock>
 8008b42:	f104 000b 	add.w	r0, r4, #11
 8008b46:	1d23      	adds	r3, r4, #4
 8008b48:	f020 0007 	bic.w	r0, r0, #7
 8008b4c:	1ac2      	subs	r2, r0, r3
 8008b4e:	bf1c      	itt	ne
 8008b50:	1a1b      	subne	r3, r3, r0
 8008b52:	50a3      	strne	r3, [r4, r2]
 8008b54:	e7af      	b.n	8008ab6 <_malloc_r+0x22>
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	bf0c      	ite	eq
 8008b5c:	f8c8 2000 	streq.w	r2, [r8]
 8008b60:	605a      	strne	r2, [r3, #4]
 8008b62:	e7eb      	b.n	8008b3c <_malloc_r+0xa8>
 8008b64:	4623      	mov	r3, r4
 8008b66:	6864      	ldr	r4, [r4, #4]
 8008b68:	e7ae      	b.n	8008ac8 <_malloc_r+0x34>
 8008b6a:	463c      	mov	r4, r7
 8008b6c:	687f      	ldr	r7, [r7, #4]
 8008b6e:	e7b6      	b.n	8008ade <_malloc_r+0x4a>
 8008b70:	461a      	mov	r2, r3
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	d1fb      	bne.n	8008b70 <_malloc_r+0xdc>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6053      	str	r3, [r2, #4]
 8008b7c:	e7de      	b.n	8008b3c <_malloc_r+0xa8>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f80c 	bl	8008ba0 <__malloc_unlock>
 8008b88:	e794      	b.n	8008ab4 <_malloc_r+0x20>
 8008b8a:	6005      	str	r5, [r0, #0]
 8008b8c:	e7d6      	b.n	8008b3c <_malloc_r+0xa8>
 8008b8e:	bf00      	nop
 8008b90:	2000069c 	.word	0x2000069c

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__malloc_lock+0x8>)
 8008b96:	f002 b822 	b.w	800abde <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	200007e0 	.word	0x200007e0

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f002 b81d 	b.w	800abe0 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200007e0 	.word	0x200007e0

08008bac <sulp>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	ec45 4b10 	vmov	d0, r4, r5
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	f003 fda4 	bl	800c704 <__ulp>
 8008bbc:	ec51 0b10 	vmov	r0, r1, d0
 8008bc0:	b17e      	cbz	r6, 8008be2 <sulp+0x36>
 8008bc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd09      	ble.n	8008be2 <sulp+0x36>
 8008bce:	051b      	lsls	r3, r3, #20
 8008bd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f7f7 fd13 	bl	8000608 <__aeabi_dmul>
 8008be2:	ec41 0b10 	vmov	d0, r0, r1
 8008be6:	bd70      	pop	{r4, r5, r6, pc}

08008be8 <_strtod_l>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	b09f      	sub	sp, #124	@ 0x7c
 8008bee:	460c      	mov	r4, r1
 8008bf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bf6:	9005      	str	r0, [sp, #20]
 8008bf8:	f04f 0a00 	mov.w	sl, #0
 8008bfc:	f04f 0b00 	mov.w	fp, #0
 8008c00:	460a      	mov	r2, r1
 8008c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c04:	7811      	ldrb	r1, [r2, #0]
 8008c06:	292b      	cmp	r1, #43	@ 0x2b
 8008c08:	d04a      	beq.n	8008ca0 <_strtod_l+0xb8>
 8008c0a:	d838      	bhi.n	8008c7e <_strtod_l+0x96>
 8008c0c:	290d      	cmp	r1, #13
 8008c0e:	d832      	bhi.n	8008c76 <_strtod_l+0x8e>
 8008c10:	2908      	cmp	r1, #8
 8008c12:	d832      	bhi.n	8008c7a <_strtod_l+0x92>
 8008c14:	2900      	cmp	r1, #0
 8008c16:	d03b      	beq.n	8008c90 <_strtod_l+0xa8>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c1e:	782a      	ldrb	r2, [r5, #0]
 8008c20:	2a30      	cmp	r2, #48	@ 0x30
 8008c22:	f040 80b3 	bne.w	8008d8c <_strtod_l+0x1a4>
 8008c26:	786a      	ldrb	r2, [r5, #1]
 8008c28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c2c:	2a58      	cmp	r2, #88	@ 0x58
 8008c2e:	d16e      	bne.n	8008d0e <_strtod_l+0x126>
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4a8e      	ldr	r2, [pc, #568]	@ (8008e74 <_strtod_l+0x28c>)
 8008c3c:	9805      	ldr	r0, [sp, #20]
 8008c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c40:	a919      	add	r1, sp, #100	@ 0x64
 8008c42:	f002 ff07 	bl	800ba54 <__gethex>
 8008c46:	f010 060f 	ands.w	r6, r0, #15
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d005      	beq.n	8008c5a <_strtod_l+0x72>
 8008c4e:	2e06      	cmp	r6, #6
 8008c50:	d128      	bne.n	8008ca4 <_strtod_l+0xbc>
 8008c52:	3501      	adds	r5, #1
 8008c54:	2300      	movs	r3, #0
 8008c56:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 858e 	bne.w	800977e <_strtod_l+0xb96>
 8008c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c64:	b1cb      	cbz	r3, 8008c9a <_strtod_l+0xb2>
 8008c66:	4652      	mov	r2, sl
 8008c68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c6c:	ec43 2b10 	vmov	d0, r2, r3
 8008c70:	b01f      	add	sp, #124	@ 0x7c
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	2920      	cmp	r1, #32
 8008c78:	d1ce      	bne.n	8008c18 <_strtod_l+0x30>
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	e7c1      	b.n	8008c02 <_strtod_l+0x1a>
 8008c7e:	292d      	cmp	r1, #45	@ 0x2d
 8008c80:	d1ca      	bne.n	8008c18 <_strtod_l+0x30>
 8008c82:	2101      	movs	r1, #1
 8008c84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c86:	1c51      	adds	r1, r2, #1
 8008c88:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c8a:	7852      	ldrb	r2, [r2, #1]
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	d1c5      	bne.n	8008c1c <_strtod_l+0x34>
 8008c90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c92:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 8570 	bne.w	800977a <_strtod_l+0xb92>
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	e7e5      	b.n	8008c6c <_strtod_l+0x84>
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	e7ef      	b.n	8008c84 <_strtod_l+0x9c>
 8008ca4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ca6:	b13a      	cbz	r2, 8008cb8 <_strtod_l+0xd0>
 8008ca8:	2135      	movs	r1, #53	@ 0x35
 8008caa:	a81c      	add	r0, sp, #112	@ 0x70
 8008cac:	f003 fe24 	bl	800c8f8 <__copybits>
 8008cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cb2:	9805      	ldr	r0, [sp, #20]
 8008cb4:	f003 f9f2 	bl	800c09c <_Bfree>
 8008cb8:	3e01      	subs	r6, #1
 8008cba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cbc:	2e04      	cmp	r6, #4
 8008cbe:	d806      	bhi.n	8008cce <_strtod_l+0xe6>
 8008cc0:	e8df f006 	tbb	[pc, r6]
 8008cc4:	201d0314 	.word	0x201d0314
 8008cc8:	14          	.byte	0x14
 8008cc9:	00          	.byte	0x00
 8008cca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cce:	05e1      	lsls	r1, r4, #23
 8008cd0:	bf48      	it	mi
 8008cd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cda:	0d1b      	lsrs	r3, r3, #20
 8008cdc:	051b      	lsls	r3, r3, #20
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1bb      	bne.n	8008c5a <_strtod_l+0x72>
 8008ce2:	f001 ff51 	bl	800ab88 <__errno>
 8008ce6:	2322      	movs	r3, #34	@ 0x22
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	e7b6      	b.n	8008c5a <_strtod_l+0x72>
 8008cec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008cf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cfc:	e7e7      	b.n	8008cce <_strtod_l+0xe6>
 8008cfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008e7c <_strtod_l+0x294>
 8008d02:	e7e4      	b.n	8008cce <_strtod_l+0xe6>
 8008d04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d08:	f04f 3aff 	mov.w	sl, #4294967295
 8008d0c:	e7df      	b.n	8008cce <_strtod_l+0xe6>
 8008d0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d14:	785b      	ldrb	r3, [r3, #1]
 8008d16:	2b30      	cmp	r3, #48	@ 0x30
 8008d18:	d0f9      	beq.n	8008d0e <_strtod_l+0x126>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d09d      	beq.n	8008c5a <_strtod_l+0x72>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d26:	2300      	movs	r3, #0
 8008d28:	9308      	str	r3, [sp, #32]
 8008d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d2c:	461f      	mov	r7, r3
 8008d2e:	220a      	movs	r2, #10
 8008d30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d32:	7805      	ldrb	r5, [r0, #0]
 8008d34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d38:	b2d9      	uxtb	r1, r3
 8008d3a:	2909      	cmp	r1, #9
 8008d3c:	d928      	bls.n	8008d90 <_strtod_l+0x1a8>
 8008d3e:	494e      	ldr	r1, [pc, #312]	@ (8008e78 <_strtod_l+0x290>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	f001 fe58 	bl	800a9f6 <strncmp>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d032      	beq.n	8008db0 <_strtod_l+0x1c8>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4681      	mov	r9, r0
 8008d50:	463d      	mov	r5, r7
 8008d52:	4603      	mov	r3, r0
 8008d54:	2a65      	cmp	r2, #101	@ 0x65
 8008d56:	d001      	beq.n	8008d5c <_strtod_l+0x174>
 8008d58:	2a45      	cmp	r2, #69	@ 0x45
 8008d5a:	d114      	bne.n	8008d86 <_strtod_l+0x19e>
 8008d5c:	b91d      	cbnz	r5, 8008d66 <_strtod_l+0x17e>
 8008d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d60:	4302      	orrs	r2, r0
 8008d62:	d095      	beq.n	8008c90 <_strtod_l+0xa8>
 8008d64:	2500      	movs	r5, #0
 8008d66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d68:	1c62      	adds	r2, r4, #1
 8008d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d6c:	7862      	ldrb	r2, [r4, #1]
 8008d6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d70:	d077      	beq.n	8008e62 <_strtod_l+0x27a>
 8008d72:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d74:	d07b      	beq.n	8008e6e <_strtod_l+0x286>
 8008d76:	f04f 0c00 	mov.w	ip, #0
 8008d7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d7e:	2909      	cmp	r1, #9
 8008d80:	f240 8082 	bls.w	8008e88 <_strtod_l+0x2a0>
 8008d84:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	e0a2      	b.n	8008ed2 <_strtod_l+0x2ea>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e7c7      	b.n	8008d20 <_strtod_l+0x138>
 8008d90:	2f08      	cmp	r7, #8
 8008d92:	bfd5      	itete	le
 8008d94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008d96:	9908      	ldrgt	r1, [sp, #32]
 8008d98:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008da0:	f100 0001 	add.w	r0, r0, #1
 8008da4:	bfd4      	ite	le
 8008da6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008da8:	9308      	strgt	r3, [sp, #32]
 8008daa:	3701      	adds	r7, #1
 8008dac:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dae:	e7bf      	b.n	8008d30 <_strtod_l+0x148>
 8008db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008db6:	785a      	ldrb	r2, [r3, #1]
 8008db8:	b37f      	cbz	r7, 8008e1a <_strtod_l+0x232>
 8008dba:	4681      	mov	r9, r0
 8008dbc:	463d      	mov	r5, r7
 8008dbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d912      	bls.n	8008dec <_strtod_l+0x204>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e7c4      	b.n	8008d54 <_strtod_l+0x16c>
 8008dca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dd0:	785a      	ldrb	r2, [r3, #1]
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	2a30      	cmp	r2, #48	@ 0x30
 8008dd6:	d0f8      	beq.n	8008dca <_strtod_l+0x1e2>
 8008dd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	f200 84d3 	bhi.w	8009788 <_strtod_l+0xba0>
 8008de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008de4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008de6:	4681      	mov	r9, r0
 8008de8:	2000      	movs	r0, #0
 8008dea:	4605      	mov	r5, r0
 8008dec:	3a30      	subs	r2, #48	@ 0x30
 8008dee:	f100 0301 	add.w	r3, r0, #1
 8008df2:	d02a      	beq.n	8008e4a <_strtod_l+0x262>
 8008df4:	4499      	add	r9, r3
 8008df6:	eb00 0c05 	add.w	ip, r0, r5
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	210a      	movs	r1, #10
 8008dfe:	4563      	cmp	r3, ip
 8008e00:	d10d      	bne.n	8008e1e <_strtod_l+0x236>
 8008e02:	1c69      	adds	r1, r5, #1
 8008e04:	4401      	add	r1, r0
 8008e06:	4428      	add	r0, r5
 8008e08:	2808      	cmp	r0, #8
 8008e0a:	dc16      	bgt.n	8008e3a <_strtod_l+0x252>
 8008e0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e0e:	230a      	movs	r3, #10
 8008e10:	fb03 2300 	mla	r3, r3, r0, r2
 8008e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e16:	2300      	movs	r3, #0
 8008e18:	e018      	b.n	8008e4c <_strtod_l+0x264>
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	e7da      	b.n	8008dd4 <_strtod_l+0x1ec>
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	f103 0301 	add.w	r3, r3, #1
 8008e24:	dc03      	bgt.n	8008e2e <_strtod_l+0x246>
 8008e26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e28:	434e      	muls	r6, r1
 8008e2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e2c:	e7e7      	b.n	8008dfe <_strtod_l+0x216>
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	bfde      	ittt	le
 8008e32:	9e08      	ldrle	r6, [sp, #32]
 8008e34:	434e      	mulle	r6, r1
 8008e36:	9608      	strle	r6, [sp, #32]
 8008e38:	e7e1      	b.n	8008dfe <_strtod_l+0x216>
 8008e3a:	280f      	cmp	r0, #15
 8008e3c:	dceb      	bgt.n	8008e16 <_strtod_l+0x22e>
 8008e3e:	9808      	ldr	r0, [sp, #32]
 8008e40:	230a      	movs	r3, #10
 8008e42:	fb03 2300 	mla	r3, r3, r0, r2
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	e7e5      	b.n	8008e16 <_strtod_l+0x22e>
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e4e:	1c50      	adds	r0, r2, #1
 8008e50:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e52:	7852      	ldrb	r2, [r2, #1]
 8008e54:	4618      	mov	r0, r3
 8008e56:	460d      	mov	r5, r1
 8008e58:	e7b1      	b.n	8008dbe <_strtod_l+0x1d6>
 8008e5a:	f04f 0900 	mov.w	r9, #0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e77d      	b.n	8008d5e <_strtod_l+0x176>
 8008e62:	f04f 0c00 	mov.w	ip, #0
 8008e66:	1ca2      	adds	r2, r4, #2
 8008e68:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e6a:	78a2      	ldrb	r2, [r4, #2]
 8008e6c:	e785      	b.n	8008d7a <_strtod_l+0x192>
 8008e6e:	f04f 0c01 	mov.w	ip, #1
 8008e72:	e7f8      	b.n	8008e66 <_strtod_l+0x27e>
 8008e74:	0800d710 	.word	0x0800d710
 8008e78:	0800d6f8 	.word	0x0800d6f8
 8008e7c:	7ff00000 	.word	0x7ff00000
 8008e80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e82:	1c51      	adds	r1, r2, #1
 8008e84:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e86:	7852      	ldrb	r2, [r2, #1]
 8008e88:	2a30      	cmp	r2, #48	@ 0x30
 8008e8a:	d0f9      	beq.n	8008e80 <_strtod_l+0x298>
 8008e8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e90:	2908      	cmp	r1, #8
 8008e92:	f63f af78 	bhi.w	8008d86 <_strtod_l+0x19e>
 8008e96:	3a30      	subs	r2, #48	@ 0x30
 8008e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e9e:	f04f 080a 	mov.w	r8, #10
 8008ea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ea4:	1c56      	adds	r6, r2, #1
 8008ea6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ea8:	7852      	ldrb	r2, [r2, #1]
 8008eaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008eae:	f1be 0f09 	cmp.w	lr, #9
 8008eb2:	d939      	bls.n	8008f28 <_strtod_l+0x340>
 8008eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008eb6:	1a76      	subs	r6, r6, r1
 8008eb8:	2e08      	cmp	r6, #8
 8008eba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ebe:	dc03      	bgt.n	8008ec8 <_strtod_l+0x2e0>
 8008ec0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ec2:	4588      	cmp	r8, r1
 8008ec4:	bfa8      	it	ge
 8008ec6:	4688      	movge	r8, r1
 8008ec8:	f1bc 0f00 	cmp.w	ip, #0
 8008ecc:	d001      	beq.n	8008ed2 <_strtod_l+0x2ea>
 8008ece:	f1c8 0800 	rsb	r8, r8, #0
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	d14e      	bne.n	8008f74 <_strtod_l+0x38c>
 8008ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed8:	4308      	orrs	r0, r1
 8008eda:	f47f aebe 	bne.w	8008c5a <_strtod_l+0x72>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f47f aed6 	bne.w	8008c90 <_strtod_l+0xa8>
 8008ee4:	2a69      	cmp	r2, #105	@ 0x69
 8008ee6:	d028      	beq.n	8008f3a <_strtod_l+0x352>
 8008ee8:	dc25      	bgt.n	8008f36 <_strtod_l+0x34e>
 8008eea:	2a49      	cmp	r2, #73	@ 0x49
 8008eec:	d025      	beq.n	8008f3a <_strtod_l+0x352>
 8008eee:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ef0:	f47f aece 	bne.w	8008c90 <_strtod_l+0xa8>
 8008ef4:	499b      	ldr	r1, [pc, #620]	@ (8009164 <_strtod_l+0x57c>)
 8008ef6:	a819      	add	r0, sp, #100	@ 0x64
 8008ef8:	f002 ffce 	bl	800be98 <__match>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f43f aec7 	beq.w	8008c90 <_strtod_l+0xa8>
 8008f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b28      	cmp	r3, #40	@ 0x28
 8008f08:	d12e      	bne.n	8008f68 <_strtod_l+0x380>
 8008f0a:	4997      	ldr	r1, [pc, #604]	@ (8009168 <_strtod_l+0x580>)
 8008f0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f0e:	a819      	add	r0, sp, #100	@ 0x64
 8008f10:	f002 ffd6 	bl	800bec0 <__hexnan>
 8008f14:	2805      	cmp	r0, #5
 8008f16:	d127      	bne.n	8008f68 <_strtod_l+0x380>
 8008f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f26:	e698      	b.n	8008c5a <_strtod_l+0x72>
 8008f28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f2a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f32:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f34:	e7b5      	b.n	8008ea2 <_strtod_l+0x2ba>
 8008f36:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f38:	e7da      	b.n	8008ef0 <_strtod_l+0x308>
 8008f3a:	498c      	ldr	r1, [pc, #560]	@ (800916c <_strtod_l+0x584>)
 8008f3c:	a819      	add	r0, sp, #100	@ 0x64
 8008f3e:	f002 ffab 	bl	800be98 <__match>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aea4 	beq.w	8008c90 <_strtod_l+0xa8>
 8008f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f4a:	4989      	ldr	r1, [pc, #548]	@ (8009170 <_strtod_l+0x588>)
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	a819      	add	r0, sp, #100	@ 0x64
 8008f50:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f52:	f002 ffa1 	bl	800be98 <__match>
 8008f56:	b910      	cbnz	r0, 8008f5e <_strtod_l+0x376>
 8008f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009180 <_strtod_l+0x598>
 8008f62:	f04f 0a00 	mov.w	sl, #0
 8008f66:	e678      	b.n	8008c5a <_strtod_l+0x72>
 8008f68:	4882      	ldr	r0, [pc, #520]	@ (8009174 <_strtod_l+0x58c>)
 8008f6a:	f001 fe49 	bl	800ac00 <nan>
 8008f6e:	ec5b ab10 	vmov	sl, fp, d0
 8008f72:	e672      	b.n	8008c5a <_strtod_l+0x72>
 8008f74:	eba8 0309 	sub.w	r3, r8, r9
 8008f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	bf08      	it	eq
 8008f80:	462f      	moveq	r7, r5
 8008f82:	2d10      	cmp	r5, #16
 8008f84:	462c      	mov	r4, r5
 8008f86:	bfa8      	it	ge
 8008f88:	2410      	movge	r4, #16
 8008f8a:	f7f7 fac3 	bl	8000514 <__aeabi_ui2d>
 8008f8e:	2d09      	cmp	r5, #9
 8008f90:	4682      	mov	sl, r0
 8008f92:	468b      	mov	fp, r1
 8008f94:	dc13      	bgt.n	8008fbe <_strtod_l+0x3d6>
 8008f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f43f ae5e 	beq.w	8008c5a <_strtod_l+0x72>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	dd78      	ble.n	8009094 <_strtod_l+0x4ac>
 8008fa2:	2b16      	cmp	r3, #22
 8008fa4:	dc5f      	bgt.n	8009066 <_strtod_l+0x47e>
 8008fa6:	4974      	ldr	r1, [pc, #464]	@ (8009178 <_strtod_l+0x590>)
 8008fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	465b      	mov	r3, fp
 8008fb4:	f7f7 fb28 	bl	8000608 <__aeabi_dmul>
 8008fb8:	4682      	mov	sl, r0
 8008fba:	468b      	mov	fp, r1
 8008fbc:	e64d      	b.n	8008c5a <_strtod_l+0x72>
 8008fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8009178 <_strtod_l+0x590>)
 8008fc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fc8:	f7f7 fb1e 	bl	8000608 <__aeabi_dmul>
 8008fcc:	4682      	mov	sl, r0
 8008fce:	9808      	ldr	r0, [sp, #32]
 8008fd0:	468b      	mov	fp, r1
 8008fd2:	f7f7 fa9f 	bl	8000514 <__aeabi_ui2d>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4659      	mov	r1, fp
 8008fde:	f7f7 f95d 	bl	800029c <__adddf3>
 8008fe2:	2d0f      	cmp	r5, #15
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	468b      	mov	fp, r1
 8008fe8:	ddd5      	ble.n	8008f96 <_strtod_l+0x3ae>
 8008fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fec:	1b2c      	subs	r4, r5, r4
 8008fee:	441c      	add	r4, r3
 8008ff0:	2c00      	cmp	r4, #0
 8008ff2:	f340 8096 	ble.w	8009122 <_strtod_l+0x53a>
 8008ff6:	f014 030f 	ands.w	r3, r4, #15
 8008ffa:	d00a      	beq.n	8009012 <_strtod_l+0x42a>
 8008ffc:	495e      	ldr	r1, [pc, #376]	@ (8009178 <_strtod_l+0x590>)
 8008ffe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900a:	f7f7 fafd 	bl	8000608 <__aeabi_dmul>
 800900e:	4682      	mov	sl, r0
 8009010:	468b      	mov	fp, r1
 8009012:	f034 040f 	bics.w	r4, r4, #15
 8009016:	d073      	beq.n	8009100 <_strtod_l+0x518>
 8009018:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800901c:	dd48      	ble.n	80090b0 <_strtod_l+0x4c8>
 800901e:	2400      	movs	r4, #0
 8009020:	46a0      	mov	r8, r4
 8009022:	940a      	str	r4, [sp, #40]	@ 0x28
 8009024:	46a1      	mov	r9, r4
 8009026:	9a05      	ldr	r2, [sp, #20]
 8009028:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009180 <_strtod_l+0x598>
 800902c:	2322      	movs	r3, #34	@ 0x22
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	f43f ae0f 	beq.w	8008c5a <_strtod_l+0x72>
 800903c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800903e:	9805      	ldr	r0, [sp, #20]
 8009040:	f003 f82c 	bl	800c09c <_Bfree>
 8009044:	9805      	ldr	r0, [sp, #20]
 8009046:	4649      	mov	r1, r9
 8009048:	f003 f828 	bl	800c09c <_Bfree>
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	4641      	mov	r1, r8
 8009050:	f003 f824 	bl	800c09c <_Bfree>
 8009054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f003 f820 	bl	800c09c <_Bfree>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	4621      	mov	r1, r4
 8009060:	f003 f81c 	bl	800c09c <_Bfree>
 8009064:	e5f9      	b.n	8008c5a <_strtod_l+0x72>
 8009066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009068:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800906c:	4293      	cmp	r3, r2
 800906e:	dbbc      	blt.n	8008fea <_strtod_l+0x402>
 8009070:	4c41      	ldr	r4, [pc, #260]	@ (8009178 <_strtod_l+0x590>)
 8009072:	f1c5 050f 	rsb	r5, r5, #15
 8009076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	f7f7 fac1 	bl	8000608 <__aeabi_dmul>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	1b5d      	subs	r5, r3, r5
 800908a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800908e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009092:	e78f      	b.n	8008fb4 <_strtod_l+0x3cc>
 8009094:	3316      	adds	r3, #22
 8009096:	dba8      	blt.n	8008fea <_strtod_l+0x402>
 8009098:	4b37      	ldr	r3, [pc, #220]	@ (8009178 <_strtod_l+0x590>)
 800909a:	eba9 0808 	sub.w	r8, r9, r8
 800909e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	f7f7 fbd7 	bl	800085c <__aeabi_ddiv>
 80090ae:	e783      	b.n	8008fb8 <_strtod_l+0x3d0>
 80090b0:	4b32      	ldr	r3, [pc, #200]	@ (800917c <_strtod_l+0x594>)
 80090b2:	9308      	str	r3, [sp, #32]
 80090b4:	2300      	movs	r3, #0
 80090b6:	1124      	asrs	r4, r4, #4
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	461e      	mov	r6, r3
 80090be:	2c01      	cmp	r4, #1
 80090c0:	dc21      	bgt.n	8009106 <_strtod_l+0x51e>
 80090c2:	b10b      	cbz	r3, 80090c8 <_strtod_l+0x4e0>
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	492c      	ldr	r1, [pc, #176]	@ (800917c <_strtod_l+0x594>)
 80090ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	4b28      	ldr	r3, [pc, #160]	@ (8009180 <_strtod_l+0x598>)
 80090e0:	460a      	mov	r2, r1
 80090e2:	400b      	ands	r3, r1
 80090e4:	4927      	ldr	r1, [pc, #156]	@ (8009184 <_strtod_l+0x59c>)
 80090e6:	428b      	cmp	r3, r1
 80090e8:	4682      	mov	sl, r0
 80090ea:	d898      	bhi.n	800901e <_strtod_l+0x436>
 80090ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf86      	itte	hi
 80090f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009188 <_strtod_l+0x5a0>
 80090f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80090fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009100:	2300      	movs	r3, #0
 8009102:	9308      	str	r3, [sp, #32]
 8009104:	e07a      	b.n	80091fc <_strtod_l+0x614>
 8009106:	07e2      	lsls	r2, r4, #31
 8009108:	d505      	bpl.n	8009116 <_strtod_l+0x52e>
 800910a:	9b08      	ldr	r3, [sp, #32]
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 fa7a 	bl	8000608 <__aeabi_dmul>
 8009114:	2301      	movs	r3, #1
 8009116:	9a08      	ldr	r2, [sp, #32]
 8009118:	3208      	adds	r2, #8
 800911a:	3601      	adds	r6, #1
 800911c:	1064      	asrs	r4, r4, #1
 800911e:	9208      	str	r2, [sp, #32]
 8009120:	e7cd      	b.n	80090be <_strtod_l+0x4d6>
 8009122:	d0ed      	beq.n	8009100 <_strtod_l+0x518>
 8009124:	4264      	negs	r4, r4
 8009126:	f014 020f 	ands.w	r2, r4, #15
 800912a:	d00a      	beq.n	8009142 <_strtod_l+0x55a>
 800912c:	4b12      	ldr	r3, [pc, #72]	@ (8009178 <_strtod_l+0x590>)
 800912e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 fb8f 	bl	800085c <__aeabi_ddiv>
 800913e:	4682      	mov	sl, r0
 8009140:	468b      	mov	fp, r1
 8009142:	1124      	asrs	r4, r4, #4
 8009144:	d0dc      	beq.n	8009100 <_strtod_l+0x518>
 8009146:	2c1f      	cmp	r4, #31
 8009148:	dd20      	ble.n	800918c <_strtod_l+0x5a4>
 800914a:	2400      	movs	r4, #0
 800914c:	46a0      	mov	r8, r4
 800914e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009150:	46a1      	mov	r9, r4
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	2322      	movs	r3, #34	@ 0x22
 8009156:	f04f 0a00 	mov.w	sl, #0
 800915a:	f04f 0b00 	mov.w	fp, #0
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	e768      	b.n	8009034 <_strtod_l+0x44c>
 8009162:	bf00      	nop
 8009164:	0800d75d 	.word	0x0800d75d
 8009168:	0800d6fc 	.word	0x0800d6fc
 800916c:	0800d755 	.word	0x0800d755
 8009170:	0800d841 	.word	0x0800d841
 8009174:	0800d83d 	.word	0x0800d83d
 8009178:	0800d9a8 	.word	0x0800d9a8
 800917c:	0800d980 	.word	0x0800d980
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	7ca00000 	.word	0x7ca00000
 8009188:	7fefffff 	.word	0x7fefffff
 800918c:	f014 0310 	ands.w	r3, r4, #16
 8009190:	bf18      	it	ne
 8009192:	236a      	movne	r3, #106	@ 0x6a
 8009194:	4ea9      	ldr	r6, [pc, #676]	@ (800943c <_strtod_l+0x854>)
 8009196:	9308      	str	r3, [sp, #32]
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	2300      	movs	r3, #0
 800919e:	07e2      	lsls	r2, r4, #31
 80091a0:	d504      	bpl.n	80091ac <_strtod_l+0x5c4>
 80091a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091a6:	f7f7 fa2f 	bl	8000608 <__aeabi_dmul>
 80091aa:	2301      	movs	r3, #1
 80091ac:	1064      	asrs	r4, r4, #1
 80091ae:	f106 0608 	add.w	r6, r6, #8
 80091b2:	d1f4      	bne.n	800919e <_strtod_l+0x5b6>
 80091b4:	b10b      	cbz	r3, 80091ba <_strtod_l+0x5d2>
 80091b6:	4682      	mov	sl, r0
 80091b8:	468b      	mov	fp, r1
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	b1b3      	cbz	r3, 80091ec <_strtod_l+0x604>
 80091be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	4659      	mov	r1, fp
 80091ca:	dd0f      	ble.n	80091ec <_strtod_l+0x604>
 80091cc:	2b1f      	cmp	r3, #31
 80091ce:	dd55      	ble.n	800927c <_strtod_l+0x694>
 80091d0:	2b34      	cmp	r3, #52	@ 0x34
 80091d2:	bfde      	ittt	le
 80091d4:	f04f 33ff 	movle.w	r3, #4294967295
 80091d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091dc:	4093      	lslle	r3, r2
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	bfcc      	ite	gt
 80091e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091e8:	ea03 0b01 	andle.w	fp, r3, r1
 80091ec:	2200      	movs	r2, #0
 80091ee:	2300      	movs	r3, #0
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d1a6      	bne.n	800914a <_strtod_l+0x562>
 80091fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009202:	9805      	ldr	r0, [sp, #20]
 8009204:	462b      	mov	r3, r5
 8009206:	463a      	mov	r2, r7
 8009208:	f002 ffb0 	bl	800c16c <__s2b>
 800920c:	900a      	str	r0, [sp, #40]	@ 0x28
 800920e:	2800      	cmp	r0, #0
 8009210:	f43f af05 	beq.w	800901e <_strtod_l+0x436>
 8009214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009216:	2a00      	cmp	r2, #0
 8009218:	eba9 0308 	sub.w	r3, r9, r8
 800921c:	bfa8      	it	ge
 800921e:	2300      	movge	r3, #0
 8009220:	9312      	str	r3, [sp, #72]	@ 0x48
 8009222:	2400      	movs	r4, #0
 8009224:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009228:	9316      	str	r3, [sp, #88]	@ 0x58
 800922a:	46a0      	mov	r8, r4
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	9805      	ldr	r0, [sp, #20]
 8009230:	6859      	ldr	r1, [r3, #4]
 8009232:	f002 fef3 	bl	800c01c <_Balloc>
 8009236:	4681      	mov	r9, r0
 8009238:	2800      	cmp	r0, #0
 800923a:	f43f aef4 	beq.w	8009026 <_strtod_l+0x43e>
 800923e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009240:	691a      	ldr	r2, [r3, #16]
 8009242:	3202      	adds	r2, #2
 8009244:	f103 010c 	add.w	r1, r3, #12
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	300c      	adds	r0, #12
 800924c:	f001 fcc9 	bl	800abe2 <memcpy>
 8009250:	ec4b ab10 	vmov	d0, sl, fp
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	aa1c      	add	r2, sp, #112	@ 0x70
 8009258:	a91b      	add	r1, sp, #108	@ 0x6c
 800925a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800925e:	f003 fac1 	bl	800c7e4 <__d2b>
 8009262:	901a      	str	r0, [sp, #104]	@ 0x68
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f aede 	beq.w	8009026 <_strtod_l+0x43e>
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	2101      	movs	r1, #1
 800926e:	f003 f813 	bl	800c298 <__i2b>
 8009272:	4680      	mov	r8, r0
 8009274:	b948      	cbnz	r0, 800928a <_strtod_l+0x6a2>
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	e6d4      	b.n	8009026 <_strtod_l+0x43e>
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	ea03 0a0a 	and.w	sl, r3, sl
 8009288:	e7b0      	b.n	80091ec <_strtod_l+0x604>
 800928a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800928c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800928e:	2d00      	cmp	r5, #0
 8009290:	bfab      	itete	ge
 8009292:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009294:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009296:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009298:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800929a:	bfac      	ite	ge
 800929c:	18ef      	addge	r7, r5, r3
 800929e:	1b5e      	sublt	r6, r3, r5
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	1aed      	subs	r5, r5, r3
 80092a4:	4415      	add	r5, r2
 80092a6:	4b66      	ldr	r3, [pc, #408]	@ (8009440 <_strtod_l+0x858>)
 80092a8:	3d01      	subs	r5, #1
 80092aa:	429d      	cmp	r5, r3
 80092ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092b0:	da50      	bge.n	8009354 <_strtod_l+0x76c>
 80092b2:	1b5b      	subs	r3, r3, r5
 80092b4:	2b1f      	cmp	r3, #31
 80092b6:	eba2 0203 	sub.w	r2, r2, r3
 80092ba:	f04f 0101 	mov.w	r1, #1
 80092be:	dc3d      	bgt.n	800933c <_strtod_l+0x754>
 80092c0:	fa01 f303 	lsl.w	r3, r1, r3
 80092c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092c6:	2300      	movs	r3, #0
 80092c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80092ca:	18bd      	adds	r5, r7, r2
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	42af      	cmp	r7, r5
 80092d0:	4416      	add	r6, r2
 80092d2:	441e      	add	r6, r3
 80092d4:	463b      	mov	r3, r7
 80092d6:	bfa8      	it	ge
 80092d8:	462b      	movge	r3, r5
 80092da:	42b3      	cmp	r3, r6
 80092dc:	bfa8      	it	ge
 80092de:	4633      	movge	r3, r6
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfc2      	ittt	gt
 80092e4:	1aed      	subgt	r5, r5, r3
 80092e6:	1af6      	subgt	r6, r6, r3
 80092e8:	1aff      	subgt	r7, r7, r3
 80092ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd16      	ble.n	800931e <_strtod_l+0x736>
 80092f0:	4641      	mov	r1, r8
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	461a      	mov	r2, r3
 80092f6:	f003 f88f 	bl	800c418 <__pow5mult>
 80092fa:	4680      	mov	r8, r0
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d0ba      	beq.n	8009276 <_strtod_l+0x68e>
 8009300:	4601      	mov	r1, r0
 8009302:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	f002 ffdd 	bl	800c2c4 <__multiply>
 800930a:	900e      	str	r0, [sp, #56]	@ 0x38
 800930c:	2800      	cmp	r0, #0
 800930e:	f43f ae8a 	beq.w	8009026 <_strtod_l+0x43e>
 8009312:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009314:	9805      	ldr	r0, [sp, #20]
 8009316:	f002 fec1 	bl	800c09c <_Bfree>
 800931a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931c:	931a      	str	r3, [sp, #104]	@ 0x68
 800931e:	2d00      	cmp	r5, #0
 8009320:	dc1d      	bgt.n	800935e <_strtod_l+0x776>
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd23      	ble.n	8009370 <_strtod_l+0x788>
 8009328:	4649      	mov	r1, r9
 800932a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f003 f873 	bl	800c418 <__pow5mult>
 8009332:	4681      	mov	r9, r0
 8009334:	b9e0      	cbnz	r0, 8009370 <_strtod_l+0x788>
 8009336:	f04f 0900 	mov.w	r9, #0
 800933a:	e674      	b.n	8009026 <_strtod_l+0x43e>
 800933c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009340:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009344:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009348:	35e2      	adds	r5, #226	@ 0xe2
 800934a:	fa01 f305 	lsl.w	r3, r1, r5
 800934e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009350:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009352:	e7ba      	b.n	80092ca <_strtod_l+0x6e2>
 8009354:	2300      	movs	r3, #0
 8009356:	9310      	str	r3, [sp, #64]	@ 0x40
 8009358:	2301      	movs	r3, #1
 800935a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800935c:	e7b5      	b.n	80092ca <_strtod_l+0x6e2>
 800935e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	462a      	mov	r2, r5
 8009364:	f003 f8b2 	bl	800c4cc <__lshift>
 8009368:	901a      	str	r0, [sp, #104]	@ 0x68
 800936a:	2800      	cmp	r0, #0
 800936c:	d1d9      	bne.n	8009322 <_strtod_l+0x73a>
 800936e:	e65a      	b.n	8009026 <_strtod_l+0x43e>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd07      	ble.n	8009384 <_strtod_l+0x79c>
 8009374:	4649      	mov	r1, r9
 8009376:	9805      	ldr	r0, [sp, #20]
 8009378:	4632      	mov	r2, r6
 800937a:	f003 f8a7 	bl	800c4cc <__lshift>
 800937e:	4681      	mov	r9, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	d0d8      	beq.n	8009336 <_strtod_l+0x74e>
 8009384:	2f00      	cmp	r7, #0
 8009386:	dd08      	ble.n	800939a <_strtod_l+0x7b2>
 8009388:	4641      	mov	r1, r8
 800938a:	9805      	ldr	r0, [sp, #20]
 800938c:	463a      	mov	r2, r7
 800938e:	f003 f89d 	bl	800c4cc <__lshift>
 8009392:	4680      	mov	r8, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	f43f ae46 	beq.w	8009026 <_strtod_l+0x43e>
 800939a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	464a      	mov	r2, r9
 80093a0:	f003 f91c 	bl	800c5dc <__mdiff>
 80093a4:	4604      	mov	r4, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f ae3d 	beq.w	8009026 <_strtod_l+0x43e>
 80093ac:	68c3      	ldr	r3, [r0, #12]
 80093ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093b0:	2300      	movs	r3, #0
 80093b2:	60c3      	str	r3, [r0, #12]
 80093b4:	4641      	mov	r1, r8
 80093b6:	f003 f8f5 	bl	800c5a4 <__mcmp>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	da46      	bge.n	800944c <_strtod_l+0x864>
 80093be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c0:	ea53 030a 	orrs.w	r3, r3, sl
 80093c4:	d16c      	bne.n	80094a0 <_strtod_l+0x8b8>
 80093c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d168      	bne.n	80094a0 <_strtod_l+0x8b8>
 80093ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093d2:	0d1b      	lsrs	r3, r3, #20
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093da:	d961      	bls.n	80094a0 <_strtod_l+0x8b8>
 80093dc:	6963      	ldr	r3, [r4, #20]
 80093de:	b913      	cbnz	r3, 80093e6 <_strtod_l+0x7fe>
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	dd5c      	ble.n	80094a0 <_strtod_l+0x8b8>
 80093e6:	4621      	mov	r1, r4
 80093e8:	2201      	movs	r2, #1
 80093ea:	9805      	ldr	r0, [sp, #20]
 80093ec:	f003 f86e 	bl	800c4cc <__lshift>
 80093f0:	4641      	mov	r1, r8
 80093f2:	4604      	mov	r4, r0
 80093f4:	f003 f8d6 	bl	800c5a4 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dd51      	ble.n	80094a0 <_strtod_l+0x8b8>
 80093fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009400:	9a08      	ldr	r2, [sp, #32]
 8009402:	0d1b      	lsrs	r3, r3, #20
 8009404:	051b      	lsls	r3, r3, #20
 8009406:	2a00      	cmp	r2, #0
 8009408:	d06b      	beq.n	80094e2 <_strtod_l+0x8fa>
 800940a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800940e:	d868      	bhi.n	80094e2 <_strtod_l+0x8fa>
 8009410:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009414:	f67f ae9d 	bls.w	8009152 <_strtod_l+0x56a>
 8009418:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <_strtod_l+0x85c>)
 800941a:	4650      	mov	r0, sl
 800941c:	4659      	mov	r1, fp
 800941e:	2200      	movs	r2, #0
 8009420:	f7f7 f8f2 	bl	8000608 <__aeabi_dmul>
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <_strtod_l+0x860>)
 8009426:	400b      	ands	r3, r1
 8009428:	4682      	mov	sl, r0
 800942a:	468b      	mov	fp, r1
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f ae05 	bne.w	800903c <_strtod_l+0x454>
 8009432:	9a05      	ldr	r2, [sp, #20]
 8009434:	2322      	movs	r3, #34	@ 0x22
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e600      	b.n	800903c <_strtod_l+0x454>
 800943a:	bf00      	nop
 800943c:	0800d728 	.word	0x0800d728
 8009440:	fffffc02 	.word	0xfffffc02
 8009444:	39500000 	.word	0x39500000
 8009448:	7ff00000 	.word	0x7ff00000
 800944c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009450:	d165      	bne.n	800951e <_strtod_l+0x936>
 8009452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009458:	b35a      	cbz	r2, 80094b2 <_strtod_l+0x8ca>
 800945a:	4a9f      	ldr	r2, [pc, #636]	@ (80096d8 <_strtod_l+0xaf0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d12b      	bne.n	80094b8 <_strtod_l+0x8d0>
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	4651      	mov	r1, sl
 8009464:	b303      	cbz	r3, 80094a8 <_strtod_l+0x8c0>
 8009466:	4b9d      	ldr	r3, [pc, #628]	@ (80096dc <_strtod_l+0xaf4>)
 8009468:	465a      	mov	r2, fp
 800946a:	4013      	ands	r3, r2
 800946c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	d81b      	bhi.n	80094ae <_strtod_l+0x8c6>
 8009476:	0d1b      	lsrs	r3, r3, #20
 8009478:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800947c:	fa02 f303 	lsl.w	r3, r2, r3
 8009480:	4299      	cmp	r1, r3
 8009482:	d119      	bne.n	80094b8 <_strtod_l+0x8d0>
 8009484:	4b96      	ldr	r3, [pc, #600]	@ (80096e0 <_strtod_l+0xaf8>)
 8009486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009488:	429a      	cmp	r2, r3
 800948a:	d102      	bne.n	8009492 <_strtod_l+0x8aa>
 800948c:	3101      	adds	r1, #1
 800948e:	f43f adca 	beq.w	8009026 <_strtod_l+0x43e>
 8009492:	4b92      	ldr	r3, [pc, #584]	@ (80096dc <_strtod_l+0xaf4>)
 8009494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009496:	401a      	ands	r2, r3
 8009498:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800949c:	f04f 0a00 	mov.w	sl, #0
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1b8      	bne.n	8009418 <_strtod_l+0x830>
 80094a6:	e5c9      	b.n	800903c <_strtod_l+0x454>
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ac:	e7e8      	b.n	8009480 <_strtod_l+0x898>
 80094ae:	4613      	mov	r3, r2
 80094b0:	e7e6      	b.n	8009480 <_strtod_l+0x898>
 80094b2:	ea53 030a 	orrs.w	r3, r3, sl
 80094b6:	d0a1      	beq.n	80093fc <_strtod_l+0x814>
 80094b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ba:	b1db      	cbz	r3, 80094f4 <_strtod_l+0x90c>
 80094bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094be:	4213      	tst	r3, r2
 80094c0:	d0ee      	beq.n	80094a0 <_strtod_l+0x8b8>
 80094c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c4:	9a08      	ldr	r2, [sp, #32]
 80094c6:	4650      	mov	r0, sl
 80094c8:	4659      	mov	r1, fp
 80094ca:	b1bb      	cbz	r3, 80094fc <_strtod_l+0x914>
 80094cc:	f7ff fb6e 	bl	8008bac <sulp>
 80094d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094d4:	ec53 2b10 	vmov	r2, r3, d0
 80094d8:	f7f6 fee0 	bl	800029c <__adddf3>
 80094dc:	4682      	mov	sl, r0
 80094de:	468b      	mov	fp, r1
 80094e0:	e7de      	b.n	80094a0 <_strtod_l+0x8b8>
 80094e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094ee:	f04f 3aff 	mov.w	sl, #4294967295
 80094f2:	e7d5      	b.n	80094a0 <_strtod_l+0x8b8>
 80094f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094f6:	ea13 0f0a 	tst.w	r3, sl
 80094fa:	e7e1      	b.n	80094c0 <_strtod_l+0x8d8>
 80094fc:	f7ff fb56 	bl	8008bac <sulp>
 8009500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009504:	ec53 2b10 	vmov	r2, r3, d0
 8009508:	f7f6 fec6 	bl	8000298 <__aeabi_dsub>
 800950c:	2200      	movs	r2, #0
 800950e:	2300      	movs	r3, #0
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	f7f7 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009518:	2800      	cmp	r0, #0
 800951a:	d0c1      	beq.n	80094a0 <_strtod_l+0x8b8>
 800951c:	e619      	b.n	8009152 <_strtod_l+0x56a>
 800951e:	4641      	mov	r1, r8
 8009520:	4620      	mov	r0, r4
 8009522:	f003 f9b7 	bl	800c894 <__ratio>
 8009526:	ec57 6b10 	vmov	r6, r7, d0
 800952a:	2200      	movs	r2, #0
 800952c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 fae4 	bl	8000b00 <__aeabi_dcmple>
 8009538:	2800      	cmp	r0, #0
 800953a:	d06f      	beq.n	800961c <_strtod_l+0xa34>
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d17a      	bne.n	8009638 <_strtod_l+0xa50>
 8009542:	f1ba 0f00 	cmp.w	sl, #0
 8009546:	d158      	bne.n	80095fa <_strtod_l+0xa12>
 8009548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800954a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800954e:	2b00      	cmp	r3, #0
 8009550:	d15a      	bne.n	8009608 <_strtod_l+0xa20>
 8009552:	4b64      	ldr	r3, [pc, #400]	@ (80096e4 <_strtod_l+0xafc>)
 8009554:	2200      	movs	r2, #0
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f7 fac7 	bl	8000aec <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	d159      	bne.n	8009616 <_strtod_l+0xa2e>
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	4b60      	ldr	r3, [pc, #384]	@ (80096e8 <_strtod_l+0xb00>)
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f84d 	bl	8000608 <__aeabi_dmul>
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009576:	9606      	str	r6, [sp, #24]
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800957e:	4d57      	ldr	r5, [pc, #348]	@ (80096dc <_strtod_l+0xaf4>)
 8009580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009586:	401d      	ands	r5, r3
 8009588:	4b58      	ldr	r3, [pc, #352]	@ (80096ec <_strtod_l+0xb04>)
 800958a:	429d      	cmp	r5, r3
 800958c:	f040 80b2 	bne.w	80096f4 <_strtod_l+0xb0c>
 8009590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009592:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009596:	ec4b ab10 	vmov	d0, sl, fp
 800959a:	f003 f8b3 	bl	800c704 <__ulp>
 800959e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a2:	ec51 0b10 	vmov	r0, r1, d0
 80095a6:	f7f7 f82f 	bl	8000608 <__aeabi_dmul>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f6 fe75 	bl	800029c <__adddf3>
 80095b2:	460b      	mov	r3, r1
 80095b4:	4949      	ldr	r1, [pc, #292]	@ (80096dc <_strtod_l+0xaf4>)
 80095b6:	4a4e      	ldr	r2, [pc, #312]	@ (80096f0 <_strtod_l+0xb08>)
 80095b8:	4019      	ands	r1, r3
 80095ba:	4291      	cmp	r1, r2
 80095bc:	4682      	mov	sl, r0
 80095be:	d942      	bls.n	8009646 <_strtod_l+0xa5e>
 80095c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095c2:	4b47      	ldr	r3, [pc, #284]	@ (80096e0 <_strtod_l+0xaf8>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d103      	bne.n	80095d0 <_strtod_l+0x9e8>
 80095c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095ca:	3301      	adds	r3, #1
 80095cc:	f43f ad2b 	beq.w	8009026 <_strtod_l+0x43e>
 80095d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096e0 <_strtod_l+0xaf8>
 80095d4:	f04f 3aff 	mov.w	sl, #4294967295
 80095d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095da:	9805      	ldr	r0, [sp, #20]
 80095dc:	f002 fd5e 	bl	800c09c <_Bfree>
 80095e0:	9805      	ldr	r0, [sp, #20]
 80095e2:	4649      	mov	r1, r9
 80095e4:	f002 fd5a 	bl	800c09c <_Bfree>
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	4641      	mov	r1, r8
 80095ec:	f002 fd56 	bl	800c09c <_Bfree>
 80095f0:	9805      	ldr	r0, [sp, #20]
 80095f2:	4621      	mov	r1, r4
 80095f4:	f002 fd52 	bl	800c09c <_Bfree>
 80095f8:	e618      	b.n	800922c <_strtod_l+0x644>
 80095fa:	f1ba 0f01 	cmp.w	sl, #1
 80095fe:	d103      	bne.n	8009608 <_strtod_l+0xa20>
 8009600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009602:	2b00      	cmp	r3, #0
 8009604:	f43f ada5 	beq.w	8009152 <_strtod_l+0x56a>
 8009608:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096b8 <_strtod_l+0xad0>
 800960c:	4f35      	ldr	r7, [pc, #212]	@ (80096e4 <_strtod_l+0xafc>)
 800960e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009612:	2600      	movs	r6, #0
 8009614:	e7b1      	b.n	800957a <_strtod_l+0x992>
 8009616:	4f34      	ldr	r7, [pc, #208]	@ (80096e8 <_strtod_l+0xb00>)
 8009618:	2600      	movs	r6, #0
 800961a:	e7aa      	b.n	8009572 <_strtod_l+0x98a>
 800961c:	4b32      	ldr	r3, [pc, #200]	@ (80096e8 <_strtod_l+0xb00>)
 800961e:	4630      	mov	r0, r6
 8009620:	4639      	mov	r1, r7
 8009622:	2200      	movs	r2, #0
 8009624:	f7f6 fff0 	bl	8000608 <__aeabi_dmul>
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d09f      	beq.n	8009572 <_strtod_l+0x98a>
 8009632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009636:	e7a0      	b.n	800957a <_strtod_l+0x992>
 8009638:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096c0 <_strtod_l+0xad8>
 800963c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009640:	ec57 6b17 	vmov	r6, r7, d7
 8009644:	e799      	b.n	800957a <_strtod_l+0x992>
 8009646:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1c1      	bne.n	80095d8 <_strtod_l+0x9f0>
 8009654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009658:	0d1b      	lsrs	r3, r3, #20
 800965a:	051b      	lsls	r3, r3, #20
 800965c:	429d      	cmp	r5, r3
 800965e:	d1bb      	bne.n	80095d8 <_strtod_l+0x9f0>
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f7 fb30 	bl	8000cc8 <__aeabi_d2lz>
 8009668:	f7f6 ffa0 	bl	80005ac <__aeabi_l2d>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f6 fe10 	bl	8000298 <__aeabi_dsub>
 8009678:	460b      	mov	r3, r1
 800967a:	4602      	mov	r2, r0
 800967c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009680:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009686:	ea46 060a 	orr.w	r6, r6, sl
 800968a:	431e      	orrs	r6, r3
 800968c:	d06f      	beq.n	800976e <_strtod_l+0xb86>
 800968e:	a30e      	add	r3, pc, #56	@ (adr r3, 80096c8 <_strtod_l+0xae0>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f7 fa2a 	bl	8000aec <__aeabi_dcmplt>
 8009698:	2800      	cmp	r0, #0
 800969a:	f47f accf 	bne.w	800903c <_strtod_l+0x454>
 800969e:	a30c      	add	r3, pc, #48	@ (adr r3, 80096d0 <_strtod_l+0xae8>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096a8:	f7f7 fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d093      	beq.n	80095d8 <_strtod_l+0x9f0>
 80096b0:	e4c4      	b.n	800903c <_strtod_l+0x454>
 80096b2:	bf00      	nop
 80096b4:	f3af 8000 	nop.w
 80096b8:	00000000 	.word	0x00000000
 80096bc:	bff00000 	.word	0xbff00000
 80096c0:	00000000 	.word	0x00000000
 80096c4:	3ff00000 	.word	0x3ff00000
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fdfffff 	.word	0x3fdfffff
 80096d0:	35afe535 	.word	0x35afe535
 80096d4:	3fe00000 	.word	0x3fe00000
 80096d8:	000fffff 	.word	0x000fffff
 80096dc:	7ff00000 	.word	0x7ff00000
 80096e0:	7fefffff 	.word	0x7fefffff
 80096e4:	3ff00000 	.word	0x3ff00000
 80096e8:	3fe00000 	.word	0x3fe00000
 80096ec:	7fe00000 	.word	0x7fe00000
 80096f0:	7c9fffff 	.word	0x7c9fffff
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	b323      	cbz	r3, 8009742 <_strtod_l+0xb5a>
 80096f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096fc:	d821      	bhi.n	8009742 <_strtod_l+0xb5a>
 80096fe:	a328      	add	r3, pc, #160	@ (adr r3, 80097a0 <_strtod_l+0xbb8>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f7f7 f9fa 	bl	8000b00 <__aeabi_dcmple>
 800970c:	b1a0      	cbz	r0, 8009738 <_strtod_l+0xb50>
 800970e:	4639      	mov	r1, r7
 8009710:	4630      	mov	r0, r6
 8009712:	f7f7 fa51 	bl	8000bb8 <__aeabi_d2uiz>
 8009716:	2801      	cmp	r0, #1
 8009718:	bf38      	it	cc
 800971a:	2001      	movcc	r0, #1
 800971c:	f7f6 fefa 	bl	8000514 <__aeabi_ui2d>
 8009720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	b9fb      	cbnz	r3, 8009768 <_strtod_l+0xb80>
 8009728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800972c:	9014      	str	r0, [sp, #80]	@ 0x50
 800972e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009730:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009738:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800973a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800973e:	1b5b      	subs	r3, r3, r5
 8009740:	9311      	str	r3, [sp, #68]	@ 0x44
 8009742:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009746:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800974a:	f002 ffdb 	bl	800c704 <__ulp>
 800974e:	4650      	mov	r0, sl
 8009750:	ec53 2b10 	vmov	r2, r3, d0
 8009754:	4659      	mov	r1, fp
 8009756:	f7f6 ff57 	bl	8000608 <__aeabi_dmul>
 800975a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800975e:	f7f6 fd9d 	bl	800029c <__adddf3>
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	e770      	b.n	800964a <_strtod_l+0xa62>
 8009768:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800976c:	e7e0      	b.n	8009730 <_strtod_l+0xb48>
 800976e:	a30e      	add	r3, pc, #56	@ (adr r3, 80097a8 <_strtod_l+0xbc0>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f7 f9ba 	bl	8000aec <__aeabi_dcmplt>
 8009778:	e798      	b.n	80096ac <_strtod_l+0xac4>
 800977a:	2300      	movs	r3, #0
 800977c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800977e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	f7ff ba6d 	b.w	8008c62 <_strtod_l+0x7a>
 8009788:	2a65      	cmp	r2, #101	@ 0x65
 800978a:	f43f ab66 	beq.w	8008e5a <_strtod_l+0x272>
 800978e:	2a45      	cmp	r2, #69	@ 0x45
 8009790:	f43f ab63 	beq.w	8008e5a <_strtod_l+0x272>
 8009794:	2301      	movs	r3, #1
 8009796:	f7ff bb9e 	b.w	8008ed6 <_strtod_l+0x2ee>
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	ffc00000 	.word	0xffc00000
 80097a4:	41dfffff 	.word	0x41dfffff
 80097a8:	94a03595 	.word	0x94a03595
 80097ac:	3fcfffff 	.word	0x3fcfffff

080097b0 <_strtod_r>:
 80097b0:	4b01      	ldr	r3, [pc, #4]	@ (80097b8 <_strtod_r+0x8>)
 80097b2:	f7ff ba19 	b.w	8008be8 <_strtod_l>
 80097b6:	bf00      	nop
 80097b8:	2000002c 	.word	0x2000002c

080097bc <strtof>:
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8009880 <strtof+0xc4>
 80097c4:	4b29      	ldr	r3, [pc, #164]	@ (800986c <strtof+0xb0>)
 80097c6:	460a      	mov	r2, r1
 80097c8:	ed2d 8b02 	vpush	{d8}
 80097cc:	4601      	mov	r1, r0
 80097ce:	f8d8 0000 	ldr.w	r0, [r8]
 80097d2:	f7ff fa09 	bl	8008be8 <_strtod_l>
 80097d6:	ec55 4b10 	vmov	r4, r5, d0
 80097da:	4622      	mov	r2, r4
 80097dc:	462b      	mov	r3, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f9ab 	bl	8000b3c <__aeabi_dcmpun>
 80097e6:	b190      	cbz	r0, 800980e <strtof+0x52>
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	4821      	ldr	r0, [pc, #132]	@ (8009870 <strtof+0xb4>)
 80097ec:	da09      	bge.n	8009802 <strtof+0x46>
 80097ee:	f001 fa0f 	bl	800ac10 <nanf>
 80097f2:	eeb1 8a40 	vneg.f32	s16, s0
 80097f6:	eeb0 0a48 	vmov.f32	s0, s16
 80097fa:	ecbd 8b02 	vpop	{d8}
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009802:	ecbd 8b02 	vpop	{d8}
 8009806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800980a:	f001 ba01 	b.w	800ac10 <nanf>
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f7 f9f1 	bl	8000bf8 <__aeabi_d2f>
 8009816:	ee08 0a10 	vmov	s16, r0
 800981a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8009874 <strtof+0xb8>
 800981e:	eeb0 7ac8 	vabs.f32	s14, s16
 8009822:	eeb4 7a67 	vcmp.f32	s14, s15
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	dd11      	ble.n	8009850 <strtof+0x94>
 800982c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8009830:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <strtof+0xbc>)
 8009832:	f04f 32ff 	mov.w	r2, #4294967295
 8009836:	4620      	mov	r0, r4
 8009838:	4639      	mov	r1, r7
 800983a:	f7f7 f97f 	bl	8000b3c <__aeabi_dcmpun>
 800983e:	b980      	cbnz	r0, 8009862 <strtof+0xa6>
 8009840:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <strtof+0xbc>)
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	4620      	mov	r0, r4
 8009848:	4639      	mov	r1, r7
 800984a:	f7f7 f959 	bl	8000b00 <__aeabi_dcmple>
 800984e:	b940      	cbnz	r0, 8009862 <strtof+0xa6>
 8009850:	ee18 3a10 	vmov	r3, s16
 8009854:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009858:	d1cd      	bne.n	80097f6 <strtof+0x3a>
 800985a:	4b08      	ldr	r3, [pc, #32]	@ (800987c <strtof+0xc0>)
 800985c:	402b      	ands	r3, r5
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c9      	beq.n	80097f6 <strtof+0x3a>
 8009862:	f8d8 3000 	ldr.w	r3, [r8]
 8009866:	2222      	movs	r2, #34	@ 0x22
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e7c4      	b.n	80097f6 <strtof+0x3a>
 800986c:	2000002c 	.word	0x2000002c
 8009870:	0800d83d 	.word	0x0800d83d
 8009874:	7f7fffff 	.word	0x7f7fffff
 8009878:	7fefffff 	.word	0x7fefffff
 800987c:	7ff00000 	.word	0x7ff00000
 8009880:	20000198 	.word	0x20000198

08009884 <__cvt>:
 8009884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	ec57 6b10 	vmov	r6, r7, d0
 800988c:	2f00      	cmp	r7, #0
 800988e:	460c      	mov	r4, r1
 8009890:	4619      	mov	r1, r3
 8009892:	463b      	mov	r3, r7
 8009894:	bfbb      	ittet	lt
 8009896:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800989a:	461f      	movlt	r7, r3
 800989c:	2300      	movge	r3, #0
 800989e:	232d      	movlt	r3, #45	@ 0x2d
 80098a0:	700b      	strb	r3, [r1, #0]
 80098a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80098a8:	4691      	mov	r9, r2
 80098aa:	f023 0820 	bic.w	r8, r3, #32
 80098ae:	bfbc      	itt	lt
 80098b0:	4632      	movlt	r2, r6
 80098b2:	4616      	movlt	r6, r2
 80098b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098b8:	d005      	beq.n	80098c6 <__cvt+0x42>
 80098ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80098be:	d100      	bne.n	80098c2 <__cvt+0x3e>
 80098c0:	3401      	adds	r4, #1
 80098c2:	2102      	movs	r1, #2
 80098c4:	e000      	b.n	80098c8 <__cvt+0x44>
 80098c6:	2103      	movs	r1, #3
 80098c8:	ab03      	add	r3, sp, #12
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	ab02      	add	r3, sp, #8
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	ec47 6b10 	vmov	d0, r6, r7
 80098d4:	4653      	mov	r3, sl
 80098d6:	4622      	mov	r2, r4
 80098d8:	f001 fa46 	bl	800ad68 <_dtoa_r>
 80098dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098e0:	4605      	mov	r5, r0
 80098e2:	d119      	bne.n	8009918 <__cvt+0x94>
 80098e4:	f019 0f01 	tst.w	r9, #1
 80098e8:	d00e      	beq.n	8009908 <__cvt+0x84>
 80098ea:	eb00 0904 	add.w	r9, r0, r4
 80098ee:	2200      	movs	r2, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	4630      	mov	r0, r6
 80098f4:	4639      	mov	r1, r7
 80098f6:	f7f7 f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80098fa:	b108      	cbz	r0, 8009900 <__cvt+0x7c>
 80098fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009900:	2230      	movs	r2, #48	@ 0x30
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	454b      	cmp	r3, r9
 8009906:	d31e      	bcc.n	8009946 <__cvt+0xc2>
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800990c:	1b5b      	subs	r3, r3, r5
 800990e:	4628      	mov	r0, r5
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	b004      	add	sp, #16
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800991c:	eb00 0904 	add.w	r9, r0, r4
 8009920:	d1e5      	bne.n	80098ee <__cvt+0x6a>
 8009922:	7803      	ldrb	r3, [r0, #0]
 8009924:	2b30      	cmp	r3, #48	@ 0x30
 8009926:	d10a      	bne.n	800993e <__cvt+0xba>
 8009928:	2200      	movs	r2, #0
 800992a:	2300      	movs	r3, #0
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f7 f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009934:	b918      	cbnz	r0, 800993e <__cvt+0xba>
 8009936:	f1c4 0401 	rsb	r4, r4, #1
 800993a:	f8ca 4000 	str.w	r4, [sl]
 800993e:	f8da 3000 	ldr.w	r3, [sl]
 8009942:	4499      	add	r9, r3
 8009944:	e7d3      	b.n	80098ee <__cvt+0x6a>
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	9103      	str	r1, [sp, #12]
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e7d9      	b.n	8009902 <__cvt+0x7e>

0800994e <__exponent>:
 800994e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009950:	2900      	cmp	r1, #0
 8009952:	bfba      	itte	lt
 8009954:	4249      	neglt	r1, r1
 8009956:	232d      	movlt	r3, #45	@ 0x2d
 8009958:	232b      	movge	r3, #43	@ 0x2b
 800995a:	2909      	cmp	r1, #9
 800995c:	7002      	strb	r2, [r0, #0]
 800995e:	7043      	strb	r3, [r0, #1]
 8009960:	dd29      	ble.n	80099b6 <__exponent+0x68>
 8009962:	f10d 0307 	add.w	r3, sp, #7
 8009966:	461d      	mov	r5, r3
 8009968:	270a      	movs	r7, #10
 800996a:	461a      	mov	r2, r3
 800996c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009970:	fb07 1416 	mls	r4, r7, r6, r1
 8009974:	3430      	adds	r4, #48	@ 0x30
 8009976:	f802 4c01 	strb.w	r4, [r2, #-1]
 800997a:	460c      	mov	r4, r1
 800997c:	2c63      	cmp	r4, #99	@ 0x63
 800997e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009982:	4631      	mov	r1, r6
 8009984:	dcf1      	bgt.n	800996a <__exponent+0x1c>
 8009986:	3130      	adds	r1, #48	@ 0x30
 8009988:	1e94      	subs	r4, r2, #2
 800998a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800998e:	1c41      	adds	r1, r0, #1
 8009990:	4623      	mov	r3, r4
 8009992:	42ab      	cmp	r3, r5
 8009994:	d30a      	bcc.n	80099ac <__exponent+0x5e>
 8009996:	f10d 0309 	add.w	r3, sp, #9
 800999a:	1a9b      	subs	r3, r3, r2
 800999c:	42ac      	cmp	r4, r5
 800999e:	bf88      	it	hi
 80099a0:	2300      	movhi	r3, #0
 80099a2:	3302      	adds	r3, #2
 80099a4:	4403      	add	r3, r0
 80099a6:	1a18      	subs	r0, r3, r0
 80099a8:	b003      	add	sp, #12
 80099aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099b4:	e7ed      	b.n	8009992 <__exponent+0x44>
 80099b6:	2330      	movs	r3, #48	@ 0x30
 80099b8:	3130      	adds	r1, #48	@ 0x30
 80099ba:	7083      	strb	r3, [r0, #2]
 80099bc:	70c1      	strb	r1, [r0, #3]
 80099be:	1d03      	adds	r3, r0, #4
 80099c0:	e7f1      	b.n	80099a6 <__exponent+0x58>
	...

080099c4 <_printf_float>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	b08d      	sub	sp, #52	@ 0x34
 80099ca:	460c      	mov	r4, r1
 80099cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099d0:	4616      	mov	r6, r2
 80099d2:	461f      	mov	r7, r3
 80099d4:	4605      	mov	r5, r0
 80099d6:	f001 f87d 	bl	800aad4 <_localeconv_r>
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f6 fc4e 	bl	8000280 <strlen>
 80099e4:	2300      	movs	r3, #0
 80099e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e8:	f8d8 3000 	ldr.w	r3, [r8]
 80099ec:	9005      	str	r0, [sp, #20]
 80099ee:	3307      	adds	r3, #7
 80099f0:	f023 0307 	bic.w	r3, r3, #7
 80099f4:	f103 0208 	add.w	r2, r3, #8
 80099f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099fc:	f8d4 b000 	ldr.w	fp, [r4]
 8009a00:	f8c8 2000 	str.w	r2, [r8]
 8009a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a0c:	9307      	str	r3, [sp, #28]
 8009a0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8009c8c <_printf_float+0x2c8>)
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	f7f7 f88c 	bl	8000b3c <__aeabi_dcmpun>
 8009a24:	bb70      	cbnz	r0, 8009a84 <_printf_float+0xc0>
 8009a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a2a:	4b98      	ldr	r3, [pc, #608]	@ (8009c8c <_printf_float+0x2c8>)
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a30:	f7f7 f866 	bl	8000b00 <__aeabi_dcmple>
 8009a34:	bb30      	cbnz	r0, 8009a84 <_printf_float+0xc0>
 8009a36:	2200      	movs	r2, #0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	f7f7 f855 	bl	8000aec <__aeabi_dcmplt>
 8009a42:	b110      	cbz	r0, 8009a4a <_printf_float+0x86>
 8009a44:	232d      	movs	r3, #45	@ 0x2d
 8009a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a4a:	4a91      	ldr	r2, [pc, #580]	@ (8009c90 <_printf_float+0x2cc>)
 8009a4c:	4b91      	ldr	r3, [pc, #580]	@ (8009c94 <_printf_float+0x2d0>)
 8009a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a52:	bf94      	ite	ls
 8009a54:	4690      	movls	r8, r2
 8009a56:	4698      	movhi	r8, r3
 8009a58:	2303      	movs	r3, #3
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	f02b 0304 	bic.w	r3, fp, #4
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	f04f 0900 	mov.w	r9, #0
 8009a66:	9700      	str	r7, [sp, #0]
 8009a68:	4633      	mov	r3, r6
 8009a6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f000 f9d2 	bl	8009e18 <_printf_common>
 8009a74:	3001      	adds	r0, #1
 8009a76:	f040 808d 	bne.w	8009b94 <_printf_float+0x1d0>
 8009a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7e:	b00d      	add	sp, #52	@ 0x34
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	4642      	mov	r2, r8
 8009a86:	464b      	mov	r3, r9
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f7 f856 	bl	8000b3c <__aeabi_dcmpun>
 8009a90:	b140      	cbz	r0, 8009aa4 <_printf_float+0xe0>
 8009a92:	464b      	mov	r3, r9
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bfbc      	itt	lt
 8009a98:	232d      	movlt	r3, #45	@ 0x2d
 8009a9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c98 <_printf_float+0x2d4>)
 8009aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8009c9c <_printf_float+0x2d8>)
 8009aa2:	e7d4      	b.n	8009a4e <_printf_float+0x8a>
 8009aa4:	6863      	ldr	r3, [r4, #4]
 8009aa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009aaa:	9206      	str	r2, [sp, #24]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	d13b      	bne.n	8009b28 <_printf_float+0x164>
 8009ab0:	2306      	movs	r3, #6
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6022      	str	r2, [r4, #0]
 8009abc:	9303      	str	r3, [sp, #12]
 8009abe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ac0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ac4:	ab09      	add	r3, sp, #36	@ 0x24
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	6861      	ldr	r1, [r4, #4]
 8009aca:	ec49 8b10 	vmov	d0, r8, r9
 8009ace:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7ff fed6 	bl	8009884 <__cvt>
 8009ad8:	9b06      	ldr	r3, [sp, #24]
 8009ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009adc:	2b47      	cmp	r3, #71	@ 0x47
 8009ade:	4680      	mov	r8, r0
 8009ae0:	d129      	bne.n	8009b36 <_printf_float+0x172>
 8009ae2:	1cc8      	adds	r0, r1, #3
 8009ae4:	db02      	blt.n	8009aec <_printf_float+0x128>
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	dd41      	ble.n	8009b70 <_printf_float+0x1ac>
 8009aec:	f1aa 0a02 	sub.w	sl, sl, #2
 8009af0:	fa5f fa8a 	uxtb.w	sl, sl
 8009af4:	3901      	subs	r1, #1
 8009af6:	4652      	mov	r2, sl
 8009af8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8009afe:	f7ff ff26 	bl	800994e <__exponent>
 8009b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b04:	1813      	adds	r3, r2, r0
 8009b06:	2a01      	cmp	r2, #1
 8009b08:	4681      	mov	r9, r0
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	dc02      	bgt.n	8009b14 <_printf_float+0x150>
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	07d2      	lsls	r2, r2, #31
 8009b12:	d501      	bpl.n	8009b18 <_printf_float+0x154>
 8009b14:	3301      	adds	r3, #1
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0a2      	beq.n	8009a66 <_printf_float+0xa2>
 8009b20:	232d      	movs	r3, #45	@ 0x2d
 8009b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b26:	e79e      	b.n	8009a66 <_printf_float+0xa2>
 8009b28:	9a06      	ldr	r2, [sp, #24]
 8009b2a:	2a47      	cmp	r2, #71	@ 0x47
 8009b2c:	d1c2      	bne.n	8009ab4 <_printf_float+0xf0>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1c0      	bne.n	8009ab4 <_printf_float+0xf0>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7bd      	b.n	8009ab2 <_printf_float+0xee>
 8009b36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b3a:	d9db      	bls.n	8009af4 <_printf_float+0x130>
 8009b3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b40:	d118      	bne.n	8009b74 <_printf_float+0x1b0>
 8009b42:	2900      	cmp	r1, #0
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	dd0b      	ble.n	8009b60 <_printf_float+0x19c>
 8009b48:	6121      	str	r1, [r4, #16]
 8009b4a:	b913      	cbnz	r3, 8009b52 <_printf_float+0x18e>
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	07d0      	lsls	r0, r2, #31
 8009b50:	d502      	bpl.n	8009b58 <_printf_float+0x194>
 8009b52:	3301      	adds	r3, #1
 8009b54:	440b      	add	r3, r1
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	e7db      	b.n	8009b18 <_printf_float+0x154>
 8009b60:	b913      	cbnz	r3, 8009b68 <_printf_float+0x1a4>
 8009b62:	6822      	ldr	r2, [r4, #0]
 8009b64:	07d2      	lsls	r2, r2, #31
 8009b66:	d501      	bpl.n	8009b6c <_printf_float+0x1a8>
 8009b68:	3302      	adds	r3, #2
 8009b6a:	e7f4      	b.n	8009b56 <_printf_float+0x192>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e7f2      	b.n	8009b56 <_printf_float+0x192>
 8009b70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b76:	4299      	cmp	r1, r3
 8009b78:	db05      	blt.n	8009b86 <_printf_float+0x1c2>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	6121      	str	r1, [r4, #16]
 8009b7e:	07d8      	lsls	r0, r3, #31
 8009b80:	d5ea      	bpl.n	8009b58 <_printf_float+0x194>
 8009b82:	1c4b      	adds	r3, r1, #1
 8009b84:	e7e7      	b.n	8009b56 <_printf_float+0x192>
 8009b86:	2900      	cmp	r1, #0
 8009b88:	bfd4      	ite	le
 8009b8a:	f1c1 0202 	rsble	r2, r1, #2
 8009b8e:	2201      	movgt	r2, #1
 8009b90:	4413      	add	r3, r2
 8009b92:	e7e0      	b.n	8009b56 <_printf_float+0x192>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	055a      	lsls	r2, r3, #21
 8009b98:	d407      	bmi.n	8009baa <_printf_float+0x1e6>
 8009b9a:	6923      	ldr	r3, [r4, #16]
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d12b      	bne.n	8009c00 <_printf_float+0x23c>
 8009ba8:	e767      	b.n	8009a7a <_printf_float+0xb6>
 8009baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bae:	f240 80dd 	bls.w	8009d6c <_printf_float+0x3a8>
 8009bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f7f6 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d033      	beq.n	8009c2a <_printf_float+0x266>
 8009bc2:	4a37      	ldr	r2, [pc, #220]	@ (8009ca0 <_printf_float+0x2dc>)
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f af54 	beq.w	8009a7a <_printf_float+0xb6>
 8009bd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009bd6:	4543      	cmp	r3, r8
 8009bd8:	db02      	blt.n	8009be0 <_printf_float+0x21c>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	07d8      	lsls	r0, r3, #31
 8009bde:	d50f      	bpl.n	8009c00 <_printf_float+0x23c>
 8009be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be4:	4631      	mov	r1, r6
 8009be6:	4628      	mov	r0, r5
 8009be8:	47b8      	blx	r7
 8009bea:	3001      	adds	r0, #1
 8009bec:	f43f af45 	beq.w	8009a7a <_printf_float+0xb6>
 8009bf0:	f04f 0900 	mov.w	r9, #0
 8009bf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bf8:	f104 0a1a 	add.w	sl, r4, #26
 8009bfc:	45c8      	cmp	r8, r9
 8009bfe:	dc09      	bgt.n	8009c14 <_printf_float+0x250>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	079b      	lsls	r3, r3, #30
 8009c04:	f100 8103 	bmi.w	8009e0e <_printf_float+0x44a>
 8009c08:	68e0      	ldr	r0, [r4, #12]
 8009c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	bfb8      	it	lt
 8009c10:	4618      	movlt	r0, r3
 8009c12:	e734      	b.n	8009a7e <_printf_float+0xba>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4652      	mov	r2, sl
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f af2b 	beq.w	8009a7a <_printf_float+0xb6>
 8009c24:	f109 0901 	add.w	r9, r9, #1
 8009c28:	e7e8      	b.n	8009bfc <_printf_float+0x238>
 8009c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dc39      	bgt.n	8009ca4 <_printf_float+0x2e0>
 8009c30:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <_printf_float+0x2dc>)
 8009c32:	2301      	movs	r3, #1
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f af1d 	beq.w	8009a7a <_printf_float+0xb6>
 8009c40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c44:	ea59 0303 	orrs.w	r3, r9, r3
 8009c48:	d102      	bne.n	8009c50 <_printf_float+0x28c>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	07d9      	lsls	r1, r3, #31
 8009c4e:	d5d7      	bpl.n	8009c00 <_printf_float+0x23c>
 8009c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f af0d 	beq.w	8009a7a <_printf_float+0xb6>
 8009c60:	f04f 0a00 	mov.w	sl, #0
 8009c64:	f104 0b1a 	add.w	fp, r4, #26
 8009c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6a:	425b      	negs	r3, r3
 8009c6c:	4553      	cmp	r3, sl
 8009c6e:	dc01      	bgt.n	8009c74 <_printf_float+0x2b0>
 8009c70:	464b      	mov	r3, r9
 8009c72:	e793      	b.n	8009b9c <_printf_float+0x1d8>
 8009c74:	2301      	movs	r3, #1
 8009c76:	465a      	mov	r2, fp
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f aefb 	beq.w	8009a7a <_printf_float+0xb6>
 8009c84:	f10a 0a01 	add.w	sl, sl, #1
 8009c88:	e7ee      	b.n	8009c68 <_printf_float+0x2a4>
 8009c8a:	bf00      	nop
 8009c8c:	7fefffff 	.word	0x7fefffff
 8009c90:	0800d750 	.word	0x0800d750
 8009c94:	0800d754 	.word	0x0800d754
 8009c98:	0800d758 	.word	0x0800d758
 8009c9c:	0800d75c 	.word	0x0800d75c
 8009ca0:	0800d760 	.word	0x0800d760
 8009ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009caa:	4553      	cmp	r3, sl
 8009cac:	bfa8      	it	ge
 8009cae:	4653      	movge	r3, sl
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	4699      	mov	r9, r3
 8009cb4:	dc36      	bgt.n	8009d24 <_printf_float+0x360>
 8009cb6:	f04f 0b00 	mov.w	fp, #0
 8009cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cbe:	f104 021a 	add.w	r2, r4, #26
 8009cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cc4:	9306      	str	r3, [sp, #24]
 8009cc6:	eba3 0309 	sub.w	r3, r3, r9
 8009cca:	455b      	cmp	r3, fp
 8009ccc:	dc31      	bgt.n	8009d32 <_printf_float+0x36e>
 8009cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd0:	459a      	cmp	sl, r3
 8009cd2:	dc3a      	bgt.n	8009d4a <_printf_float+0x386>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07da      	lsls	r2, r3, #31
 8009cd8:	d437      	bmi.n	8009d4a <_printf_float+0x386>
 8009cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cdc:	ebaa 0903 	sub.w	r9, sl, r3
 8009ce0:	9b06      	ldr	r3, [sp, #24]
 8009ce2:	ebaa 0303 	sub.w	r3, sl, r3
 8009ce6:	4599      	cmp	r9, r3
 8009ce8:	bfa8      	it	ge
 8009cea:	4699      	movge	r9, r3
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	dc33      	bgt.n	8009d5a <_printf_float+0x396>
 8009cf2:	f04f 0800 	mov.w	r8, #0
 8009cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cfa:	f104 0b1a 	add.w	fp, r4, #26
 8009cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d00:	ebaa 0303 	sub.w	r3, sl, r3
 8009d04:	eba3 0309 	sub.w	r3, r3, r9
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	f77f af79 	ble.w	8009c00 <_printf_float+0x23c>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	465a      	mov	r2, fp
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f aeae 	beq.w	8009a7a <_printf_float+0xb6>
 8009d1e:	f108 0801 	add.w	r8, r8, #1
 8009d22:	e7ec      	b.n	8009cfe <_printf_float+0x33a>
 8009d24:	4642      	mov	r2, r8
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1c2      	bne.n	8009cb6 <_printf_float+0x2f2>
 8009d30:	e6a3      	b.n	8009a7a <_printf_float+0xb6>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	9206      	str	r2, [sp, #24]
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae9c 	beq.w	8009a7a <_printf_float+0xb6>
 8009d42:	9a06      	ldr	r2, [sp, #24]
 8009d44:	f10b 0b01 	add.w	fp, fp, #1
 8009d48:	e7bb      	b.n	8009cc2 <_printf_float+0x2fe>
 8009d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b8      	blx	r7
 8009d54:	3001      	adds	r0, #1
 8009d56:	d1c0      	bne.n	8009cda <_printf_float+0x316>
 8009d58:	e68f      	b.n	8009a7a <_printf_float+0xb6>
 8009d5a:	9a06      	ldr	r2, [sp, #24]
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	4442      	add	r2, r8
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	d1c3      	bne.n	8009cf2 <_printf_float+0x32e>
 8009d6a:	e686      	b.n	8009a7a <_printf_float+0xb6>
 8009d6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d70:	f1ba 0f01 	cmp.w	sl, #1
 8009d74:	dc01      	bgt.n	8009d7a <_printf_float+0x3b6>
 8009d76:	07db      	lsls	r3, r3, #31
 8009d78:	d536      	bpl.n	8009de8 <_printf_float+0x424>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae78 	beq.w	8009a7a <_printf_float+0xb6>
 8009d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	f43f ae70 	beq.w	8009a7a <_printf_float+0xb6>
 8009d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2300      	movs	r3, #0
 8009da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009da6:	f7f6 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8009daa:	b9c0      	cbnz	r0, 8009dde <_printf_float+0x41a>
 8009dac:	4653      	mov	r3, sl
 8009dae:	f108 0201 	add.w	r2, r8, #1
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d10c      	bne.n	8009dd6 <_printf_float+0x412>
 8009dbc:	e65d      	b.n	8009a7a <_printf_float+0xb6>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	465a      	mov	r2, fp
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f ae56 	beq.w	8009a7a <_printf_float+0xb6>
 8009dce:	f108 0801 	add.w	r8, r8, #1
 8009dd2:	45d0      	cmp	r8, sl
 8009dd4:	dbf3      	blt.n	8009dbe <_printf_float+0x3fa>
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ddc:	e6df      	b.n	8009b9e <_printf_float+0x1da>
 8009dde:	f04f 0800 	mov.w	r8, #0
 8009de2:	f104 0b1a 	add.w	fp, r4, #26
 8009de6:	e7f4      	b.n	8009dd2 <_printf_float+0x40e>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4642      	mov	r2, r8
 8009dec:	e7e1      	b.n	8009db2 <_printf_float+0x3ee>
 8009dee:	2301      	movs	r3, #1
 8009df0:	464a      	mov	r2, r9
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f ae3e 	beq.w	8009a7a <_printf_float+0xb6>
 8009dfe:	f108 0801 	add.w	r8, r8, #1
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e06:	1a5b      	subs	r3, r3, r1
 8009e08:	4543      	cmp	r3, r8
 8009e0a:	dcf0      	bgt.n	8009dee <_printf_float+0x42a>
 8009e0c:	e6fc      	b.n	8009c08 <_printf_float+0x244>
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	f104 0919 	add.w	r9, r4, #25
 8009e16:	e7f4      	b.n	8009e02 <_printf_float+0x43e>

08009e18 <_printf_common>:
 8009e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	4616      	mov	r6, r2
 8009e1e:	4698      	mov	r8, r3
 8009e20:	688a      	ldr	r2, [r1, #8]
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	bfb8      	it	lt
 8009e2c:	4613      	movlt	r3, r2
 8009e2e:	6033      	str	r3, [r6, #0]
 8009e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e34:	4607      	mov	r7, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	b10a      	cbz	r2, 8009e3e <_printf_common+0x26>
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	6033      	str	r3, [r6, #0]
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	0699      	lsls	r1, r3, #26
 8009e42:	bf42      	ittt	mi
 8009e44:	6833      	ldrmi	r3, [r6, #0]
 8009e46:	3302      	addmi	r3, #2
 8009e48:	6033      	strmi	r3, [r6, #0]
 8009e4a:	6825      	ldr	r5, [r4, #0]
 8009e4c:	f015 0506 	ands.w	r5, r5, #6
 8009e50:	d106      	bne.n	8009e60 <_printf_common+0x48>
 8009e52:	f104 0a19 	add.w	sl, r4, #25
 8009e56:	68e3      	ldr	r3, [r4, #12]
 8009e58:	6832      	ldr	r2, [r6, #0]
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	42ab      	cmp	r3, r5
 8009e5e:	dc26      	bgt.n	8009eae <_printf_common+0x96>
 8009e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e64:	6822      	ldr	r2, [r4, #0]
 8009e66:	3b00      	subs	r3, #0
 8009e68:	bf18      	it	ne
 8009e6a:	2301      	movne	r3, #1
 8009e6c:	0692      	lsls	r2, r2, #26
 8009e6e:	d42b      	bmi.n	8009ec8 <_printf_common+0xb0>
 8009e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e74:	4641      	mov	r1, r8
 8009e76:	4638      	mov	r0, r7
 8009e78:	47c8      	blx	r9
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d01e      	beq.n	8009ebc <_printf_common+0xa4>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	6922      	ldr	r2, [r4, #16]
 8009e82:	f003 0306 	and.w	r3, r3, #6
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	bf02      	ittt	eq
 8009e8a:	68e5      	ldreq	r5, [r4, #12]
 8009e8c:	6833      	ldreq	r3, [r6, #0]
 8009e8e:	1aed      	subeq	r5, r5, r3
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	bf0c      	ite	eq
 8009e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e98:	2500      	movne	r5, #0
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	bfc4      	itt	gt
 8009e9e:	1a9b      	subgt	r3, r3, r2
 8009ea0:	18ed      	addgt	r5, r5, r3
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	341a      	adds	r4, #26
 8009ea6:	42b5      	cmp	r5, r6
 8009ea8:	d11a      	bne.n	8009ee0 <_printf_common+0xc8>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	e008      	b.n	8009ec0 <_printf_common+0xa8>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	4641      	mov	r1, r8
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	47c8      	blx	r9
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d103      	bne.n	8009ec4 <_printf_common+0xac>
 8009ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	e7c6      	b.n	8009e56 <_printf_common+0x3e>
 8009ec8:	18e1      	adds	r1, r4, r3
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	2030      	movs	r0, #48	@ 0x30
 8009ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ed2:	4422      	add	r2, r4
 8009ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009edc:	3302      	adds	r3, #2
 8009ede:	e7c7      	b.n	8009e70 <_printf_common+0x58>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	47c8      	blx	r9
 8009eea:	3001      	adds	r0, #1
 8009eec:	d0e6      	beq.n	8009ebc <_printf_common+0xa4>
 8009eee:	3601      	adds	r6, #1
 8009ef0:	e7d9      	b.n	8009ea6 <_printf_common+0x8e>
	...

08009ef4 <_printf_i>:
 8009ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef8:	7e0f      	ldrb	r7, [r1, #24]
 8009efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009efc:	2f78      	cmp	r7, #120	@ 0x78
 8009efe:	4691      	mov	r9, r2
 8009f00:	4680      	mov	r8, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	469a      	mov	sl, r3
 8009f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f0a:	d807      	bhi.n	8009f1c <_printf_i+0x28>
 8009f0c:	2f62      	cmp	r7, #98	@ 0x62
 8009f0e:	d80a      	bhi.n	8009f26 <_printf_i+0x32>
 8009f10:	2f00      	cmp	r7, #0
 8009f12:	f000 80d2 	beq.w	800a0ba <_printf_i+0x1c6>
 8009f16:	2f58      	cmp	r7, #88	@ 0x58
 8009f18:	f000 80b9 	beq.w	800a08e <_printf_i+0x19a>
 8009f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f24:	e03a      	b.n	8009f9c <_printf_i+0xa8>
 8009f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f2a:	2b15      	cmp	r3, #21
 8009f2c:	d8f6      	bhi.n	8009f1c <_printf_i+0x28>
 8009f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f34 <_printf_i+0x40>)
 8009f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f34:	08009f8d 	.word	0x08009f8d
 8009f38:	08009fa1 	.word	0x08009fa1
 8009f3c:	08009f1d 	.word	0x08009f1d
 8009f40:	08009f1d 	.word	0x08009f1d
 8009f44:	08009f1d 	.word	0x08009f1d
 8009f48:	08009f1d 	.word	0x08009f1d
 8009f4c:	08009fa1 	.word	0x08009fa1
 8009f50:	08009f1d 	.word	0x08009f1d
 8009f54:	08009f1d 	.word	0x08009f1d
 8009f58:	08009f1d 	.word	0x08009f1d
 8009f5c:	08009f1d 	.word	0x08009f1d
 8009f60:	0800a0a1 	.word	0x0800a0a1
 8009f64:	08009fcb 	.word	0x08009fcb
 8009f68:	0800a05b 	.word	0x0800a05b
 8009f6c:	08009f1d 	.word	0x08009f1d
 8009f70:	08009f1d 	.word	0x08009f1d
 8009f74:	0800a0c3 	.word	0x0800a0c3
 8009f78:	08009f1d 	.word	0x08009f1d
 8009f7c:	08009fcb 	.word	0x08009fcb
 8009f80:	08009f1d 	.word	0x08009f1d
 8009f84:	08009f1d 	.word	0x08009f1d
 8009f88:	0800a063 	.word	0x0800a063
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	1d1a      	adds	r2, r3, #4
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6032      	str	r2, [r6, #0]
 8009f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e09d      	b.n	800a0dc <_printf_i+0x1e8>
 8009fa0:	6833      	ldr	r3, [r6, #0]
 8009fa2:	6820      	ldr	r0, [r4, #0]
 8009fa4:	1d19      	adds	r1, r3, #4
 8009fa6:	6031      	str	r1, [r6, #0]
 8009fa8:	0606      	lsls	r6, r0, #24
 8009faa:	d501      	bpl.n	8009fb0 <_printf_i+0xbc>
 8009fac:	681d      	ldr	r5, [r3, #0]
 8009fae:	e003      	b.n	8009fb8 <_printf_i+0xc4>
 8009fb0:	0645      	lsls	r5, r0, #25
 8009fb2:	d5fb      	bpl.n	8009fac <_printf_i+0xb8>
 8009fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	da03      	bge.n	8009fc4 <_printf_i+0xd0>
 8009fbc:	232d      	movs	r3, #45	@ 0x2d
 8009fbe:	426d      	negs	r5, r5
 8009fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc4:	4859      	ldr	r0, [pc, #356]	@ (800a12c <_printf_i+0x238>)
 8009fc6:	230a      	movs	r3, #10
 8009fc8:	e011      	b.n	8009fee <_printf_i+0xfa>
 8009fca:	6821      	ldr	r1, [r4, #0]
 8009fcc:	6833      	ldr	r3, [r6, #0]
 8009fce:	0608      	lsls	r0, r1, #24
 8009fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fd4:	d402      	bmi.n	8009fdc <_printf_i+0xe8>
 8009fd6:	0649      	lsls	r1, r1, #25
 8009fd8:	bf48      	it	mi
 8009fda:	b2ad      	uxthmi	r5, r5
 8009fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fde:	4853      	ldr	r0, [pc, #332]	@ (800a12c <_printf_i+0x238>)
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	bf14      	ite	ne
 8009fe4:	230a      	movne	r3, #10
 8009fe6:	2308      	moveq	r3, #8
 8009fe8:	2100      	movs	r1, #0
 8009fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fee:	6866      	ldr	r6, [r4, #4]
 8009ff0:	60a6      	str	r6, [r4, #8]
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	bfa2      	ittt	ge
 8009ff6:	6821      	ldrge	r1, [r4, #0]
 8009ff8:	f021 0104 	bicge.w	r1, r1, #4
 8009ffc:	6021      	strge	r1, [r4, #0]
 8009ffe:	b90d      	cbnz	r5, 800a004 <_printf_i+0x110>
 800a000:	2e00      	cmp	r6, #0
 800a002:	d04b      	beq.n	800a09c <_printf_i+0x1a8>
 800a004:	4616      	mov	r6, r2
 800a006:	fbb5 f1f3 	udiv	r1, r5, r3
 800a00a:	fb03 5711 	mls	r7, r3, r1, r5
 800a00e:	5dc7      	ldrb	r7, [r0, r7]
 800a010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a014:	462f      	mov	r7, r5
 800a016:	42bb      	cmp	r3, r7
 800a018:	460d      	mov	r5, r1
 800a01a:	d9f4      	bls.n	800a006 <_printf_i+0x112>
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d10b      	bne.n	800a038 <_printf_i+0x144>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	07df      	lsls	r7, r3, #31
 800a024:	d508      	bpl.n	800a038 <_printf_i+0x144>
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	6861      	ldr	r1, [r4, #4]
 800a02a:	4299      	cmp	r1, r3
 800a02c:	bfde      	ittt	le
 800a02e:	2330      	movle	r3, #48	@ 0x30
 800a030:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a034:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a038:	1b92      	subs	r2, r2, r6
 800a03a:	6122      	str	r2, [r4, #16]
 800a03c:	f8cd a000 	str.w	sl, [sp]
 800a040:	464b      	mov	r3, r9
 800a042:	aa03      	add	r2, sp, #12
 800a044:	4621      	mov	r1, r4
 800a046:	4640      	mov	r0, r8
 800a048:	f7ff fee6 	bl	8009e18 <_printf_common>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d14a      	bne.n	800a0e6 <_printf_i+0x1f2>
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	b004      	add	sp, #16
 800a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	f043 0320 	orr.w	r3, r3, #32
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	4833      	ldr	r0, [pc, #204]	@ (800a130 <_printf_i+0x23c>)
 800a064:	2778      	movs	r7, #120	@ 0x78
 800a066:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	6831      	ldr	r1, [r6, #0]
 800a06e:	061f      	lsls	r7, r3, #24
 800a070:	f851 5b04 	ldr.w	r5, [r1], #4
 800a074:	d402      	bmi.n	800a07c <_printf_i+0x188>
 800a076:	065f      	lsls	r7, r3, #25
 800a078:	bf48      	it	mi
 800a07a:	b2ad      	uxthmi	r5, r5
 800a07c:	6031      	str	r1, [r6, #0]
 800a07e:	07d9      	lsls	r1, r3, #31
 800a080:	bf44      	itt	mi
 800a082:	f043 0320 	orrmi.w	r3, r3, #32
 800a086:	6023      	strmi	r3, [r4, #0]
 800a088:	b11d      	cbz	r5, 800a092 <_printf_i+0x19e>
 800a08a:	2310      	movs	r3, #16
 800a08c:	e7ac      	b.n	8009fe8 <_printf_i+0xf4>
 800a08e:	4827      	ldr	r0, [pc, #156]	@ (800a12c <_printf_i+0x238>)
 800a090:	e7e9      	b.n	800a066 <_printf_i+0x172>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	f023 0320 	bic.w	r3, r3, #32
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	e7f6      	b.n	800a08a <_printf_i+0x196>
 800a09c:	4616      	mov	r6, r2
 800a09e:	e7bd      	b.n	800a01c <_printf_i+0x128>
 800a0a0:	6833      	ldr	r3, [r6, #0]
 800a0a2:	6825      	ldr	r5, [r4, #0]
 800a0a4:	6961      	ldr	r1, [r4, #20]
 800a0a6:	1d18      	adds	r0, r3, #4
 800a0a8:	6030      	str	r0, [r6, #0]
 800a0aa:	062e      	lsls	r6, r5, #24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	d501      	bpl.n	800a0b4 <_printf_i+0x1c0>
 800a0b0:	6019      	str	r1, [r3, #0]
 800a0b2:	e002      	b.n	800a0ba <_printf_i+0x1c6>
 800a0b4:	0668      	lsls	r0, r5, #25
 800a0b6:	d5fb      	bpl.n	800a0b0 <_printf_i+0x1bc>
 800a0b8:	8019      	strh	r1, [r3, #0]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	4616      	mov	r6, r2
 800a0c0:	e7bc      	b.n	800a03c <_printf_i+0x148>
 800a0c2:	6833      	ldr	r3, [r6, #0]
 800a0c4:	1d1a      	adds	r2, r3, #4
 800a0c6:	6032      	str	r2, [r6, #0]
 800a0c8:	681e      	ldr	r6, [r3, #0]
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7f6 f886 	bl	80001e0 <memchr>
 800a0d4:	b108      	cbz	r0, 800a0da <_printf_i+0x1e6>
 800a0d6:	1b80      	subs	r0, r0, r6
 800a0d8:	6060      	str	r0, [r4, #4]
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e4:	e7aa      	b.n	800a03c <_printf_i+0x148>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	47d0      	blx	sl
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d0ad      	beq.n	800a050 <_printf_i+0x15c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	079b      	lsls	r3, r3, #30
 800a0f8:	d413      	bmi.n	800a122 <_printf_i+0x22e>
 800a0fa:	68e0      	ldr	r0, [r4, #12]
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	4298      	cmp	r0, r3
 800a100:	bfb8      	it	lt
 800a102:	4618      	movlt	r0, r3
 800a104:	e7a6      	b.n	800a054 <_printf_i+0x160>
 800a106:	2301      	movs	r3, #1
 800a108:	4632      	mov	r2, r6
 800a10a:	4649      	mov	r1, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	47d0      	blx	sl
 800a110:	3001      	adds	r0, #1
 800a112:	d09d      	beq.n	800a050 <_printf_i+0x15c>
 800a114:	3501      	adds	r5, #1
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	9903      	ldr	r1, [sp, #12]
 800a11a:	1a5b      	subs	r3, r3, r1
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dcf2      	bgt.n	800a106 <_printf_i+0x212>
 800a120:	e7eb      	b.n	800a0fa <_printf_i+0x206>
 800a122:	2500      	movs	r5, #0
 800a124:	f104 0619 	add.w	r6, r4, #25
 800a128:	e7f5      	b.n	800a116 <_printf_i+0x222>
 800a12a:	bf00      	nop
 800a12c:	0800d762 	.word	0x0800d762
 800a130:	0800d773 	.word	0x0800d773

0800a134 <_scanf_float>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	b087      	sub	sp, #28
 800a13a:	4617      	mov	r7, r2
 800a13c:	9303      	str	r3, [sp, #12]
 800a13e:	688b      	ldr	r3, [r1, #8]
 800a140:	1e5a      	subs	r2, r3, #1
 800a142:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a146:	bf81      	itttt	hi
 800a148:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a14c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a150:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a154:	608b      	strhi	r3, [r1, #8]
 800a156:	680b      	ldr	r3, [r1, #0]
 800a158:	460a      	mov	r2, r1
 800a15a:	f04f 0500 	mov.w	r5, #0
 800a15e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a162:	f842 3b1c 	str.w	r3, [r2], #28
 800a166:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a16a:	4680      	mov	r8, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	bf98      	it	ls
 800a170:	f04f 0b00 	movls.w	fp, #0
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	4616      	mov	r6, r2
 800a178:	46aa      	mov	sl, r5
 800a17a:	46a9      	mov	r9, r5
 800a17c:	9502      	str	r5, [sp, #8]
 800a17e:	68a2      	ldr	r2, [r4, #8]
 800a180:	b152      	cbz	r2, 800a198 <_scanf_float+0x64>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b4e      	cmp	r3, #78	@ 0x4e
 800a188:	d864      	bhi.n	800a254 <_scanf_float+0x120>
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d83c      	bhi.n	800a208 <_scanf_float+0xd4>
 800a18e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a192:	b2c8      	uxtb	r0, r1
 800a194:	280e      	cmp	r0, #14
 800a196:	d93a      	bls.n	800a20e <_scanf_float+0xda>
 800a198:	f1b9 0f00 	cmp.w	r9, #0
 800a19c:	d003      	beq.n	800a1a6 <_scanf_float+0x72>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1aa:	f1ba 0f01 	cmp.w	sl, #1
 800a1ae:	f200 8117 	bhi.w	800a3e0 <_scanf_float+0x2ac>
 800a1b2:	9b01      	ldr	r3, [sp, #4]
 800a1b4:	429e      	cmp	r6, r3
 800a1b6:	f200 8108 	bhi.w	800a3ca <_scanf_float+0x296>
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	b007      	add	sp, #28
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a1c6:	2a0d      	cmp	r2, #13
 800a1c8:	d8e6      	bhi.n	800a198 <_scanf_float+0x64>
 800a1ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a1d0 <_scanf_float+0x9c>)
 800a1cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1d0:	0800a317 	.word	0x0800a317
 800a1d4:	0800a199 	.word	0x0800a199
 800a1d8:	0800a199 	.word	0x0800a199
 800a1dc:	0800a199 	.word	0x0800a199
 800a1e0:	0800a377 	.word	0x0800a377
 800a1e4:	0800a34f 	.word	0x0800a34f
 800a1e8:	0800a199 	.word	0x0800a199
 800a1ec:	0800a199 	.word	0x0800a199
 800a1f0:	0800a325 	.word	0x0800a325
 800a1f4:	0800a199 	.word	0x0800a199
 800a1f8:	0800a199 	.word	0x0800a199
 800a1fc:	0800a199 	.word	0x0800a199
 800a200:	0800a199 	.word	0x0800a199
 800a204:	0800a2dd 	.word	0x0800a2dd
 800a208:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a20c:	e7db      	b.n	800a1c6 <_scanf_float+0x92>
 800a20e:	290e      	cmp	r1, #14
 800a210:	d8c2      	bhi.n	800a198 <_scanf_float+0x64>
 800a212:	a001      	add	r0, pc, #4	@ (adr r0, 800a218 <_scanf_float+0xe4>)
 800a214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a218:	0800a2cd 	.word	0x0800a2cd
 800a21c:	0800a199 	.word	0x0800a199
 800a220:	0800a2cd 	.word	0x0800a2cd
 800a224:	0800a363 	.word	0x0800a363
 800a228:	0800a199 	.word	0x0800a199
 800a22c:	0800a275 	.word	0x0800a275
 800a230:	0800a2b3 	.word	0x0800a2b3
 800a234:	0800a2b3 	.word	0x0800a2b3
 800a238:	0800a2b3 	.word	0x0800a2b3
 800a23c:	0800a2b3 	.word	0x0800a2b3
 800a240:	0800a2b3 	.word	0x0800a2b3
 800a244:	0800a2b3 	.word	0x0800a2b3
 800a248:	0800a2b3 	.word	0x0800a2b3
 800a24c:	0800a2b3 	.word	0x0800a2b3
 800a250:	0800a2b3 	.word	0x0800a2b3
 800a254:	2b6e      	cmp	r3, #110	@ 0x6e
 800a256:	d809      	bhi.n	800a26c <_scanf_float+0x138>
 800a258:	2b60      	cmp	r3, #96	@ 0x60
 800a25a:	d8b2      	bhi.n	800a1c2 <_scanf_float+0x8e>
 800a25c:	2b54      	cmp	r3, #84	@ 0x54
 800a25e:	d07b      	beq.n	800a358 <_scanf_float+0x224>
 800a260:	2b59      	cmp	r3, #89	@ 0x59
 800a262:	d199      	bne.n	800a198 <_scanf_float+0x64>
 800a264:	2d07      	cmp	r5, #7
 800a266:	d197      	bne.n	800a198 <_scanf_float+0x64>
 800a268:	2508      	movs	r5, #8
 800a26a:	e02c      	b.n	800a2c6 <_scanf_float+0x192>
 800a26c:	2b74      	cmp	r3, #116	@ 0x74
 800a26e:	d073      	beq.n	800a358 <_scanf_float+0x224>
 800a270:	2b79      	cmp	r3, #121	@ 0x79
 800a272:	e7f6      	b.n	800a262 <_scanf_float+0x12e>
 800a274:	6821      	ldr	r1, [r4, #0]
 800a276:	05c8      	lsls	r0, r1, #23
 800a278:	d51b      	bpl.n	800a2b2 <_scanf_float+0x17e>
 800a27a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a27e:	6021      	str	r1, [r4, #0]
 800a280:	f109 0901 	add.w	r9, r9, #1
 800a284:	f1bb 0f00 	cmp.w	fp, #0
 800a288:	d003      	beq.n	800a292 <_scanf_float+0x15e>
 800a28a:	3201      	adds	r2, #1
 800a28c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a290:	60a2      	str	r2, [r4, #8]
 800a292:	68a3      	ldr	r3, [r4, #8]
 800a294:	3b01      	subs	r3, #1
 800a296:	60a3      	str	r3, [r4, #8]
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	3301      	adds	r3, #1
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	607b      	str	r3, [r7, #4]
 800a2a6:	f340 8087 	ble.w	800a3b8 <_scanf_float+0x284>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e765      	b.n	800a17e <_scanf_float+0x4a>
 800a2b2:	eb1a 0105 	adds.w	r1, sl, r5
 800a2b6:	f47f af6f 	bne.w	800a198 <_scanf_float+0x64>
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	468a      	mov	sl, r1
 800a2c6:	f806 3b01 	strb.w	r3, [r6], #1
 800a2ca:	e7e2      	b.n	800a292 <_scanf_float+0x15e>
 800a2cc:	6822      	ldr	r2, [r4, #0]
 800a2ce:	0610      	lsls	r0, r2, #24
 800a2d0:	f57f af62 	bpl.w	800a198 <_scanf_float+0x64>
 800a2d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	e7f4      	b.n	800a2c6 <_scanf_float+0x192>
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	d10e      	bne.n	800a300 <_scanf_float+0x1cc>
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	d10e      	bne.n	800a306 <_scanf_float+0x1d2>
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2f2:	d108      	bne.n	800a306 <_scanf_float+0x1d2>
 800a2f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	f04f 0a01 	mov.w	sl, #1
 800a2fe:	e7e2      	b.n	800a2c6 <_scanf_float+0x192>
 800a300:	f1ba 0f02 	cmp.w	sl, #2
 800a304:	d055      	beq.n	800a3b2 <_scanf_float+0x27e>
 800a306:	2d01      	cmp	r5, #1
 800a308:	d002      	beq.n	800a310 <_scanf_float+0x1dc>
 800a30a:	2d04      	cmp	r5, #4
 800a30c:	f47f af44 	bne.w	800a198 <_scanf_float+0x64>
 800a310:	3501      	adds	r5, #1
 800a312:	b2ed      	uxtb	r5, r5
 800a314:	e7d7      	b.n	800a2c6 <_scanf_float+0x192>
 800a316:	f1ba 0f01 	cmp.w	sl, #1
 800a31a:	f47f af3d 	bne.w	800a198 <_scanf_float+0x64>
 800a31e:	f04f 0a02 	mov.w	sl, #2
 800a322:	e7d0      	b.n	800a2c6 <_scanf_float+0x192>
 800a324:	b97d      	cbnz	r5, 800a346 <_scanf_float+0x212>
 800a326:	f1b9 0f00 	cmp.w	r9, #0
 800a32a:	f47f af38 	bne.w	800a19e <_scanf_float+0x6a>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a334:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a338:	f040 8108 	bne.w	800a54c <_scanf_float+0x418>
 800a33c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a340:	6022      	str	r2, [r4, #0]
 800a342:	2501      	movs	r5, #1
 800a344:	e7bf      	b.n	800a2c6 <_scanf_float+0x192>
 800a346:	2d03      	cmp	r5, #3
 800a348:	d0e2      	beq.n	800a310 <_scanf_float+0x1dc>
 800a34a:	2d05      	cmp	r5, #5
 800a34c:	e7de      	b.n	800a30c <_scanf_float+0x1d8>
 800a34e:	2d02      	cmp	r5, #2
 800a350:	f47f af22 	bne.w	800a198 <_scanf_float+0x64>
 800a354:	2503      	movs	r5, #3
 800a356:	e7b6      	b.n	800a2c6 <_scanf_float+0x192>
 800a358:	2d06      	cmp	r5, #6
 800a35a:	f47f af1d 	bne.w	800a198 <_scanf_float+0x64>
 800a35e:	2507      	movs	r5, #7
 800a360:	e7b1      	b.n	800a2c6 <_scanf_float+0x192>
 800a362:	6822      	ldr	r2, [r4, #0]
 800a364:	0591      	lsls	r1, r2, #22
 800a366:	f57f af17 	bpl.w	800a198 <_scanf_float+0x64>
 800a36a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	f8cd 9008 	str.w	r9, [sp, #8]
 800a374:	e7a7      	b.n	800a2c6 <_scanf_float+0x192>
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a37c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a380:	d006      	beq.n	800a390 <_scanf_float+0x25c>
 800a382:	0550      	lsls	r0, r2, #21
 800a384:	f57f af08 	bpl.w	800a198 <_scanf_float+0x64>
 800a388:	f1b9 0f00 	cmp.w	r9, #0
 800a38c:	f000 80de 	beq.w	800a54c <_scanf_float+0x418>
 800a390:	0591      	lsls	r1, r2, #22
 800a392:	bf58      	it	pl
 800a394:	9902      	ldrpl	r1, [sp, #8]
 800a396:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a39a:	bf58      	it	pl
 800a39c:	eba9 0101 	subpl.w	r1, r9, r1
 800a3a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a3a4:	bf58      	it	pl
 800a3a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a3aa:	6022      	str	r2, [r4, #0]
 800a3ac:	f04f 0900 	mov.w	r9, #0
 800a3b0:	e789      	b.n	800a2c6 <_scanf_float+0x192>
 800a3b2:	f04f 0a03 	mov.w	sl, #3
 800a3b6:	e786      	b.n	800a2c6 <_scanf_float+0x192>
 800a3b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4798      	blx	r3
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f43f aedb 	beq.w	800a17e <_scanf_float+0x4a>
 800a3c8:	e6e6      	b.n	800a198 <_scanf_float+0x64>
 800a3ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4798      	blx	r3
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	e6e8      	b.n	800a1b2 <_scanf_float+0x7e>
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d824      	bhi.n	800a430 <_scanf_float+0x2fc>
 800a3e6:	2d02      	cmp	r5, #2
 800a3e8:	d836      	bhi.n	800a458 <_scanf_float+0x324>
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	429e      	cmp	r6, r3
 800a3ee:	f67f aee4 	bls.w	800a1ba <_scanf_float+0x86>
 800a3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3fa:	463a      	mov	r2, r7
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4798      	blx	r3
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	3b01      	subs	r3, #1
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	e7f0      	b.n	800a3ea <_scanf_float+0x2b6>
 800a408:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a40c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a410:	463a      	mov	r2, r7
 800a412:	4640      	mov	r0, r8
 800a414:	4798      	blx	r3
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	3b01      	subs	r3, #1
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a420:	fa5f fa8a 	uxtb.w	sl, sl
 800a424:	f1ba 0f02 	cmp.w	sl, #2
 800a428:	d1ee      	bne.n	800a408 <_scanf_float+0x2d4>
 800a42a:	3d03      	subs	r5, #3
 800a42c:	b2ed      	uxtb	r5, r5
 800a42e:	1b76      	subs	r6, r6, r5
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	05da      	lsls	r2, r3, #23
 800a434:	d530      	bpl.n	800a498 <_scanf_float+0x364>
 800a436:	055b      	lsls	r3, r3, #21
 800a438:	d511      	bpl.n	800a45e <_scanf_float+0x32a>
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	429e      	cmp	r6, r3
 800a43e:	f67f aebc 	bls.w	800a1ba <_scanf_float+0x86>
 800a442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a44a:	463a      	mov	r2, r7
 800a44c:	4640      	mov	r0, r8
 800a44e:	4798      	blx	r3
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	3b01      	subs	r3, #1
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	e7f0      	b.n	800a43a <_scanf_float+0x306>
 800a458:	46aa      	mov	sl, r5
 800a45a:	46b3      	mov	fp, r6
 800a45c:	e7de      	b.n	800a41c <_scanf_float+0x2e8>
 800a45e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	2965      	cmp	r1, #101	@ 0x65
 800a466:	f103 33ff 	add.w	r3, r3, #4294967295
 800a46a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	d00c      	beq.n	800a48c <_scanf_float+0x358>
 800a472:	2945      	cmp	r1, #69	@ 0x45
 800a474:	d00a      	beq.n	800a48c <_scanf_float+0x358>
 800a476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a47a:	463a      	mov	r2, r7
 800a47c:	4640      	mov	r0, r8
 800a47e:	4798      	blx	r3
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a486:	3b01      	subs	r3, #1
 800a488:	1eb5      	subs	r5, r6, #2
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a490:	463a      	mov	r2, r7
 800a492:	4640      	mov	r0, r8
 800a494:	4798      	blx	r3
 800a496:	462e      	mov	r6, r5
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	f012 0210 	ands.w	r2, r2, #16
 800a49e:	d001      	beq.n	800a4a4 <_scanf_float+0x370>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	e68b      	b.n	800a1bc <_scanf_float+0x88>
 800a4a4:	7032      	strb	r2, [r6, #0]
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a4ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4b0:	d11c      	bne.n	800a4ec <_scanf_float+0x3b8>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	454b      	cmp	r3, r9
 800a4b6:	eba3 0209 	sub.w	r2, r3, r9
 800a4ba:	d123      	bne.n	800a504 <_scanf_float+0x3d0>
 800a4bc:	9901      	ldr	r1, [sp, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f7ff f975 	bl	80097b0 <_strtod_r>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	6821      	ldr	r1, [r4, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f011 0f02 	tst.w	r1, #2
 800a4d0:	ec57 6b10 	vmov	r6, r7, d0
 800a4d4:	f103 0204 	add.w	r2, r3, #4
 800a4d8:	d01f      	beq.n	800a51a <_scanf_float+0x3e6>
 800a4da:	9903      	ldr	r1, [sp, #12]
 800a4dc:	600a      	str	r2, [r1, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	e9c3 6700 	strd	r6, r7, [r3]
 800a4e4:	68e3      	ldr	r3, [r4, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	60e3      	str	r3, [r4, #12]
 800a4ea:	e7d9      	b.n	800a4a0 <_scanf_float+0x36c>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0e4      	beq.n	800a4bc <_scanf_float+0x388>
 800a4f2:	9905      	ldr	r1, [sp, #20]
 800a4f4:	230a      	movs	r3, #10
 800a4f6:	3101      	adds	r1, #1
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	f002 fabb 	bl	800ca74 <_strtol_r>
 800a4fe:	9b04      	ldr	r3, [sp, #16]
 800a500:	9e05      	ldr	r6, [sp, #20]
 800a502:	1ac2      	subs	r2, r0, r3
 800a504:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a508:	429e      	cmp	r6, r3
 800a50a:	bf28      	it	cs
 800a50c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a510:	4910      	ldr	r1, [pc, #64]	@ (800a554 <_scanf_float+0x420>)
 800a512:	4630      	mov	r0, r6
 800a514:	f000 f954 	bl	800a7c0 <siprintf>
 800a518:	e7d0      	b.n	800a4bc <_scanf_float+0x388>
 800a51a:	f011 0f04 	tst.w	r1, #4
 800a51e:	9903      	ldr	r1, [sp, #12]
 800a520:	600a      	str	r2, [r1, #0]
 800a522:	d1dc      	bne.n	800a4de <_scanf_float+0x3aa>
 800a524:	681d      	ldr	r5, [r3, #0]
 800a526:	4632      	mov	r2, r6
 800a528:	463b      	mov	r3, r7
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 fb05 	bl	8000b3c <__aeabi_dcmpun>
 800a532:	b128      	cbz	r0, 800a540 <_scanf_float+0x40c>
 800a534:	4808      	ldr	r0, [pc, #32]	@ (800a558 <_scanf_float+0x424>)
 800a536:	f000 fb6b 	bl	800ac10 <nanf>
 800a53a:	ed85 0a00 	vstr	s0, [r5]
 800a53e:	e7d1      	b.n	800a4e4 <_scanf_float+0x3b0>
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f6 fb58 	bl	8000bf8 <__aeabi_d2f>
 800a548:	6028      	str	r0, [r5, #0]
 800a54a:	e7cb      	b.n	800a4e4 <_scanf_float+0x3b0>
 800a54c:	f04f 0900 	mov.w	r9, #0
 800a550:	e629      	b.n	800a1a6 <_scanf_float+0x72>
 800a552:	bf00      	nop
 800a554:	0800d784 	.word	0x0800d784
 800a558:	0800d83d 	.word	0x0800d83d

0800a55c <std>:
 800a55c:	2300      	movs	r3, #0
 800a55e:	b510      	push	{r4, lr}
 800a560:	4604      	mov	r4, r0
 800a562:	e9c0 3300 	strd	r3, r3, [r0]
 800a566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a56a:	6083      	str	r3, [r0, #8]
 800a56c:	8181      	strh	r1, [r0, #12]
 800a56e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a570:	81c2      	strh	r2, [r0, #14]
 800a572:	6183      	str	r3, [r0, #24]
 800a574:	4619      	mov	r1, r3
 800a576:	2208      	movs	r2, #8
 800a578:	305c      	adds	r0, #92	@ 0x5c
 800a57a:	f000 fa19 	bl	800a9b0 <memset>
 800a57e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b4 <std+0x58>)
 800a580:	6263      	str	r3, [r4, #36]	@ 0x24
 800a582:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b8 <std+0x5c>)
 800a584:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a586:	4b0d      	ldr	r3, [pc, #52]	@ (800a5bc <std+0x60>)
 800a588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a58a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <std+0x64>)
 800a58c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a58e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c4 <std+0x68>)
 800a590:	6224      	str	r4, [r4, #32]
 800a592:	429c      	cmp	r4, r3
 800a594:	d006      	beq.n	800a5a4 <std+0x48>
 800a596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a59a:	4294      	cmp	r4, r2
 800a59c:	d002      	beq.n	800a5a4 <std+0x48>
 800a59e:	33d0      	adds	r3, #208	@ 0xd0
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d105      	bne.n	800a5b0 <std+0x54>
 800a5a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ac:	f000 bb16 	b.w	800abdc <__retarget_lock_init_recursive>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800a801 	.word	0x0800a801
 800a5b8:	0800a823 	.word	0x0800a823
 800a5bc:	0800a85b 	.word	0x0800a85b
 800a5c0:	0800a87f 	.word	0x0800a87f
 800a5c4:	200006a0 	.word	0x200006a0

0800a5c8 <stdio_exit_handler>:
 800a5c8:	4a02      	ldr	r2, [pc, #8]	@ (800a5d4 <stdio_exit_handler+0xc>)
 800a5ca:	4903      	ldr	r1, [pc, #12]	@ (800a5d8 <stdio_exit_handler+0x10>)
 800a5cc:	4803      	ldr	r0, [pc, #12]	@ (800a5dc <stdio_exit_handler+0x14>)
 800a5ce:	f000 b869 	b.w	800a6a4 <_fwalk_sglue>
 800a5d2:	bf00      	nop
 800a5d4:	20000020 	.word	0x20000020
 800a5d8:	0800d0cd 	.word	0x0800d0cd
 800a5dc:	2000019c 	.word	0x2000019c

0800a5e0 <cleanup_stdio>:
 800a5e0:	6841      	ldr	r1, [r0, #4]
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a614 <cleanup_stdio+0x34>)
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	d001      	beq.n	800a5f0 <cleanup_stdio+0x10>
 800a5ec:	f002 fd6e 	bl	800d0cc <_fflush_r>
 800a5f0:	68a1      	ldr	r1, [r4, #8]
 800a5f2:	4b09      	ldr	r3, [pc, #36]	@ (800a618 <cleanup_stdio+0x38>)
 800a5f4:	4299      	cmp	r1, r3
 800a5f6:	d002      	beq.n	800a5fe <cleanup_stdio+0x1e>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f002 fd67 	bl	800d0cc <_fflush_r>
 800a5fe:	68e1      	ldr	r1, [r4, #12]
 800a600:	4b06      	ldr	r3, [pc, #24]	@ (800a61c <cleanup_stdio+0x3c>)
 800a602:	4299      	cmp	r1, r3
 800a604:	d004      	beq.n	800a610 <cleanup_stdio+0x30>
 800a606:	4620      	mov	r0, r4
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60c:	f002 bd5e 	b.w	800d0cc <_fflush_r>
 800a610:	bd10      	pop	{r4, pc}
 800a612:	bf00      	nop
 800a614:	200006a0 	.word	0x200006a0
 800a618:	20000708 	.word	0x20000708
 800a61c:	20000770 	.word	0x20000770

0800a620 <global_stdio_init.part.0>:
 800a620:	b510      	push	{r4, lr}
 800a622:	4b0b      	ldr	r3, [pc, #44]	@ (800a650 <global_stdio_init.part.0+0x30>)
 800a624:	4c0b      	ldr	r4, [pc, #44]	@ (800a654 <global_stdio_init.part.0+0x34>)
 800a626:	4a0c      	ldr	r2, [pc, #48]	@ (800a658 <global_stdio_init.part.0+0x38>)
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	4620      	mov	r0, r4
 800a62c:	2200      	movs	r2, #0
 800a62e:	2104      	movs	r1, #4
 800a630:	f7ff ff94 	bl	800a55c <std>
 800a634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a638:	2201      	movs	r2, #1
 800a63a:	2109      	movs	r1, #9
 800a63c:	f7ff ff8e 	bl	800a55c <std>
 800a640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a644:	2202      	movs	r2, #2
 800a646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64a:	2112      	movs	r1, #18
 800a64c:	f7ff bf86 	b.w	800a55c <std>
 800a650:	200007d8 	.word	0x200007d8
 800a654:	200006a0 	.word	0x200006a0
 800a658:	0800a5c9 	.word	0x0800a5c9

0800a65c <__sfp_lock_acquire>:
 800a65c:	4801      	ldr	r0, [pc, #4]	@ (800a664 <__sfp_lock_acquire+0x8>)
 800a65e:	f000 babe 	b.w	800abde <__retarget_lock_acquire_recursive>
 800a662:	bf00      	nop
 800a664:	200007e1 	.word	0x200007e1

0800a668 <__sfp_lock_release>:
 800a668:	4801      	ldr	r0, [pc, #4]	@ (800a670 <__sfp_lock_release+0x8>)
 800a66a:	f000 bab9 	b.w	800abe0 <__retarget_lock_release_recursive>
 800a66e:	bf00      	nop
 800a670:	200007e1 	.word	0x200007e1

0800a674 <__sinit>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	f7ff fff0 	bl	800a65c <__sfp_lock_acquire>
 800a67c:	6a23      	ldr	r3, [r4, #32]
 800a67e:	b11b      	cbz	r3, 800a688 <__sinit+0x14>
 800a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a684:	f7ff bff0 	b.w	800a668 <__sfp_lock_release>
 800a688:	4b04      	ldr	r3, [pc, #16]	@ (800a69c <__sinit+0x28>)
 800a68a:	6223      	str	r3, [r4, #32]
 800a68c:	4b04      	ldr	r3, [pc, #16]	@ (800a6a0 <__sinit+0x2c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1f5      	bne.n	800a680 <__sinit+0xc>
 800a694:	f7ff ffc4 	bl	800a620 <global_stdio_init.part.0>
 800a698:	e7f2      	b.n	800a680 <__sinit+0xc>
 800a69a:	bf00      	nop
 800a69c:	0800a5e1 	.word	0x0800a5e1
 800a6a0:	200007d8 	.word	0x200007d8

0800a6a4 <_fwalk_sglue>:
 800a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	4688      	mov	r8, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	2600      	movs	r6, #0
 800a6b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a6b8:	d505      	bpl.n	800a6c6 <_fwalk_sglue+0x22>
 800a6ba:	6824      	ldr	r4, [r4, #0]
 800a6bc:	2c00      	cmp	r4, #0
 800a6be:	d1f7      	bne.n	800a6b0 <_fwalk_sglue+0xc>
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c6:	89ab      	ldrh	r3, [r5, #12]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d907      	bls.n	800a6dc <_fwalk_sglue+0x38>
 800a6cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	d003      	beq.n	800a6dc <_fwalk_sglue+0x38>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	47c0      	blx	r8
 800a6da:	4306      	orrs	r6, r0
 800a6dc:	3568      	adds	r5, #104	@ 0x68
 800a6de:	e7e9      	b.n	800a6b4 <_fwalk_sglue+0x10>

0800a6e0 <iprintf>:
 800a6e0:	b40f      	push	{r0, r1, r2, r3}
 800a6e2:	b507      	push	{r0, r1, r2, lr}
 800a6e4:	4906      	ldr	r1, [pc, #24]	@ (800a700 <iprintf+0x20>)
 800a6e6:	ab04      	add	r3, sp, #16
 800a6e8:	6808      	ldr	r0, [r1, #0]
 800a6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ee:	6881      	ldr	r1, [r0, #8]
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	f002 fb4f 	bl	800cd94 <_vfiprintf_r>
 800a6f6:	b003      	add	sp, #12
 800a6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6fc:	b004      	add	sp, #16
 800a6fe:	4770      	bx	lr
 800a700:	20000198 	.word	0x20000198

0800a704 <_puts_r>:
 800a704:	6a03      	ldr	r3, [r0, #32]
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	6884      	ldr	r4, [r0, #8]
 800a70a:	4605      	mov	r5, r0
 800a70c:	460e      	mov	r6, r1
 800a70e:	b90b      	cbnz	r3, 800a714 <_puts_r+0x10>
 800a710:	f7ff ffb0 	bl	800a674 <__sinit>
 800a714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a716:	07db      	lsls	r3, r3, #31
 800a718:	d405      	bmi.n	800a726 <_puts_r+0x22>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	0598      	lsls	r0, r3, #22
 800a71e:	d402      	bmi.n	800a726 <_puts_r+0x22>
 800a720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a722:	f000 fa5c 	bl	800abde <__retarget_lock_acquire_recursive>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	0719      	lsls	r1, r3, #28
 800a72a:	d502      	bpl.n	800a732 <_puts_r+0x2e>
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d135      	bne.n	800a79e <_puts_r+0x9a>
 800a732:	4621      	mov	r1, r4
 800a734:	4628      	mov	r0, r5
 800a736:	f000 f8e5 	bl	800a904 <__swsetup_r>
 800a73a:	b380      	cbz	r0, 800a79e <_puts_r+0x9a>
 800a73c:	f04f 35ff 	mov.w	r5, #4294967295
 800a740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a742:	07da      	lsls	r2, r3, #31
 800a744:	d405      	bmi.n	800a752 <_puts_r+0x4e>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	059b      	lsls	r3, r3, #22
 800a74a:	d402      	bmi.n	800a752 <_puts_r+0x4e>
 800a74c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a74e:	f000 fa47 	bl	800abe0 <__retarget_lock_release_recursive>
 800a752:	4628      	mov	r0, r5
 800a754:	bd70      	pop	{r4, r5, r6, pc}
 800a756:	2b00      	cmp	r3, #0
 800a758:	da04      	bge.n	800a764 <_puts_r+0x60>
 800a75a:	69a2      	ldr	r2, [r4, #24]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	dc17      	bgt.n	800a790 <_puts_r+0x8c>
 800a760:	290a      	cmp	r1, #10
 800a762:	d015      	beq.n	800a790 <_puts_r+0x8c>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	7019      	strb	r1, [r3, #0]
 800a76c:	68a3      	ldr	r3, [r4, #8]
 800a76e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a772:	3b01      	subs	r3, #1
 800a774:	60a3      	str	r3, [r4, #8]
 800a776:	2900      	cmp	r1, #0
 800a778:	d1ed      	bne.n	800a756 <_puts_r+0x52>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	da11      	bge.n	800a7a2 <_puts_r+0x9e>
 800a77e:	4622      	mov	r2, r4
 800a780:	210a      	movs	r1, #10
 800a782:	4628      	mov	r0, r5
 800a784:	f000 f87f 	bl	800a886 <__swbuf_r>
 800a788:	3001      	adds	r0, #1
 800a78a:	d0d7      	beq.n	800a73c <_puts_r+0x38>
 800a78c:	250a      	movs	r5, #10
 800a78e:	e7d7      	b.n	800a740 <_puts_r+0x3c>
 800a790:	4622      	mov	r2, r4
 800a792:	4628      	mov	r0, r5
 800a794:	f000 f877 	bl	800a886 <__swbuf_r>
 800a798:	3001      	adds	r0, #1
 800a79a:	d1e7      	bne.n	800a76c <_puts_r+0x68>
 800a79c:	e7ce      	b.n	800a73c <_puts_r+0x38>
 800a79e:	3e01      	subs	r6, #1
 800a7a0:	e7e4      	b.n	800a76c <_puts_r+0x68>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	6022      	str	r2, [r4, #0]
 800a7a8:	220a      	movs	r2, #10
 800a7aa:	701a      	strb	r2, [r3, #0]
 800a7ac:	e7ee      	b.n	800a78c <_puts_r+0x88>
	...

0800a7b0 <puts>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	@ (800a7bc <puts+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f7ff bfa5 	b.w	800a704 <_puts_r>
 800a7ba:	bf00      	nop
 800a7bc:	20000198 	.word	0x20000198

0800a7c0 <siprintf>:
 800a7c0:	b40e      	push	{r1, r2, r3}
 800a7c2:	b500      	push	{lr}
 800a7c4:	b09c      	sub	sp, #112	@ 0x70
 800a7c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7c8:	9002      	str	r0, [sp, #8]
 800a7ca:	9006      	str	r0, [sp, #24]
 800a7cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7d0:	4809      	ldr	r0, [pc, #36]	@ (800a7f8 <siprintf+0x38>)
 800a7d2:	9107      	str	r1, [sp, #28]
 800a7d4:	9104      	str	r1, [sp, #16]
 800a7d6:	4909      	ldr	r1, [pc, #36]	@ (800a7fc <siprintf+0x3c>)
 800a7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7dc:	9105      	str	r1, [sp, #20]
 800a7de:	6800      	ldr	r0, [r0, #0]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	a902      	add	r1, sp, #8
 800a7e4:	f002 f9b0 	bl	800cb48 <_svfiprintf_r>
 800a7e8:	9b02      	ldr	r3, [sp, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	b01c      	add	sp, #112	@ 0x70
 800a7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f4:	b003      	add	sp, #12
 800a7f6:	4770      	bx	lr
 800a7f8:	20000198 	.word	0x20000198
 800a7fc:	ffff0208 	.word	0xffff0208

0800a800 <__sread>:
 800a800:	b510      	push	{r4, lr}
 800a802:	460c      	mov	r4, r1
 800a804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a808:	f000 f98a 	bl	800ab20 <_read_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	bfab      	itete	ge
 800a810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a812:	89a3      	ldrhlt	r3, [r4, #12]
 800a814:	181b      	addge	r3, r3, r0
 800a816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a81a:	bfac      	ite	ge
 800a81c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a81e:	81a3      	strhlt	r3, [r4, #12]
 800a820:	bd10      	pop	{r4, pc}

0800a822 <__swrite>:
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a826:	461f      	mov	r7, r3
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	05db      	lsls	r3, r3, #23
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	4616      	mov	r6, r2
 800a832:	d505      	bpl.n	800a840 <__swrite+0x1e>
 800a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a838:	2302      	movs	r3, #2
 800a83a:	2200      	movs	r2, #0
 800a83c:	f000 f95e 	bl	800aafc <_lseek_r>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	f000 b985 	b.w	800ab64 <_write_r>

0800a85a <__sseek>:
 800a85a:	b510      	push	{r4, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 f94b 	bl	800aafc <_lseek_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	bf15      	itete	ne
 800a86c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a86e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a876:	81a3      	strheq	r3, [r4, #12]
 800a878:	bf18      	it	ne
 800a87a:	81a3      	strhne	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__sclose>:
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 b92b 	b.w	800aadc <_close_r>

0800a886 <__swbuf_r>:
 800a886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a888:	460e      	mov	r6, r1
 800a88a:	4614      	mov	r4, r2
 800a88c:	4605      	mov	r5, r0
 800a88e:	b118      	cbz	r0, 800a898 <__swbuf_r+0x12>
 800a890:	6a03      	ldr	r3, [r0, #32]
 800a892:	b90b      	cbnz	r3, 800a898 <__swbuf_r+0x12>
 800a894:	f7ff feee 	bl	800a674 <__sinit>
 800a898:	69a3      	ldr	r3, [r4, #24]
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	071a      	lsls	r2, r3, #28
 800a8a0:	d501      	bpl.n	800a8a6 <__swbuf_r+0x20>
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	b943      	cbnz	r3, 800a8b8 <__swbuf_r+0x32>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 f82b 	bl	800a904 <__swsetup_r>
 800a8ae:	b118      	cbz	r0, 800a8b8 <__swbuf_r+0x32>
 800a8b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	6922      	ldr	r2, [r4, #16]
 800a8bc:	1a98      	subs	r0, r3, r2
 800a8be:	6963      	ldr	r3, [r4, #20]
 800a8c0:	b2f6      	uxtb	r6, r6
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	4637      	mov	r7, r6
 800a8c6:	dc05      	bgt.n	800a8d4 <__swbuf_r+0x4e>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f002 fbfe 	bl	800d0cc <_fflush_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1ed      	bne.n	800a8b0 <__swbuf_r+0x2a>
 800a8d4:	68a3      	ldr	r3, [r4, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	60a3      	str	r3, [r4, #8]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	701e      	strb	r6, [r3, #0]
 800a8e2:	6962      	ldr	r2, [r4, #20]
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d004      	beq.n	800a8f4 <__swbuf_r+0x6e>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	07db      	lsls	r3, r3, #31
 800a8ee:	d5e1      	bpl.n	800a8b4 <__swbuf_r+0x2e>
 800a8f0:	2e0a      	cmp	r6, #10
 800a8f2:	d1df      	bne.n	800a8b4 <__swbuf_r+0x2e>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f002 fbe8 	bl	800d0cc <_fflush_r>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0d9      	beq.n	800a8b4 <__swbuf_r+0x2e>
 800a900:	e7d6      	b.n	800a8b0 <__swbuf_r+0x2a>
	...

0800a904 <__swsetup_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4b29      	ldr	r3, [pc, #164]	@ (800a9ac <__swsetup_r+0xa8>)
 800a908:	4605      	mov	r5, r0
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	460c      	mov	r4, r1
 800a90e:	b118      	cbz	r0, 800a918 <__swsetup_r+0x14>
 800a910:	6a03      	ldr	r3, [r0, #32]
 800a912:	b90b      	cbnz	r3, 800a918 <__swsetup_r+0x14>
 800a914:	f7ff feae 	bl	800a674 <__sinit>
 800a918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91c:	0719      	lsls	r1, r3, #28
 800a91e:	d422      	bmi.n	800a966 <__swsetup_r+0x62>
 800a920:	06da      	lsls	r2, r3, #27
 800a922:	d407      	bmi.n	800a934 <__swsetup_r+0x30>
 800a924:	2209      	movs	r2, #9
 800a926:	602a      	str	r2, [r5, #0]
 800a928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	f04f 30ff 	mov.w	r0, #4294967295
 800a932:	e033      	b.n	800a99c <__swsetup_r+0x98>
 800a934:	0758      	lsls	r0, r3, #29
 800a936:	d512      	bpl.n	800a95e <__swsetup_r+0x5a>
 800a938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a93a:	b141      	cbz	r1, 800a94e <__swsetup_r+0x4a>
 800a93c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a940:	4299      	cmp	r1, r3
 800a942:	d002      	beq.n	800a94a <__swsetup_r+0x46>
 800a944:	4628      	mov	r0, r5
 800a946:	f000 ffd3 	bl	800b8f0 <_free_r>
 800a94a:	2300      	movs	r3, #0
 800a94c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	2300      	movs	r3, #0
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f043 0308 	orr.w	r3, r3, #8
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	b94b      	cbnz	r3, 800a97e <__swsetup_r+0x7a>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a974:	d003      	beq.n	800a97e <__swsetup_r+0x7a>
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f002 fc07 	bl	800d18c <__smakebuf_r>
 800a97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a982:	f013 0201 	ands.w	r2, r3, #1
 800a986:	d00a      	beq.n	800a99e <__swsetup_r+0x9a>
 800a988:	2200      	movs	r2, #0
 800a98a:	60a2      	str	r2, [r4, #8]
 800a98c:	6962      	ldr	r2, [r4, #20]
 800a98e:	4252      	negs	r2, r2
 800a990:	61a2      	str	r2, [r4, #24]
 800a992:	6922      	ldr	r2, [r4, #16]
 800a994:	b942      	cbnz	r2, 800a9a8 <__swsetup_r+0xa4>
 800a996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a99a:	d1c5      	bne.n	800a928 <__swsetup_r+0x24>
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	0799      	lsls	r1, r3, #30
 800a9a0:	bf58      	it	pl
 800a9a2:	6962      	ldrpl	r2, [r4, #20]
 800a9a4:	60a2      	str	r2, [r4, #8]
 800a9a6:	e7f4      	b.n	800a992 <__swsetup_r+0x8e>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e7f7      	b.n	800a99c <__swsetup_r+0x98>
 800a9ac:	20000198 	.word	0x20000198

0800a9b0 <memset>:
 800a9b0:	4402      	add	r2, r0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d100      	bne.n	800a9ba <memset+0xa>
 800a9b8:	4770      	bx	lr
 800a9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a9be:	e7f9      	b.n	800a9b4 <memset+0x4>

0800a9c0 <strdup>:
 800a9c0:	4b02      	ldr	r3, [pc, #8]	@ (800a9cc <strdup+0xc>)
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	6818      	ldr	r0, [r3, #0]
 800a9c6:	f000 b803 	b.w	800a9d0 <_strdup_r>
 800a9ca:	bf00      	nop
 800a9cc:	20000198 	.word	0x20000198

0800a9d0 <_strdup_r>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	f7f5 fc52 	bl	8000280 <strlen>
 800a9dc:	1c46      	adds	r6, r0, #1
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7fe f857 	bl	8008a94 <_malloc_r>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	b118      	cbz	r0, 800a9f2 <_strdup_r+0x22>
 800a9ea:	4632      	mov	r2, r6
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f000 f8f8 	bl	800abe2 <memcpy>
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}

0800a9f6 <strncmp>:
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	b16a      	cbz	r2, 800aa16 <strncmp+0x20>
 800a9fa:	3901      	subs	r1, #1
 800a9fc:	1884      	adds	r4, r0, r2
 800a9fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d103      	bne.n	800aa12 <strncmp+0x1c>
 800aa0a:	42a0      	cmp	r0, r4
 800aa0c:	d001      	beq.n	800aa12 <strncmp+0x1c>
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	d1f5      	bne.n	800a9fe <strncmp+0x8>
 800aa12:	1ad0      	subs	r0, r2, r3
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	4610      	mov	r0, r2
 800aa18:	e7fc      	b.n	800aa14 <strncmp+0x1e>
	...

0800aa1c <strtok>:
 800aa1c:	4b16      	ldr	r3, [pc, #88]	@ (800aa78 <strtok+0x5c>)
 800aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	681f      	ldr	r7, [r3, #0]
 800aa24:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aa26:	4605      	mov	r5, r0
 800aa28:	460e      	mov	r6, r1
 800aa2a:	b9ec      	cbnz	r4, 800aa68 <strtok+0x4c>
 800aa2c:	2050      	movs	r0, #80	@ 0x50
 800aa2e:	f7fd ffff 	bl	8008a30 <malloc>
 800aa32:	4602      	mov	r2, r0
 800aa34:	6478      	str	r0, [r7, #68]	@ 0x44
 800aa36:	b920      	cbnz	r0, 800aa42 <strtok+0x26>
 800aa38:	4b10      	ldr	r3, [pc, #64]	@ (800aa7c <strtok+0x60>)
 800aa3a:	4811      	ldr	r0, [pc, #68]	@ (800aa80 <strtok+0x64>)
 800aa3c:	215b      	movs	r1, #91	@ 0x5b
 800aa3e:	f000 f8ed 	bl	800ac1c <__assert_func>
 800aa42:	e9c0 4400 	strd	r4, r4, [r0]
 800aa46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aa4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aa4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aa52:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aa56:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800aa5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800aa5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800aa62:	6184      	str	r4, [r0, #24]
 800aa64:	7704      	strb	r4, [r0, #28]
 800aa66:	6244      	str	r4, [r0, #36]	@ 0x24
 800aa68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	f000 b806 	b.w	800aa84 <__strtok_r>
 800aa78:	20000198 	.word	0x20000198
 800aa7c:	0800d789 	.word	0x0800d789
 800aa80:	0800d7a0 	.word	0x0800d7a0

0800aa84 <__strtok_r>:
 800aa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	b908      	cbnz	r0, 800aa8e <__strtok_r+0xa>
 800aa8a:	6814      	ldr	r4, [r2, #0]
 800aa8c:	b144      	cbz	r4, 800aaa0 <__strtok_r+0x1c>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa94:	460f      	mov	r7, r1
 800aa96:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa9a:	b91e      	cbnz	r6, 800aaa4 <__strtok_r+0x20>
 800aa9c:	b965      	cbnz	r5, 800aab8 <__strtok_r+0x34>
 800aa9e:	6015      	str	r5, [r2, #0]
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e005      	b.n	800aab0 <__strtok_r+0x2c>
 800aaa4:	42b5      	cmp	r5, r6
 800aaa6:	d1f6      	bne.n	800aa96 <__strtok_r+0x12>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1f0      	bne.n	800aa8e <__strtok_r+0xa>
 800aaac:	6014      	str	r4, [r2, #0]
 800aaae:	7003      	strb	r3, [r0, #0]
 800aab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aab2:	461c      	mov	r4, r3
 800aab4:	e00c      	b.n	800aad0 <__strtok_r+0x4c>
 800aab6:	b915      	cbnz	r5, 800aabe <__strtok_r+0x3a>
 800aab8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aabc:	460e      	mov	r6, r1
 800aabe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aac2:	42ab      	cmp	r3, r5
 800aac4:	d1f7      	bne.n	800aab6 <__strtok_r+0x32>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f3      	beq.n	800aab2 <__strtok_r+0x2e>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	e7ed      	b.n	800aab0 <__strtok_r+0x2c>

0800aad4 <_localeconv_r>:
 800aad4:	4800      	ldr	r0, [pc, #0]	@ (800aad8 <_localeconv_r+0x4>)
 800aad6:	4770      	bx	lr
 800aad8:	2000011c 	.word	0x2000011c

0800aadc <_close_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d06      	ldr	r5, [pc, #24]	@ (800aaf8 <_close_r+0x1c>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f8 fd5a 	bl	80035a0 <_close>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_close_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_close_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	200007dc 	.word	0x200007dc

0800aafc <_lseek_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d07      	ldr	r5, [pc, #28]	@ (800ab1c <_lseek_r+0x20>)
 800ab00:	4604      	mov	r4, r0
 800ab02:	4608      	mov	r0, r1
 800ab04:	4611      	mov	r1, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	602a      	str	r2, [r5, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f7f8 fd6f 	bl	80035ee <_lseek>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_lseek_r+0x1e>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_lseek_r+0x1e>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	200007dc 	.word	0x200007dc

0800ab20 <_read_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d07      	ldr	r5, [pc, #28]	@ (800ab40 <_read_r+0x20>)
 800ab24:	4604      	mov	r4, r0
 800ab26:	4608      	mov	r0, r1
 800ab28:	4611      	mov	r1, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	602a      	str	r2, [r5, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7f8 fcfd 	bl	800352e <_read>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_read_r+0x1e>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_read_r+0x1e>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	200007dc 	.word	0x200007dc

0800ab44 <_sbrk_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d06      	ldr	r5, [pc, #24]	@ (800ab60 <_sbrk_r+0x1c>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f8 fd5a 	bl	8003608 <_sbrk>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_sbrk_r+0x1a>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_sbrk_r+0x1a>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	200007dc 	.word	0x200007dc

0800ab64 <_write_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4d07      	ldr	r5, [pc, #28]	@ (800ab84 <_write_r+0x20>)
 800ab68:	4604      	mov	r4, r0
 800ab6a:	4608      	mov	r0, r1
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	f7f8 fcf8 	bl	8003568 <_write>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_write_r+0x1e>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_write_r+0x1e>
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	200007dc 	.word	0x200007dc

0800ab88 <__errno>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	@ (800ab90 <__errno+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000198 	.word	0x20000198

0800ab94 <__libc_init_array>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	4d0d      	ldr	r5, [pc, #52]	@ (800abcc <__libc_init_array+0x38>)
 800ab98:	4c0d      	ldr	r4, [pc, #52]	@ (800abd0 <__libc_init_array+0x3c>)
 800ab9a:	1b64      	subs	r4, r4, r5
 800ab9c:	10a4      	asrs	r4, r4, #2
 800ab9e:	2600      	movs	r6, #0
 800aba0:	42a6      	cmp	r6, r4
 800aba2:	d109      	bne.n	800abb8 <__libc_init_array+0x24>
 800aba4:	4d0b      	ldr	r5, [pc, #44]	@ (800abd4 <__libc_init_array+0x40>)
 800aba6:	4c0c      	ldr	r4, [pc, #48]	@ (800abd8 <__libc_init_array+0x44>)
 800aba8:	f002 fbfe 	bl	800d3a8 <_init>
 800abac:	1b64      	subs	r4, r4, r5
 800abae:	10a4      	asrs	r4, r4, #2
 800abb0:	2600      	movs	r6, #0
 800abb2:	42a6      	cmp	r6, r4
 800abb4:	d105      	bne.n	800abc2 <__libc_init_array+0x2e>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abbc:	4798      	blx	r3
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7ee      	b.n	800aba0 <__libc_init_array+0xc>
 800abc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc6:	4798      	blx	r3
 800abc8:	3601      	adds	r6, #1
 800abca:	e7f2      	b.n	800abb2 <__libc_init_array+0x1e>
 800abcc:	0800db8c 	.word	0x0800db8c
 800abd0:	0800db8c 	.word	0x0800db8c
 800abd4:	0800db8c 	.word	0x0800db8c
 800abd8:	0800db90 	.word	0x0800db90

0800abdc <__retarget_lock_init_recursive>:
 800abdc:	4770      	bx	lr

0800abde <__retarget_lock_acquire_recursive>:
 800abde:	4770      	bx	lr

0800abe0 <__retarget_lock_release_recursive>:
 800abe0:	4770      	bx	lr

0800abe2 <memcpy>:
 800abe2:	440a      	add	r2, r1
 800abe4:	4291      	cmp	r1, r2
 800abe6:	f100 33ff 	add.w	r3, r0, #4294967295
 800abea:	d100      	bne.n	800abee <memcpy+0xc>
 800abec:	4770      	bx	lr
 800abee:	b510      	push	{r4, lr}
 800abf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abf8:	4291      	cmp	r1, r2
 800abfa:	d1f9      	bne.n	800abf0 <memcpy+0xe>
 800abfc:	bd10      	pop	{r4, pc}
	...

0800ac00 <nan>:
 800ac00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ac08 <nan+0x8>
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	00000000 	.word	0x00000000
 800ac0c:	7ff80000 	.word	0x7ff80000

0800ac10 <nanf>:
 800ac10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac18 <nanf+0x8>
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	7fc00000 	.word	0x7fc00000

0800ac1c <__assert_func>:
 800ac1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac1e:	4614      	mov	r4, r2
 800ac20:	461a      	mov	r2, r3
 800ac22:	4b09      	ldr	r3, [pc, #36]	@ (800ac48 <__assert_func+0x2c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4605      	mov	r5, r0
 800ac28:	68d8      	ldr	r0, [r3, #12]
 800ac2a:	b954      	cbnz	r4, 800ac42 <__assert_func+0x26>
 800ac2c:	4b07      	ldr	r3, [pc, #28]	@ (800ac4c <__assert_func+0x30>)
 800ac2e:	461c      	mov	r4, r3
 800ac30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac34:	9100      	str	r1, [sp, #0]
 800ac36:	462b      	mov	r3, r5
 800ac38:	4905      	ldr	r1, [pc, #20]	@ (800ac50 <__assert_func+0x34>)
 800ac3a:	f002 fa6f 	bl	800d11c <fiprintf>
 800ac3e:	f002 fb1d 	bl	800d27c <abort>
 800ac42:	4b04      	ldr	r3, [pc, #16]	@ (800ac54 <__assert_func+0x38>)
 800ac44:	e7f4      	b.n	800ac30 <__assert_func+0x14>
 800ac46:	bf00      	nop
 800ac48:	20000198 	.word	0x20000198
 800ac4c:	0800d83d 	.word	0x0800d83d
 800ac50:	0800d80f 	.word	0x0800d80f
 800ac54:	0800d802 	.word	0x0800d802

0800ac58 <quorem>:
 800ac58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	6903      	ldr	r3, [r0, #16]
 800ac5e:	690c      	ldr	r4, [r1, #16]
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	4607      	mov	r7, r0
 800ac64:	db7e      	blt.n	800ad64 <quorem+0x10c>
 800ac66:	3c01      	subs	r4, #1
 800ac68:	f101 0814 	add.w	r8, r1, #20
 800ac6c:	00a3      	lsls	r3, r4, #2
 800ac6e:	f100 0514 	add.w	r5, r0, #20
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac82:	3301      	adds	r3, #1
 800ac84:	429a      	cmp	r2, r3
 800ac86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac8e:	d32e      	bcc.n	800acee <quorem+0x96>
 800ac90:	f04f 0a00 	mov.w	sl, #0
 800ac94:	46c4      	mov	ip, r8
 800ac96:	46ae      	mov	lr, r5
 800ac98:	46d3      	mov	fp, sl
 800ac9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac9e:	b298      	uxth	r0, r3
 800aca0:	fb06 a000 	mla	r0, r6, r0, sl
 800aca4:	0c02      	lsrs	r2, r0, #16
 800aca6:	0c1b      	lsrs	r3, r3, #16
 800aca8:	fb06 2303 	mla	r3, r6, r3, r2
 800acac:	f8de 2000 	ldr.w	r2, [lr]
 800acb0:	b280      	uxth	r0, r0
 800acb2:	b292      	uxth	r2, r2
 800acb4:	1a12      	subs	r2, r2, r0
 800acb6:	445a      	add	r2, fp
 800acb8:	f8de 0000 	ldr.w	r0, [lr]
 800acbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800acc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800acca:	b292      	uxth	r2, r2
 800accc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800acd0:	45e1      	cmp	r9, ip
 800acd2:	f84e 2b04 	str.w	r2, [lr], #4
 800acd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800acda:	d2de      	bcs.n	800ac9a <quorem+0x42>
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	58eb      	ldr	r3, [r5, r3]
 800ace0:	b92b      	cbnz	r3, 800acee <quorem+0x96>
 800ace2:	9b01      	ldr	r3, [sp, #4]
 800ace4:	3b04      	subs	r3, #4
 800ace6:	429d      	cmp	r5, r3
 800ace8:	461a      	mov	r2, r3
 800acea:	d32f      	bcc.n	800ad4c <quorem+0xf4>
 800acec:	613c      	str	r4, [r7, #16]
 800acee:	4638      	mov	r0, r7
 800acf0:	f001 fc58 	bl	800c5a4 <__mcmp>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	db25      	blt.n	800ad44 <quorem+0xec>
 800acf8:	4629      	mov	r1, r5
 800acfa:	2000      	movs	r0, #0
 800acfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad00:	f8d1 c000 	ldr.w	ip, [r1]
 800ad04:	fa1f fe82 	uxth.w	lr, r2
 800ad08:	fa1f f38c 	uxth.w	r3, ip
 800ad0c:	eba3 030e 	sub.w	r3, r3, lr
 800ad10:	4403      	add	r3, r0
 800ad12:	0c12      	lsrs	r2, r2, #16
 800ad14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad22:	45c1      	cmp	r9, r8
 800ad24:	f841 3b04 	str.w	r3, [r1], #4
 800ad28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad2c:	d2e6      	bcs.n	800acfc <quorem+0xa4>
 800ad2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad36:	b922      	cbnz	r2, 800ad42 <quorem+0xea>
 800ad38:	3b04      	subs	r3, #4
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	d30b      	bcc.n	800ad58 <quorem+0x100>
 800ad40:	613c      	str	r4, [r7, #16]
 800ad42:	3601      	adds	r6, #1
 800ad44:	4630      	mov	r0, r6
 800ad46:	b003      	add	sp, #12
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	3b04      	subs	r3, #4
 800ad50:	2a00      	cmp	r2, #0
 800ad52:	d1cb      	bne.n	800acec <quorem+0x94>
 800ad54:	3c01      	subs	r4, #1
 800ad56:	e7c6      	b.n	800ace6 <quorem+0x8e>
 800ad58:	6812      	ldr	r2, [r2, #0]
 800ad5a:	3b04      	subs	r3, #4
 800ad5c:	2a00      	cmp	r2, #0
 800ad5e:	d1ef      	bne.n	800ad40 <quorem+0xe8>
 800ad60:	3c01      	subs	r4, #1
 800ad62:	e7ea      	b.n	800ad3a <quorem+0xe2>
 800ad64:	2000      	movs	r0, #0
 800ad66:	e7ee      	b.n	800ad46 <quorem+0xee>

0800ad68 <_dtoa_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	69c7      	ldr	r7, [r0, #28]
 800ad6e:	b099      	sub	sp, #100	@ 0x64
 800ad70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad74:	ec55 4b10 	vmov	r4, r5, d0
 800ad78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ad7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad7c:	4683      	mov	fp, r0
 800ad7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad82:	b97f      	cbnz	r7, 800ada4 <_dtoa_r+0x3c>
 800ad84:	2010      	movs	r0, #16
 800ad86:	f7fd fe53 	bl	8008a30 <malloc>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ad90:	b920      	cbnz	r0, 800ad9c <_dtoa_r+0x34>
 800ad92:	4ba7      	ldr	r3, [pc, #668]	@ (800b030 <_dtoa_r+0x2c8>)
 800ad94:	21ef      	movs	r1, #239	@ 0xef
 800ad96:	48a7      	ldr	r0, [pc, #668]	@ (800b034 <_dtoa_r+0x2cc>)
 800ad98:	f7ff ff40 	bl	800ac1c <__assert_func>
 800ad9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ada0:	6007      	str	r7, [r0, #0]
 800ada2:	60c7      	str	r7, [r0, #12]
 800ada4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	b159      	cbz	r1, 800adc4 <_dtoa_r+0x5c>
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	604a      	str	r2, [r1, #4]
 800adb0:	2301      	movs	r3, #1
 800adb2:	4093      	lsls	r3, r2
 800adb4:	608b      	str	r3, [r1, #8]
 800adb6:	4658      	mov	r0, fp
 800adb8:	f001 f970 	bl	800c09c <_Bfree>
 800adbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	1e2b      	subs	r3, r5, #0
 800adc6:	bfb9      	ittee	lt
 800adc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800adcc:	9303      	strlt	r3, [sp, #12]
 800adce:	2300      	movge	r3, #0
 800add0:	6033      	strge	r3, [r6, #0]
 800add2:	9f03      	ldr	r7, [sp, #12]
 800add4:	4b98      	ldr	r3, [pc, #608]	@ (800b038 <_dtoa_r+0x2d0>)
 800add6:	bfbc      	itt	lt
 800add8:	2201      	movlt	r2, #1
 800adda:	6032      	strlt	r2, [r6, #0]
 800addc:	43bb      	bics	r3, r7
 800adde:	d112      	bne.n	800ae06 <_dtoa_r+0x9e>
 800ade0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ade2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adec:	4323      	orrs	r3, r4
 800adee:	f000 854d 	beq.w	800b88c <_dtoa_r+0xb24>
 800adf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b04c <_dtoa_r+0x2e4>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 854f 	beq.w	800b89c <_dtoa_r+0xb34>
 800adfe:	f10a 0303 	add.w	r3, sl, #3
 800ae02:	f000 bd49 	b.w	800b898 <_dtoa_r+0xb30>
 800ae06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	ec51 0b17 	vmov	r0, r1, d7
 800ae10:	2300      	movs	r3, #0
 800ae12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ae16:	f7f5 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	b158      	cbz	r0, 800ae36 <_dtoa_r+0xce>
 800ae1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae20:	2301      	movs	r3, #1
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae26:	b113      	cbz	r3, 800ae2e <_dtoa_r+0xc6>
 800ae28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae2a:	4b84      	ldr	r3, [pc, #528]	@ (800b03c <_dtoa_r+0x2d4>)
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b050 <_dtoa_r+0x2e8>
 800ae32:	f000 bd33 	b.w	800b89c <_dtoa_r+0xb34>
 800ae36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae3a:	aa16      	add	r2, sp, #88	@ 0x58
 800ae3c:	a917      	add	r1, sp, #92	@ 0x5c
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f001 fcd0 	bl	800c7e4 <__d2b>
 800ae44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae48:	4681      	mov	r9, r0
 800ae4a:	2e00      	cmp	r6, #0
 800ae4c:	d077      	beq.n	800af3e <_dtoa_r+0x1d6>
 800ae4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ae54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae68:	4619      	mov	r1, r3
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4b74      	ldr	r3, [pc, #464]	@ (800b040 <_dtoa_r+0x2d8>)
 800ae6e:	f7f5 fa13 	bl	8000298 <__aeabi_dsub>
 800ae72:	a369      	add	r3, pc, #420	@ (adr r3, 800b018 <_dtoa_r+0x2b0>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 fbc6 	bl	8000608 <__aeabi_dmul>
 800ae7c:	a368      	add	r3, pc, #416	@ (adr r3, 800b020 <_dtoa_r+0x2b8>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 fa0b 	bl	800029c <__adddf3>
 800ae86:	4604      	mov	r4, r0
 800ae88:	4630      	mov	r0, r6
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	f7f5 fb52 	bl	8000534 <__aeabi_i2d>
 800ae90:	a365      	add	r3, pc, #404	@ (adr r3, 800b028 <_dtoa_r+0x2c0>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fbb7 	bl	8000608 <__aeabi_dmul>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 f9fb 	bl	800029c <__adddf3>
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	f7f5 fe5d 	bl	8000b68 <__aeabi_d2iz>
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	f7f5 fe18 	bl	8000aec <__aeabi_dcmplt>
 800aebc:	b140      	cbz	r0, 800aed0 <_dtoa_r+0x168>
 800aebe:	4638      	mov	r0, r7
 800aec0:	f7f5 fb38 	bl	8000534 <__aeabi_i2d>
 800aec4:	4622      	mov	r2, r4
 800aec6:	462b      	mov	r3, r5
 800aec8:	f7f5 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 800aecc:	b900      	cbnz	r0, 800aed0 <_dtoa_r+0x168>
 800aece:	3f01      	subs	r7, #1
 800aed0:	2f16      	cmp	r7, #22
 800aed2:	d851      	bhi.n	800af78 <_dtoa_r+0x210>
 800aed4:	4b5b      	ldr	r3, [pc, #364]	@ (800b044 <_dtoa_r+0x2dc>)
 800aed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aee2:	f7f5 fe03 	bl	8000aec <__aeabi_dcmplt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d048      	beq.n	800af7c <_dtoa_r+0x214>
 800aeea:	3f01      	subs	r7, #1
 800aeec:	2300      	movs	r3, #0
 800aeee:	9312      	str	r3, [sp, #72]	@ 0x48
 800aef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aef2:	1b9b      	subs	r3, r3, r6
 800aef4:	1e5a      	subs	r2, r3, #1
 800aef6:	bf44      	itt	mi
 800aef8:	f1c3 0801 	rsbmi	r8, r3, #1
 800aefc:	2300      	movmi	r3, #0
 800aefe:	9208      	str	r2, [sp, #32]
 800af00:	bf54      	ite	pl
 800af02:	f04f 0800 	movpl.w	r8, #0
 800af06:	9308      	strmi	r3, [sp, #32]
 800af08:	2f00      	cmp	r7, #0
 800af0a:	db39      	blt.n	800af80 <_dtoa_r+0x218>
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800af10:	443b      	add	r3, r7
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	2300      	movs	r3, #0
 800af16:	930a      	str	r3, [sp, #40]	@ 0x28
 800af18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d864      	bhi.n	800afe8 <_dtoa_r+0x280>
 800af1e:	2b05      	cmp	r3, #5
 800af20:	bfc4      	itt	gt
 800af22:	3b04      	subgt	r3, #4
 800af24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	f1a3 0302 	sub.w	r3, r3, #2
 800af2c:	bfcc      	ite	gt
 800af2e:	2400      	movgt	r4, #0
 800af30:	2401      	movle	r4, #1
 800af32:	2b03      	cmp	r3, #3
 800af34:	d863      	bhi.n	800affe <_dtoa_r+0x296>
 800af36:	e8df f003 	tbb	[pc, r3]
 800af3a:	372a      	.short	0x372a
 800af3c:	5535      	.short	0x5535
 800af3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800af42:	441e      	add	r6, r3
 800af44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af48:	2b20      	cmp	r3, #32
 800af4a:	bfc1      	itttt	gt
 800af4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af50:	409f      	lslgt	r7, r3
 800af52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af5a:	bfd6      	itet	le
 800af5c:	f1c3 0320 	rsble	r3, r3, #32
 800af60:	ea47 0003 	orrgt.w	r0, r7, r3
 800af64:	fa04 f003 	lslle.w	r0, r4, r3
 800af68:	f7f5 fad4 	bl	8000514 <__aeabi_ui2d>
 800af6c:	2201      	movs	r2, #1
 800af6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af72:	3e01      	subs	r6, #1
 800af74:	9214      	str	r2, [sp, #80]	@ 0x50
 800af76:	e777      	b.n	800ae68 <_dtoa_r+0x100>
 800af78:	2301      	movs	r3, #1
 800af7a:	e7b8      	b.n	800aeee <_dtoa_r+0x186>
 800af7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800af7e:	e7b7      	b.n	800aef0 <_dtoa_r+0x188>
 800af80:	427b      	negs	r3, r7
 800af82:	930a      	str	r3, [sp, #40]	@ 0x28
 800af84:	2300      	movs	r3, #0
 800af86:	eba8 0807 	sub.w	r8, r8, r7
 800af8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af8c:	e7c4      	b.n	800af18 <_dtoa_r+0x1b0>
 800af8e:	2300      	movs	r3, #0
 800af90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af94:	2b00      	cmp	r3, #0
 800af96:	dc35      	bgt.n	800b004 <_dtoa_r+0x29c>
 800af98:	2301      	movs	r3, #1
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	9307      	str	r3, [sp, #28]
 800af9e:	461a      	mov	r2, r3
 800afa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800afa2:	e00b      	b.n	800afbc <_dtoa_r+0x254>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e7f3      	b.n	800af90 <_dtoa_r+0x228>
 800afa8:	2300      	movs	r3, #0
 800afaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	9307      	str	r3, [sp, #28]
 800afb8:	bfb8      	it	lt
 800afba:	2301      	movlt	r3, #1
 800afbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800afc0:	2100      	movs	r1, #0
 800afc2:	2204      	movs	r2, #4
 800afc4:	f102 0514 	add.w	r5, r2, #20
 800afc8:	429d      	cmp	r5, r3
 800afca:	d91f      	bls.n	800b00c <_dtoa_r+0x2a4>
 800afcc:	6041      	str	r1, [r0, #4]
 800afce:	4658      	mov	r0, fp
 800afd0:	f001 f824 	bl	800c01c <_Balloc>
 800afd4:	4682      	mov	sl, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d13c      	bne.n	800b054 <_dtoa_r+0x2ec>
 800afda:	4b1b      	ldr	r3, [pc, #108]	@ (800b048 <_dtoa_r+0x2e0>)
 800afdc:	4602      	mov	r2, r0
 800afde:	f240 11af 	movw	r1, #431	@ 0x1af
 800afe2:	e6d8      	b.n	800ad96 <_dtoa_r+0x2e>
 800afe4:	2301      	movs	r3, #1
 800afe6:	e7e0      	b.n	800afaa <_dtoa_r+0x242>
 800afe8:	2401      	movs	r4, #1
 800afea:	2300      	movs	r3, #0
 800afec:	9309      	str	r3, [sp, #36]	@ 0x24
 800afee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	9307      	str	r3, [sp, #28]
 800aff8:	2200      	movs	r2, #0
 800affa:	2312      	movs	r3, #18
 800affc:	e7d0      	b.n	800afa0 <_dtoa_r+0x238>
 800affe:	2301      	movs	r3, #1
 800b000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b002:	e7f5      	b.n	800aff0 <_dtoa_r+0x288>
 800b004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	9307      	str	r3, [sp, #28]
 800b00a:	e7d7      	b.n	800afbc <_dtoa_r+0x254>
 800b00c:	3101      	adds	r1, #1
 800b00e:	0052      	lsls	r2, r2, #1
 800b010:	e7d8      	b.n	800afc4 <_dtoa_r+0x25c>
 800b012:	bf00      	nop
 800b014:	f3af 8000 	nop.w
 800b018:	636f4361 	.word	0x636f4361
 800b01c:	3fd287a7 	.word	0x3fd287a7
 800b020:	8b60c8b3 	.word	0x8b60c8b3
 800b024:	3fc68a28 	.word	0x3fc68a28
 800b028:	509f79fb 	.word	0x509f79fb
 800b02c:	3fd34413 	.word	0x3fd34413
 800b030:	0800d789 	.word	0x0800d789
 800b034:	0800d84b 	.word	0x0800d84b
 800b038:	7ff00000 	.word	0x7ff00000
 800b03c:	0800d761 	.word	0x0800d761
 800b040:	3ff80000 	.word	0x3ff80000
 800b044:	0800d9a8 	.word	0x0800d9a8
 800b048:	0800d8a3 	.word	0x0800d8a3
 800b04c:	0800d847 	.word	0x0800d847
 800b050:	0800d760 	.word	0x0800d760
 800b054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b058:	6018      	str	r0, [r3, #0]
 800b05a:	9b07      	ldr	r3, [sp, #28]
 800b05c:	2b0e      	cmp	r3, #14
 800b05e:	f200 80a4 	bhi.w	800b1aa <_dtoa_r+0x442>
 800b062:	2c00      	cmp	r4, #0
 800b064:	f000 80a1 	beq.w	800b1aa <_dtoa_r+0x442>
 800b068:	2f00      	cmp	r7, #0
 800b06a:	dd33      	ble.n	800b0d4 <_dtoa_r+0x36c>
 800b06c:	4bad      	ldr	r3, [pc, #692]	@ (800b324 <_dtoa_r+0x5bc>)
 800b06e:	f007 020f 	and.w	r2, r7, #15
 800b072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b076:	ed93 7b00 	vldr	d7, [r3]
 800b07a:	05f8      	lsls	r0, r7, #23
 800b07c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b080:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b084:	d516      	bpl.n	800b0b4 <_dtoa_r+0x34c>
 800b086:	4ba8      	ldr	r3, [pc, #672]	@ (800b328 <_dtoa_r+0x5c0>)
 800b088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b08c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b090:	f7f5 fbe4 	bl	800085c <__aeabi_ddiv>
 800b094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b098:	f004 040f 	and.w	r4, r4, #15
 800b09c:	2603      	movs	r6, #3
 800b09e:	4da2      	ldr	r5, [pc, #648]	@ (800b328 <_dtoa_r+0x5c0>)
 800b0a0:	b954      	cbnz	r4, 800b0b8 <_dtoa_r+0x350>
 800b0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0aa:	f7f5 fbd7 	bl	800085c <__aeabi_ddiv>
 800b0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b2:	e028      	b.n	800b106 <_dtoa_r+0x39e>
 800b0b4:	2602      	movs	r6, #2
 800b0b6:	e7f2      	b.n	800b09e <_dtoa_r+0x336>
 800b0b8:	07e1      	lsls	r1, r4, #31
 800b0ba:	d508      	bpl.n	800b0ce <_dtoa_r+0x366>
 800b0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0c4:	f7f5 faa0 	bl	8000608 <__aeabi_dmul>
 800b0c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0cc:	3601      	adds	r6, #1
 800b0ce:	1064      	asrs	r4, r4, #1
 800b0d0:	3508      	adds	r5, #8
 800b0d2:	e7e5      	b.n	800b0a0 <_dtoa_r+0x338>
 800b0d4:	f000 80d2 	beq.w	800b27c <_dtoa_r+0x514>
 800b0d8:	427c      	negs	r4, r7
 800b0da:	4b92      	ldr	r3, [pc, #584]	@ (800b324 <_dtoa_r+0x5bc>)
 800b0dc:	4d92      	ldr	r5, [pc, #584]	@ (800b328 <_dtoa_r+0x5c0>)
 800b0de:	f004 020f 	and.w	r2, r4, #15
 800b0e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0ee:	f7f5 fa8b 	bl	8000608 <__aeabi_dmul>
 800b0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0f6:	1124      	asrs	r4, r4, #4
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	2602      	movs	r6, #2
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	f040 80b2 	bne.w	800b266 <_dtoa_r+0x4fe>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1d3      	bne.n	800b0ae <_dtoa_r+0x346>
 800b106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80b7 	beq.w	800b280 <_dtoa_r+0x518>
 800b112:	4b86      	ldr	r3, [pc, #536]	@ (800b32c <_dtoa_r+0x5c4>)
 800b114:	2200      	movs	r2, #0
 800b116:	4620      	mov	r0, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	f7f5 fce7 	bl	8000aec <__aeabi_dcmplt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f000 80ae 	beq.w	800b280 <_dtoa_r+0x518>
 800b124:	9b07      	ldr	r3, [sp, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 80aa 	beq.w	800b280 <_dtoa_r+0x518>
 800b12c:	9b00      	ldr	r3, [sp, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dd37      	ble.n	800b1a2 <_dtoa_r+0x43a>
 800b132:	1e7b      	subs	r3, r7, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	4620      	mov	r0, r4
 800b138:	4b7d      	ldr	r3, [pc, #500]	@ (800b330 <_dtoa_r+0x5c8>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 fa63 	bl	8000608 <__aeabi_dmul>
 800b142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b146:	9c00      	ldr	r4, [sp, #0]
 800b148:	3601      	adds	r6, #1
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7f5 f9f2 	bl	8000534 <__aeabi_i2d>
 800b150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b154:	f7f5 fa58 	bl	8000608 <__aeabi_dmul>
 800b158:	4b76      	ldr	r3, [pc, #472]	@ (800b334 <_dtoa_r+0x5cc>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7f5 f89e 	bl	800029c <__adddf3>
 800b160:	4605      	mov	r5, r0
 800b162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b166:	2c00      	cmp	r4, #0
 800b168:	f040 808d 	bne.w	800b286 <_dtoa_r+0x51e>
 800b16c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b170:	4b71      	ldr	r3, [pc, #452]	@ (800b338 <_dtoa_r+0x5d0>)
 800b172:	2200      	movs	r2, #0
 800b174:	f7f5 f890 	bl	8000298 <__aeabi_dsub>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b180:	462a      	mov	r2, r5
 800b182:	4633      	mov	r3, r6
 800b184:	f7f5 fcd0 	bl	8000b28 <__aeabi_dcmpgt>
 800b188:	2800      	cmp	r0, #0
 800b18a:	f040 828b 	bne.w	800b6a4 <_dtoa_r+0x93c>
 800b18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b192:	462a      	mov	r2, r5
 800b194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b198:	f7f5 fca8 	bl	8000aec <__aeabi_dcmplt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f040 8128 	bne.w	800b3f2 <_dtoa_r+0x68a>
 800b1a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b1a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b1aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f2c0 815a 	blt.w	800b466 <_dtoa_r+0x6fe>
 800b1b2:	2f0e      	cmp	r7, #14
 800b1b4:	f300 8157 	bgt.w	800b466 <_dtoa_r+0x6fe>
 800b1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800b324 <_dtoa_r+0x5bc>)
 800b1ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1be:	ed93 7b00 	vldr	d7, [r3]
 800b1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	ed8d 7b00 	vstr	d7, [sp]
 800b1ca:	da03      	bge.n	800b1d4 <_dtoa_r+0x46c>
 800b1cc:	9b07      	ldr	r3, [sp, #28]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f340 8101 	ble.w	800b3d6 <_dtoa_r+0x66e>
 800b1d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1d8:	4656      	mov	r6, sl
 800b1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 fb3b 	bl	800085c <__aeabi_ddiv>
 800b1e6:	f7f5 fcbf 	bl	8000b68 <__aeabi_d2iz>
 800b1ea:	4680      	mov	r8, r0
 800b1ec:	f7f5 f9a2 	bl	8000534 <__aeabi_i2d>
 800b1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1f4:	f7f5 fa08 	bl	8000608 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	f806 4b01 	strb.w	r4, [r6], #1
 800b20c:	9d07      	ldr	r5, [sp, #28]
 800b20e:	eba6 040a 	sub.w	r4, r6, sl
 800b212:	42a5      	cmp	r5, r4
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	f040 8117 	bne.w	800b44a <_dtoa_r+0x6e2>
 800b21c:	f7f5 f83e 	bl	800029c <__adddf3>
 800b220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	f7f5 fc7e 	bl	8000b28 <__aeabi_dcmpgt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f040 80f9 	bne.w	800b424 <_dtoa_r+0x6bc>
 800b232:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b23e:	b118      	cbz	r0, 800b248 <_dtoa_r+0x4e0>
 800b240:	f018 0f01 	tst.w	r8, #1
 800b244:	f040 80ee 	bne.w	800b424 <_dtoa_r+0x6bc>
 800b248:	4649      	mov	r1, r9
 800b24a:	4658      	mov	r0, fp
 800b24c:	f000 ff26 	bl	800c09c <_Bfree>
 800b250:	2300      	movs	r3, #0
 800b252:	7033      	strb	r3, [r6, #0]
 800b254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b256:	3701      	adds	r7, #1
 800b258:	601f      	str	r7, [r3, #0]
 800b25a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 831d 	beq.w	800b89c <_dtoa_r+0xb34>
 800b262:	601e      	str	r6, [r3, #0]
 800b264:	e31a      	b.n	800b89c <_dtoa_r+0xb34>
 800b266:	07e2      	lsls	r2, r4, #31
 800b268:	d505      	bpl.n	800b276 <_dtoa_r+0x50e>
 800b26a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b26e:	f7f5 f9cb 	bl	8000608 <__aeabi_dmul>
 800b272:	3601      	adds	r6, #1
 800b274:	2301      	movs	r3, #1
 800b276:	1064      	asrs	r4, r4, #1
 800b278:	3508      	adds	r5, #8
 800b27a:	e73f      	b.n	800b0fc <_dtoa_r+0x394>
 800b27c:	2602      	movs	r6, #2
 800b27e:	e742      	b.n	800b106 <_dtoa_r+0x39e>
 800b280:	9c07      	ldr	r4, [sp, #28]
 800b282:	9704      	str	r7, [sp, #16]
 800b284:	e761      	b.n	800b14a <_dtoa_r+0x3e2>
 800b286:	4b27      	ldr	r3, [pc, #156]	@ (800b324 <_dtoa_r+0x5bc>)
 800b288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b28a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b28e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b292:	4454      	add	r4, sl
 800b294:	2900      	cmp	r1, #0
 800b296:	d053      	beq.n	800b340 <_dtoa_r+0x5d8>
 800b298:	4928      	ldr	r1, [pc, #160]	@ (800b33c <_dtoa_r+0x5d4>)
 800b29a:	2000      	movs	r0, #0
 800b29c:	f7f5 fade 	bl	800085c <__aeabi_ddiv>
 800b2a0:	4633      	mov	r3, r6
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	f7f4 fff8 	bl	8000298 <__aeabi_dsub>
 800b2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2ac:	4656      	mov	r6, sl
 800b2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2b2:	f7f5 fc59 	bl	8000b68 <__aeabi_d2iz>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	f7f5 f93c 	bl	8000534 <__aeabi_i2d>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c4:	f7f4 ffe8 	bl	8000298 <__aeabi_dsub>
 800b2c8:	3530      	adds	r5, #48	@ 0x30
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2d2:	f806 5b01 	strb.w	r5, [r6], #1
 800b2d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2da:	f7f5 fc07 	bl	8000aec <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d171      	bne.n	800b3c6 <_dtoa_r+0x65e>
 800b2e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2e6:	4911      	ldr	r1, [pc, #68]	@ (800b32c <_dtoa_r+0x5c4>)
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f7f4 ffd5 	bl	8000298 <__aeabi_dsub>
 800b2ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2f2:	f7f5 fbfb 	bl	8000aec <__aeabi_dcmplt>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f040 8095 	bne.w	800b426 <_dtoa_r+0x6be>
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	f43f af50 	beq.w	800b1a2 <_dtoa_r+0x43a>
 800b302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b306:	4b0a      	ldr	r3, [pc, #40]	@ (800b330 <_dtoa_r+0x5c8>)
 800b308:	2200      	movs	r2, #0
 800b30a:	f7f5 f97d 	bl	8000608 <__aeabi_dmul>
 800b30e:	4b08      	ldr	r3, [pc, #32]	@ (800b330 <_dtoa_r+0x5c8>)
 800b310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b314:	2200      	movs	r2, #0
 800b316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b31a:	f7f5 f975 	bl	8000608 <__aeabi_dmul>
 800b31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b322:	e7c4      	b.n	800b2ae <_dtoa_r+0x546>
 800b324:	0800d9a8 	.word	0x0800d9a8
 800b328:	0800d980 	.word	0x0800d980
 800b32c:	3ff00000 	.word	0x3ff00000
 800b330:	40240000 	.word	0x40240000
 800b334:	401c0000 	.word	0x401c0000
 800b338:	40140000 	.word	0x40140000
 800b33c:	3fe00000 	.word	0x3fe00000
 800b340:	4631      	mov	r1, r6
 800b342:	4628      	mov	r0, r5
 800b344:	f7f5 f960 	bl	8000608 <__aeabi_dmul>
 800b348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b34c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b34e:	4656      	mov	r6, sl
 800b350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b354:	f7f5 fc08 	bl	8000b68 <__aeabi_d2iz>
 800b358:	4605      	mov	r5, r0
 800b35a:	f7f5 f8eb 	bl	8000534 <__aeabi_i2d>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b366:	f7f4 ff97 	bl	8000298 <__aeabi_dsub>
 800b36a:	3530      	adds	r5, #48	@ 0x30
 800b36c:	f806 5b01 	strb.w	r5, [r6], #1
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	42a6      	cmp	r6, r4
 800b376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	d124      	bne.n	800b3ca <_dtoa_r+0x662>
 800b380:	4bac      	ldr	r3, [pc, #688]	@ (800b634 <_dtoa_r+0x8cc>)
 800b382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b386:	f7f4 ff89 	bl	800029c <__adddf3>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b392:	f7f5 fbc9 	bl	8000b28 <__aeabi_dcmpgt>
 800b396:	2800      	cmp	r0, #0
 800b398:	d145      	bne.n	800b426 <_dtoa_r+0x6be>
 800b39a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b39e:	49a5      	ldr	r1, [pc, #660]	@ (800b634 <_dtoa_r+0x8cc>)
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	f7f4 ff79 	bl	8000298 <__aeabi_dsub>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ae:	f7f5 fb9d 	bl	8000aec <__aeabi_dcmplt>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	f43f aef5 	beq.w	800b1a2 <_dtoa_r+0x43a>
 800b3b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b3ba:	1e73      	subs	r3, r6, #1
 800b3bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3c2:	2b30      	cmp	r3, #48	@ 0x30
 800b3c4:	d0f8      	beq.n	800b3b8 <_dtoa_r+0x650>
 800b3c6:	9f04      	ldr	r7, [sp, #16]
 800b3c8:	e73e      	b.n	800b248 <_dtoa_r+0x4e0>
 800b3ca:	4b9b      	ldr	r3, [pc, #620]	@ (800b638 <_dtoa_r+0x8d0>)
 800b3cc:	f7f5 f91c 	bl	8000608 <__aeabi_dmul>
 800b3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d4:	e7bc      	b.n	800b350 <_dtoa_r+0x5e8>
 800b3d6:	d10c      	bne.n	800b3f2 <_dtoa_r+0x68a>
 800b3d8:	4b98      	ldr	r3, [pc, #608]	@ (800b63c <_dtoa_r+0x8d4>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3e8:	f7f5 fb94 	bl	8000b14 <__aeabi_dcmpge>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f000 8157 	beq.w	800b6a0 <_dtoa_r+0x938>
 800b3f2:	2400      	movs	r4, #0
 800b3f4:	4625      	mov	r5, r4
 800b3f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3f8:	43db      	mvns	r3, r3
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	4656      	mov	r6, sl
 800b3fe:	2700      	movs	r7, #0
 800b400:	4621      	mov	r1, r4
 800b402:	4658      	mov	r0, fp
 800b404:	f000 fe4a 	bl	800c09c <_Bfree>
 800b408:	2d00      	cmp	r5, #0
 800b40a:	d0dc      	beq.n	800b3c6 <_dtoa_r+0x65e>
 800b40c:	b12f      	cbz	r7, 800b41a <_dtoa_r+0x6b2>
 800b40e:	42af      	cmp	r7, r5
 800b410:	d003      	beq.n	800b41a <_dtoa_r+0x6b2>
 800b412:	4639      	mov	r1, r7
 800b414:	4658      	mov	r0, fp
 800b416:	f000 fe41 	bl	800c09c <_Bfree>
 800b41a:	4629      	mov	r1, r5
 800b41c:	4658      	mov	r0, fp
 800b41e:	f000 fe3d 	bl	800c09c <_Bfree>
 800b422:	e7d0      	b.n	800b3c6 <_dtoa_r+0x65e>
 800b424:	9704      	str	r7, [sp, #16]
 800b426:	4633      	mov	r3, r6
 800b428:	461e      	mov	r6, r3
 800b42a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b42e:	2a39      	cmp	r2, #57	@ 0x39
 800b430:	d107      	bne.n	800b442 <_dtoa_r+0x6da>
 800b432:	459a      	cmp	sl, r3
 800b434:	d1f8      	bne.n	800b428 <_dtoa_r+0x6c0>
 800b436:	9a04      	ldr	r2, [sp, #16]
 800b438:	3201      	adds	r2, #1
 800b43a:	9204      	str	r2, [sp, #16]
 800b43c:	2230      	movs	r2, #48	@ 0x30
 800b43e:	f88a 2000 	strb.w	r2, [sl]
 800b442:	781a      	ldrb	r2, [r3, #0]
 800b444:	3201      	adds	r2, #1
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	e7bd      	b.n	800b3c6 <_dtoa_r+0x65e>
 800b44a:	4b7b      	ldr	r3, [pc, #492]	@ (800b638 <_dtoa_r+0x8d0>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	f7f5 f8db 	bl	8000608 <__aeabi_dmul>
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	f7f5 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f43f aebb 	beq.w	800b1da <_dtoa_r+0x472>
 800b464:	e6f0      	b.n	800b248 <_dtoa_r+0x4e0>
 800b466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b468:	2a00      	cmp	r2, #0
 800b46a:	f000 80db 	beq.w	800b624 <_dtoa_r+0x8bc>
 800b46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b470:	2a01      	cmp	r2, #1
 800b472:	f300 80bf 	bgt.w	800b5f4 <_dtoa_r+0x88c>
 800b476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b478:	2a00      	cmp	r2, #0
 800b47a:	f000 80b7 	beq.w	800b5ec <_dtoa_r+0x884>
 800b47e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b484:	4646      	mov	r6, r8
 800b486:	9a08      	ldr	r2, [sp, #32]
 800b488:	2101      	movs	r1, #1
 800b48a:	441a      	add	r2, r3
 800b48c:	4658      	mov	r0, fp
 800b48e:	4498      	add	r8, r3
 800b490:	9208      	str	r2, [sp, #32]
 800b492:	f000 ff01 	bl	800c298 <__i2b>
 800b496:	4605      	mov	r5, r0
 800b498:	b15e      	cbz	r6, 800b4b2 <_dtoa_r+0x74a>
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd08      	ble.n	800b4b2 <_dtoa_r+0x74a>
 800b4a0:	42b3      	cmp	r3, r6
 800b4a2:	9a08      	ldr	r2, [sp, #32]
 800b4a4:	bfa8      	it	ge
 800b4a6:	4633      	movge	r3, r6
 800b4a8:	eba8 0803 	sub.w	r8, r8, r3
 800b4ac:	1af6      	subs	r6, r6, r3
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b4:	b1f3      	cbz	r3, 800b4f4 <_dtoa_r+0x78c>
 800b4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 80b7 	beq.w	800b62c <_dtoa_r+0x8c4>
 800b4be:	b18c      	cbz	r4, 800b4e4 <_dtoa_r+0x77c>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	f000 ffa7 	bl	800c418 <__pow5mult>
 800b4ca:	464a      	mov	r2, r9
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	4658      	mov	r0, fp
 800b4d2:	f000 fef7 	bl	800c2c4 <__multiply>
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	9004      	str	r0, [sp, #16]
 800b4da:	4658      	mov	r0, fp
 800b4dc:	f000 fdde 	bl	800c09c <_Bfree>
 800b4e0:	9b04      	ldr	r3, [sp, #16]
 800b4e2:	4699      	mov	r9, r3
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4e6:	1b1a      	subs	r2, r3, r4
 800b4e8:	d004      	beq.n	800b4f4 <_dtoa_r+0x78c>
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	4658      	mov	r0, fp
 800b4ee:	f000 ff93 	bl	800c418 <__pow5mult>
 800b4f2:	4681      	mov	r9, r0
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	4658      	mov	r0, fp
 800b4f8:	f000 fece 	bl	800c298 <__i2b>
 800b4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4fe:	4604      	mov	r4, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 81cf 	beq.w	800b8a4 <_dtoa_r+0xb3c>
 800b506:	461a      	mov	r2, r3
 800b508:	4601      	mov	r1, r0
 800b50a:	4658      	mov	r0, fp
 800b50c:	f000 ff84 	bl	800c418 <__pow5mult>
 800b510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b512:	2b01      	cmp	r3, #1
 800b514:	4604      	mov	r4, r0
 800b516:	f300 8095 	bgt.w	800b644 <_dtoa_r+0x8dc>
 800b51a:	9b02      	ldr	r3, [sp, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f040 8087 	bne.w	800b630 <_dtoa_r+0x8c8>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f040 8089 	bne.w	800b640 <_dtoa_r+0x8d8>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b534:	0d1b      	lsrs	r3, r3, #20
 800b536:	051b      	lsls	r3, r3, #20
 800b538:	b12b      	cbz	r3, 800b546 <_dtoa_r+0x7de>
 800b53a:	9b08      	ldr	r3, [sp, #32]
 800b53c:	3301      	adds	r3, #1
 800b53e:	9308      	str	r3, [sp, #32]
 800b540:	f108 0801 	add.w	r8, r8, #1
 800b544:	2301      	movs	r3, #1
 800b546:	930a      	str	r3, [sp, #40]	@ 0x28
 800b548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 81b0 	beq.w	800b8b0 <_dtoa_r+0xb48>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b556:	6918      	ldr	r0, [r3, #16]
 800b558:	f000 fe52 	bl	800c200 <__hi0bits>
 800b55c:	f1c0 0020 	rsb	r0, r0, #32
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	4418      	add	r0, r3
 800b564:	f010 001f 	ands.w	r0, r0, #31
 800b568:	d077      	beq.n	800b65a <_dtoa_r+0x8f2>
 800b56a:	f1c0 0320 	rsb	r3, r0, #32
 800b56e:	2b04      	cmp	r3, #4
 800b570:	dd6b      	ble.n	800b64a <_dtoa_r+0x8e2>
 800b572:	9b08      	ldr	r3, [sp, #32]
 800b574:	f1c0 001c 	rsb	r0, r0, #28
 800b578:	4403      	add	r3, r0
 800b57a:	4480      	add	r8, r0
 800b57c:	4406      	add	r6, r0
 800b57e:	9308      	str	r3, [sp, #32]
 800b580:	f1b8 0f00 	cmp.w	r8, #0
 800b584:	dd05      	ble.n	800b592 <_dtoa_r+0x82a>
 800b586:	4649      	mov	r1, r9
 800b588:	4642      	mov	r2, r8
 800b58a:	4658      	mov	r0, fp
 800b58c:	f000 ff9e 	bl	800c4cc <__lshift>
 800b590:	4681      	mov	r9, r0
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dd05      	ble.n	800b5a4 <_dtoa_r+0x83c>
 800b598:	4621      	mov	r1, r4
 800b59a:	461a      	mov	r2, r3
 800b59c:	4658      	mov	r0, fp
 800b59e:	f000 ff95 	bl	800c4cc <__lshift>
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d059      	beq.n	800b65e <_dtoa_r+0x8f6>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	f000 fff9 	bl	800c5a4 <__mcmp>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	da53      	bge.n	800b65e <_dtoa_r+0x8f6>
 800b5b6:	1e7b      	subs	r3, r7, #1
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	2300      	movs	r3, #0
 800b5be:	220a      	movs	r2, #10
 800b5c0:	4658      	mov	r0, fp
 800b5c2:	f000 fd8d 	bl	800c0e0 <__multadd>
 800b5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 8172 	beq.w	800b8b4 <_dtoa_r+0xb4c>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	220a      	movs	r2, #10
 800b5d6:	4658      	mov	r0, fp
 800b5d8:	f000 fd82 	bl	800c0e0 <__multadd>
 800b5dc:	9b00      	ldr	r3, [sp, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	dc67      	bgt.n	800b6b4 <_dtoa_r+0x94c>
 800b5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	dc41      	bgt.n	800b66e <_dtoa_r+0x906>
 800b5ea:	e063      	b.n	800b6b4 <_dtoa_r+0x94c>
 800b5ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b5f2:	e746      	b.n	800b482 <_dtoa_r+0x71a>
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	1e5c      	subs	r4, r3, #1
 800b5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5fa:	42a3      	cmp	r3, r4
 800b5fc:	bfbf      	itttt	lt
 800b5fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b600:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b602:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b604:	1ae3      	sublt	r3, r4, r3
 800b606:	bfb4      	ite	lt
 800b608:	18d2      	addlt	r2, r2, r3
 800b60a:	1b1c      	subge	r4, r3, r4
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	bfbc      	itt	lt
 800b610:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b612:	2400      	movlt	r4, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	bfb5      	itete	lt
 800b618:	eba8 0603 	sublt.w	r6, r8, r3
 800b61c:	9b07      	ldrge	r3, [sp, #28]
 800b61e:	2300      	movlt	r3, #0
 800b620:	4646      	movge	r6, r8
 800b622:	e730      	b.n	800b486 <_dtoa_r+0x71e>
 800b624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b626:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b628:	4646      	mov	r6, r8
 800b62a:	e735      	b.n	800b498 <_dtoa_r+0x730>
 800b62c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b62e:	e75c      	b.n	800b4ea <_dtoa_r+0x782>
 800b630:	2300      	movs	r3, #0
 800b632:	e788      	b.n	800b546 <_dtoa_r+0x7de>
 800b634:	3fe00000 	.word	0x3fe00000
 800b638:	40240000 	.word	0x40240000
 800b63c:	40140000 	.word	0x40140000
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	e780      	b.n	800b546 <_dtoa_r+0x7de>
 800b644:	2300      	movs	r3, #0
 800b646:	930a      	str	r3, [sp, #40]	@ 0x28
 800b648:	e782      	b.n	800b550 <_dtoa_r+0x7e8>
 800b64a:	d099      	beq.n	800b580 <_dtoa_r+0x818>
 800b64c:	9a08      	ldr	r2, [sp, #32]
 800b64e:	331c      	adds	r3, #28
 800b650:	441a      	add	r2, r3
 800b652:	4498      	add	r8, r3
 800b654:	441e      	add	r6, r3
 800b656:	9208      	str	r2, [sp, #32]
 800b658:	e792      	b.n	800b580 <_dtoa_r+0x818>
 800b65a:	4603      	mov	r3, r0
 800b65c:	e7f6      	b.n	800b64c <_dtoa_r+0x8e4>
 800b65e:	9b07      	ldr	r3, [sp, #28]
 800b660:	9704      	str	r7, [sp, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dc20      	bgt.n	800b6a8 <_dtoa_r+0x940>
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	dd1e      	ble.n	800b6ac <_dtoa_r+0x944>
 800b66e:	9b00      	ldr	r3, [sp, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f47f aec0 	bne.w	800b3f6 <_dtoa_r+0x68e>
 800b676:	4621      	mov	r1, r4
 800b678:	2205      	movs	r2, #5
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 fd30 	bl	800c0e0 <__multadd>
 800b680:	4601      	mov	r1, r0
 800b682:	4604      	mov	r4, r0
 800b684:	4648      	mov	r0, r9
 800b686:	f000 ff8d 	bl	800c5a4 <__mcmp>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f77f aeb3 	ble.w	800b3f6 <_dtoa_r+0x68e>
 800b690:	4656      	mov	r6, sl
 800b692:	2331      	movs	r3, #49	@ 0x31
 800b694:	f806 3b01 	strb.w	r3, [r6], #1
 800b698:	9b04      	ldr	r3, [sp, #16]
 800b69a:	3301      	adds	r3, #1
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	e6ae      	b.n	800b3fe <_dtoa_r+0x696>
 800b6a0:	9c07      	ldr	r4, [sp, #28]
 800b6a2:	9704      	str	r7, [sp, #16]
 800b6a4:	4625      	mov	r5, r4
 800b6a6:	e7f3      	b.n	800b690 <_dtoa_r+0x928>
 800b6a8:	9b07      	ldr	r3, [sp, #28]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8104 	beq.w	800b8bc <_dtoa_r+0xb54>
 800b6b4:	2e00      	cmp	r6, #0
 800b6b6:	dd05      	ble.n	800b6c4 <_dtoa_r+0x95c>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f000 ff05 	bl	800c4cc <__lshift>
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d05a      	beq.n	800b780 <_dtoa_r+0xa18>
 800b6ca:	6869      	ldr	r1, [r5, #4]
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	f000 fca5 	bl	800c01c <_Balloc>
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <_dtoa_r+0x97a>
 800b6d6:	4b84      	ldr	r3, [pc, #528]	@ (800b8e8 <_dtoa_r+0xb80>)
 800b6d8:	4602      	mov	r2, r0
 800b6da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b6de:	f7ff bb5a 	b.w	800ad96 <_dtoa_r+0x2e>
 800b6e2:	692a      	ldr	r2, [r5, #16]
 800b6e4:	3202      	adds	r2, #2
 800b6e6:	0092      	lsls	r2, r2, #2
 800b6e8:	f105 010c 	add.w	r1, r5, #12
 800b6ec:	300c      	adds	r0, #12
 800b6ee:	f7ff fa78 	bl	800abe2 <memcpy>
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4658      	mov	r0, fp
 800b6f8:	f000 fee8 	bl	800c4cc <__lshift>
 800b6fc:	f10a 0301 	add.w	r3, sl, #1
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	4453      	add	r3, sl
 800b706:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b708:	9b02      	ldr	r3, [sp, #8]
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	462f      	mov	r7, r5
 800b710:	930a      	str	r3, [sp, #40]	@ 0x28
 800b712:	4605      	mov	r5, r0
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	4621      	mov	r1, r4
 800b718:	3b01      	subs	r3, #1
 800b71a:	4648      	mov	r0, r9
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	f7ff fa9b 	bl	800ac58 <quorem>
 800b722:	4639      	mov	r1, r7
 800b724:	9002      	str	r0, [sp, #8]
 800b726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b72a:	4648      	mov	r0, r9
 800b72c:	f000 ff3a 	bl	800c5a4 <__mcmp>
 800b730:	462a      	mov	r2, r5
 800b732:	9008      	str	r0, [sp, #32]
 800b734:	4621      	mov	r1, r4
 800b736:	4658      	mov	r0, fp
 800b738:	f000 ff50 	bl	800c5dc <__mdiff>
 800b73c:	68c2      	ldr	r2, [r0, #12]
 800b73e:	4606      	mov	r6, r0
 800b740:	bb02      	cbnz	r2, 800b784 <_dtoa_r+0xa1c>
 800b742:	4601      	mov	r1, r0
 800b744:	4648      	mov	r0, r9
 800b746:	f000 ff2d 	bl	800c5a4 <__mcmp>
 800b74a:	4602      	mov	r2, r0
 800b74c:	4631      	mov	r1, r6
 800b74e:	4658      	mov	r0, fp
 800b750:	920e      	str	r2, [sp, #56]	@ 0x38
 800b752:	f000 fca3 	bl	800c09c <_Bfree>
 800b756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b75a:	9e07      	ldr	r6, [sp, #28]
 800b75c:	ea43 0102 	orr.w	r1, r3, r2
 800b760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b762:	4319      	orrs	r1, r3
 800b764:	d110      	bne.n	800b788 <_dtoa_r+0xa20>
 800b766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b76a:	d029      	beq.n	800b7c0 <_dtoa_r+0xa58>
 800b76c:	9b08      	ldr	r3, [sp, #32]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dd02      	ble.n	800b778 <_dtoa_r+0xa10>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	f883 8000 	strb.w	r8, [r3]
 800b77e:	e63f      	b.n	800b400 <_dtoa_r+0x698>
 800b780:	4628      	mov	r0, r5
 800b782:	e7bb      	b.n	800b6fc <_dtoa_r+0x994>
 800b784:	2201      	movs	r2, #1
 800b786:	e7e1      	b.n	800b74c <_dtoa_r+0x9e4>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	db04      	blt.n	800b798 <_dtoa_r+0xa30>
 800b78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b790:	430b      	orrs	r3, r1
 800b792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b794:	430b      	orrs	r3, r1
 800b796:	d120      	bne.n	800b7da <_dtoa_r+0xa72>
 800b798:	2a00      	cmp	r2, #0
 800b79a:	dded      	ble.n	800b778 <_dtoa_r+0xa10>
 800b79c:	4649      	mov	r1, r9
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4658      	mov	r0, fp
 800b7a2:	f000 fe93 	bl	800c4cc <__lshift>
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	f000 fefb 	bl	800c5a4 <__mcmp>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	dc03      	bgt.n	800b7ba <_dtoa_r+0xa52>
 800b7b2:	d1e1      	bne.n	800b778 <_dtoa_r+0xa10>
 800b7b4:	f018 0f01 	tst.w	r8, #1
 800b7b8:	d0de      	beq.n	800b778 <_dtoa_r+0xa10>
 800b7ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7be:	d1d8      	bne.n	800b772 <_dtoa_r+0xa0a>
 800b7c0:	9a00      	ldr	r2, [sp, #0]
 800b7c2:	2339      	movs	r3, #57	@ 0x39
 800b7c4:	7013      	strb	r3, [r2, #0]
 800b7c6:	4633      	mov	r3, r6
 800b7c8:	461e      	mov	r6, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b7d0:	2a39      	cmp	r2, #57	@ 0x39
 800b7d2:	d052      	beq.n	800b87a <_dtoa_r+0xb12>
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	e612      	b.n	800b400 <_dtoa_r+0x698>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	dd07      	ble.n	800b7ee <_dtoa_r+0xa86>
 800b7de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7e2:	d0ed      	beq.n	800b7c0 <_dtoa_r+0xa58>
 800b7e4:	9a00      	ldr	r2, [sp, #0]
 800b7e6:	f108 0301 	add.w	r3, r8, #1
 800b7ea:	7013      	strb	r3, [r2, #0]
 800b7ec:	e608      	b.n	800b400 <_dtoa_r+0x698>
 800b7ee:	9b07      	ldr	r3, [sp, #28]
 800b7f0:	9a07      	ldr	r2, [sp, #28]
 800b7f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d028      	beq.n	800b84e <_dtoa_r+0xae6>
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	2300      	movs	r3, #0
 800b800:	220a      	movs	r2, #10
 800b802:	4658      	mov	r0, fp
 800b804:	f000 fc6c 	bl	800c0e0 <__multadd>
 800b808:	42af      	cmp	r7, r5
 800b80a:	4681      	mov	r9, r0
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	f04f 020a 	mov.w	r2, #10
 800b814:	4639      	mov	r1, r7
 800b816:	4658      	mov	r0, fp
 800b818:	d107      	bne.n	800b82a <_dtoa_r+0xac2>
 800b81a:	f000 fc61 	bl	800c0e0 <__multadd>
 800b81e:	4607      	mov	r7, r0
 800b820:	4605      	mov	r5, r0
 800b822:	9b07      	ldr	r3, [sp, #28]
 800b824:	3301      	adds	r3, #1
 800b826:	9307      	str	r3, [sp, #28]
 800b828:	e774      	b.n	800b714 <_dtoa_r+0x9ac>
 800b82a:	f000 fc59 	bl	800c0e0 <__multadd>
 800b82e:	4629      	mov	r1, r5
 800b830:	4607      	mov	r7, r0
 800b832:	2300      	movs	r3, #0
 800b834:	220a      	movs	r2, #10
 800b836:	4658      	mov	r0, fp
 800b838:	f000 fc52 	bl	800c0e0 <__multadd>
 800b83c:	4605      	mov	r5, r0
 800b83e:	e7f0      	b.n	800b822 <_dtoa_r+0xaba>
 800b840:	9b00      	ldr	r3, [sp, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	bfcc      	ite	gt
 800b846:	461e      	movgt	r6, r3
 800b848:	2601      	movle	r6, #1
 800b84a:	4456      	add	r6, sl
 800b84c:	2700      	movs	r7, #0
 800b84e:	4649      	mov	r1, r9
 800b850:	2201      	movs	r2, #1
 800b852:	4658      	mov	r0, fp
 800b854:	f000 fe3a 	bl	800c4cc <__lshift>
 800b858:	4621      	mov	r1, r4
 800b85a:	4681      	mov	r9, r0
 800b85c:	f000 fea2 	bl	800c5a4 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	dcb0      	bgt.n	800b7c6 <_dtoa_r+0xa5e>
 800b864:	d102      	bne.n	800b86c <_dtoa_r+0xb04>
 800b866:	f018 0f01 	tst.w	r8, #1
 800b86a:	d1ac      	bne.n	800b7c6 <_dtoa_r+0xa5e>
 800b86c:	4633      	mov	r3, r6
 800b86e:	461e      	mov	r6, r3
 800b870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b874:	2a30      	cmp	r2, #48	@ 0x30
 800b876:	d0fa      	beq.n	800b86e <_dtoa_r+0xb06>
 800b878:	e5c2      	b.n	800b400 <_dtoa_r+0x698>
 800b87a:	459a      	cmp	sl, r3
 800b87c:	d1a4      	bne.n	800b7c8 <_dtoa_r+0xa60>
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	3301      	adds	r3, #1
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	2331      	movs	r3, #49	@ 0x31
 800b886:	f88a 3000 	strb.w	r3, [sl]
 800b88a:	e5b9      	b.n	800b400 <_dtoa_r+0x698>
 800b88c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b88e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b8ec <_dtoa_r+0xb84>
 800b892:	b11b      	cbz	r3, 800b89c <_dtoa_r+0xb34>
 800b894:	f10a 0308 	add.w	r3, sl, #8
 800b898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	4650      	mov	r0, sl
 800b89e:	b019      	add	sp, #100	@ 0x64
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	f77f ae37 	ble.w	800b51a <_dtoa_r+0x7b2>
 800b8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	e655      	b.n	800b560 <_dtoa_r+0x7f8>
 800b8b4:	9b00      	ldr	r3, [sp, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f77f aed6 	ble.w	800b668 <_dtoa_r+0x900>
 800b8bc:	4656      	mov	r6, sl
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	f7ff f9c9 	bl	800ac58 <quorem>
 800b8c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8ca:	f806 8b01 	strb.w	r8, [r6], #1
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	eba6 020a 	sub.w	r2, r6, sl
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	ddb3      	ble.n	800b840 <_dtoa_r+0xad8>
 800b8d8:	4649      	mov	r1, r9
 800b8da:	2300      	movs	r3, #0
 800b8dc:	220a      	movs	r2, #10
 800b8de:	4658      	mov	r0, fp
 800b8e0:	f000 fbfe 	bl	800c0e0 <__multadd>
 800b8e4:	4681      	mov	r9, r0
 800b8e6:	e7ea      	b.n	800b8be <_dtoa_r+0xb56>
 800b8e8:	0800d8a3 	.word	0x0800d8a3
 800b8ec:	0800d83e 	.word	0x0800d83e

0800b8f0 <_free_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d041      	beq.n	800b97c <_free_r+0x8c>
 800b8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8fc:	1f0c      	subs	r4, r1, #4
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfb8      	it	lt
 800b902:	18e4      	addlt	r4, r4, r3
 800b904:	f7fd f946 	bl	8008b94 <__malloc_lock>
 800b908:	4a1d      	ldr	r2, [pc, #116]	@ (800b980 <_free_r+0x90>)
 800b90a:	6813      	ldr	r3, [r2, #0]
 800b90c:	b933      	cbnz	r3, 800b91c <_free_r+0x2c>
 800b90e:	6063      	str	r3, [r4, #4]
 800b910:	6014      	str	r4, [r2, #0]
 800b912:	4628      	mov	r0, r5
 800b914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b918:	f7fd b942 	b.w	8008ba0 <__malloc_unlock>
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	d908      	bls.n	800b932 <_free_r+0x42>
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	1821      	adds	r1, r4, r0
 800b924:	428b      	cmp	r3, r1
 800b926:	bf01      	itttt	eq
 800b928:	6819      	ldreq	r1, [r3, #0]
 800b92a:	685b      	ldreq	r3, [r3, #4]
 800b92c:	1809      	addeq	r1, r1, r0
 800b92e:	6021      	streq	r1, [r4, #0]
 800b930:	e7ed      	b.n	800b90e <_free_r+0x1e>
 800b932:	461a      	mov	r2, r3
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	b10b      	cbz	r3, 800b93c <_free_r+0x4c>
 800b938:	42a3      	cmp	r3, r4
 800b93a:	d9fa      	bls.n	800b932 <_free_r+0x42>
 800b93c:	6811      	ldr	r1, [r2, #0]
 800b93e:	1850      	adds	r0, r2, r1
 800b940:	42a0      	cmp	r0, r4
 800b942:	d10b      	bne.n	800b95c <_free_r+0x6c>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	4401      	add	r1, r0
 800b948:	1850      	adds	r0, r2, r1
 800b94a:	4283      	cmp	r3, r0
 800b94c:	6011      	str	r1, [r2, #0]
 800b94e:	d1e0      	bne.n	800b912 <_free_r+0x22>
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	6053      	str	r3, [r2, #4]
 800b956:	4408      	add	r0, r1
 800b958:	6010      	str	r0, [r2, #0]
 800b95a:	e7da      	b.n	800b912 <_free_r+0x22>
 800b95c:	d902      	bls.n	800b964 <_free_r+0x74>
 800b95e:	230c      	movs	r3, #12
 800b960:	602b      	str	r3, [r5, #0]
 800b962:	e7d6      	b.n	800b912 <_free_r+0x22>
 800b964:	6820      	ldr	r0, [r4, #0]
 800b966:	1821      	adds	r1, r4, r0
 800b968:	428b      	cmp	r3, r1
 800b96a:	bf04      	itt	eq
 800b96c:	6819      	ldreq	r1, [r3, #0]
 800b96e:	685b      	ldreq	r3, [r3, #4]
 800b970:	6063      	str	r3, [r4, #4]
 800b972:	bf04      	itt	eq
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	6054      	str	r4, [r2, #4]
 800b97a:	e7ca      	b.n	800b912 <_free_r+0x22>
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	2000069c 	.word	0x2000069c

0800b984 <rshift>:
 800b984:	6903      	ldr	r3, [r0, #16]
 800b986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b98a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b98e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b992:	f100 0414 	add.w	r4, r0, #20
 800b996:	dd45      	ble.n	800ba24 <rshift+0xa0>
 800b998:	f011 011f 	ands.w	r1, r1, #31
 800b99c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9a4:	d10c      	bne.n	800b9c0 <rshift+0x3c>
 800b9a6:	f100 0710 	add.w	r7, r0, #16
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	42b1      	cmp	r1, r6
 800b9ae:	d334      	bcc.n	800ba1a <rshift+0x96>
 800b9b0:	1a9b      	subs	r3, r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	1eea      	subs	r2, r5, #3
 800b9b6:	4296      	cmp	r6, r2
 800b9b8:	bf38      	it	cc
 800b9ba:	2300      	movcc	r3, #0
 800b9bc:	4423      	add	r3, r4
 800b9be:	e015      	b.n	800b9ec <rshift+0x68>
 800b9c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9c4:	f1c1 0820 	rsb	r8, r1, #32
 800b9c8:	40cf      	lsrs	r7, r1
 800b9ca:	f105 0e04 	add.w	lr, r5, #4
 800b9ce:	46a1      	mov	r9, r4
 800b9d0:	4576      	cmp	r6, lr
 800b9d2:	46f4      	mov	ip, lr
 800b9d4:	d815      	bhi.n	800ba02 <rshift+0x7e>
 800b9d6:	1a9a      	subs	r2, r3, r2
 800b9d8:	0092      	lsls	r2, r2, #2
 800b9da:	3a04      	subs	r2, #4
 800b9dc:	3501      	adds	r5, #1
 800b9de:	42ae      	cmp	r6, r5
 800b9e0:	bf38      	it	cc
 800b9e2:	2200      	movcc	r2, #0
 800b9e4:	18a3      	adds	r3, r4, r2
 800b9e6:	50a7      	str	r7, [r4, r2]
 800b9e8:	b107      	cbz	r7, 800b9ec <rshift+0x68>
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	1b1a      	subs	r2, r3, r4
 800b9ee:	42a3      	cmp	r3, r4
 800b9f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9f4:	bf08      	it	eq
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	6102      	str	r2, [r0, #16]
 800b9fa:	bf08      	it	eq
 800b9fc:	6143      	streq	r3, [r0, #20]
 800b9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba02:	f8dc c000 	ldr.w	ip, [ip]
 800ba06:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba0a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba0e:	f849 7b04 	str.w	r7, [r9], #4
 800ba12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba16:	40cf      	lsrs	r7, r1
 800ba18:	e7da      	b.n	800b9d0 <rshift+0x4c>
 800ba1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba22:	e7c3      	b.n	800b9ac <rshift+0x28>
 800ba24:	4623      	mov	r3, r4
 800ba26:	e7e1      	b.n	800b9ec <rshift+0x68>

0800ba28 <__hexdig_fun>:
 800ba28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ba2c:	2b09      	cmp	r3, #9
 800ba2e:	d802      	bhi.n	800ba36 <__hexdig_fun+0xe>
 800ba30:	3820      	subs	r0, #32
 800ba32:	b2c0      	uxtb	r0, r0
 800ba34:	4770      	bx	lr
 800ba36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ba3a:	2b05      	cmp	r3, #5
 800ba3c:	d801      	bhi.n	800ba42 <__hexdig_fun+0x1a>
 800ba3e:	3847      	subs	r0, #71	@ 0x47
 800ba40:	e7f7      	b.n	800ba32 <__hexdig_fun+0xa>
 800ba42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ba46:	2b05      	cmp	r3, #5
 800ba48:	d801      	bhi.n	800ba4e <__hexdig_fun+0x26>
 800ba4a:	3827      	subs	r0, #39	@ 0x27
 800ba4c:	e7f1      	b.n	800ba32 <__hexdig_fun+0xa>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	4770      	bx	lr
	...

0800ba54 <__gethex>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	b085      	sub	sp, #20
 800ba5a:	468a      	mov	sl, r1
 800ba5c:	9302      	str	r3, [sp, #8]
 800ba5e:	680b      	ldr	r3, [r1, #0]
 800ba60:	9001      	str	r0, [sp, #4]
 800ba62:	4690      	mov	r8, r2
 800ba64:	1c9c      	adds	r4, r3, #2
 800ba66:	46a1      	mov	r9, r4
 800ba68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba6c:	2830      	cmp	r0, #48	@ 0x30
 800ba6e:	d0fa      	beq.n	800ba66 <__gethex+0x12>
 800ba70:	eba9 0303 	sub.w	r3, r9, r3
 800ba74:	f1a3 0b02 	sub.w	fp, r3, #2
 800ba78:	f7ff ffd6 	bl	800ba28 <__hexdig_fun>
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d168      	bne.n	800bb54 <__gethex+0x100>
 800ba82:	49a0      	ldr	r1, [pc, #640]	@ (800bd04 <__gethex+0x2b0>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	4648      	mov	r0, r9
 800ba88:	f7fe ffb5 	bl	800a9f6 <strncmp>
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d167      	bne.n	800bb62 <__gethex+0x10e>
 800ba92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ba96:	4626      	mov	r6, r4
 800ba98:	f7ff ffc6 	bl	800ba28 <__hexdig_fun>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d062      	beq.n	800bb66 <__gethex+0x112>
 800baa0:	4623      	mov	r3, r4
 800baa2:	7818      	ldrb	r0, [r3, #0]
 800baa4:	2830      	cmp	r0, #48	@ 0x30
 800baa6:	4699      	mov	r9, r3
 800baa8:	f103 0301 	add.w	r3, r3, #1
 800baac:	d0f9      	beq.n	800baa2 <__gethex+0x4e>
 800baae:	f7ff ffbb 	bl	800ba28 <__hexdig_fun>
 800bab2:	fab0 f580 	clz	r5, r0
 800bab6:	096d      	lsrs	r5, r5, #5
 800bab8:	f04f 0b01 	mov.w	fp, #1
 800babc:	464a      	mov	r2, r9
 800babe:	4616      	mov	r6, r2
 800bac0:	3201      	adds	r2, #1
 800bac2:	7830      	ldrb	r0, [r6, #0]
 800bac4:	f7ff ffb0 	bl	800ba28 <__hexdig_fun>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d1f8      	bne.n	800babe <__gethex+0x6a>
 800bacc:	498d      	ldr	r1, [pc, #564]	@ (800bd04 <__gethex+0x2b0>)
 800bace:	2201      	movs	r2, #1
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7fe ff90 	bl	800a9f6 <strncmp>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d13f      	bne.n	800bb5a <__gethex+0x106>
 800bada:	b944      	cbnz	r4, 800baee <__gethex+0x9a>
 800badc:	1c74      	adds	r4, r6, #1
 800bade:	4622      	mov	r2, r4
 800bae0:	4616      	mov	r6, r2
 800bae2:	3201      	adds	r2, #1
 800bae4:	7830      	ldrb	r0, [r6, #0]
 800bae6:	f7ff ff9f 	bl	800ba28 <__hexdig_fun>
 800baea:	2800      	cmp	r0, #0
 800baec:	d1f8      	bne.n	800bae0 <__gethex+0x8c>
 800baee:	1ba4      	subs	r4, r4, r6
 800baf0:	00a7      	lsls	r7, r4, #2
 800baf2:	7833      	ldrb	r3, [r6, #0]
 800baf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800baf8:	2b50      	cmp	r3, #80	@ 0x50
 800bafa:	d13e      	bne.n	800bb7a <__gethex+0x126>
 800bafc:	7873      	ldrb	r3, [r6, #1]
 800bafe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb00:	d033      	beq.n	800bb6a <__gethex+0x116>
 800bb02:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb04:	d034      	beq.n	800bb70 <__gethex+0x11c>
 800bb06:	1c71      	adds	r1, r6, #1
 800bb08:	2400      	movs	r4, #0
 800bb0a:	7808      	ldrb	r0, [r1, #0]
 800bb0c:	f7ff ff8c 	bl	800ba28 <__hexdig_fun>
 800bb10:	1e43      	subs	r3, r0, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b18      	cmp	r3, #24
 800bb16:	d830      	bhi.n	800bb7a <__gethex+0x126>
 800bb18:	f1a0 0210 	sub.w	r2, r0, #16
 800bb1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb20:	f7ff ff82 	bl	800ba28 <__hexdig_fun>
 800bb24:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb28:	fa5f fc8c 	uxtb.w	ip, ip
 800bb2c:	f1bc 0f18 	cmp.w	ip, #24
 800bb30:	f04f 030a 	mov.w	r3, #10
 800bb34:	d91e      	bls.n	800bb74 <__gethex+0x120>
 800bb36:	b104      	cbz	r4, 800bb3a <__gethex+0xe6>
 800bb38:	4252      	negs	r2, r2
 800bb3a:	4417      	add	r7, r2
 800bb3c:	f8ca 1000 	str.w	r1, [sl]
 800bb40:	b1ed      	cbz	r5, 800bb7e <__gethex+0x12a>
 800bb42:	f1bb 0f00 	cmp.w	fp, #0
 800bb46:	bf0c      	ite	eq
 800bb48:	2506      	moveq	r5, #6
 800bb4a:	2500      	movne	r5, #0
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	b005      	add	sp, #20
 800bb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb54:	2500      	movs	r5, #0
 800bb56:	462c      	mov	r4, r5
 800bb58:	e7b0      	b.n	800babc <__gethex+0x68>
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	d1c7      	bne.n	800baee <__gethex+0x9a>
 800bb5e:	4627      	mov	r7, r4
 800bb60:	e7c7      	b.n	800baf2 <__gethex+0x9e>
 800bb62:	464e      	mov	r6, r9
 800bb64:	462f      	mov	r7, r5
 800bb66:	2501      	movs	r5, #1
 800bb68:	e7c3      	b.n	800baf2 <__gethex+0x9e>
 800bb6a:	2400      	movs	r4, #0
 800bb6c:	1cb1      	adds	r1, r6, #2
 800bb6e:	e7cc      	b.n	800bb0a <__gethex+0xb6>
 800bb70:	2401      	movs	r4, #1
 800bb72:	e7fb      	b.n	800bb6c <__gethex+0x118>
 800bb74:	fb03 0002 	mla	r0, r3, r2, r0
 800bb78:	e7ce      	b.n	800bb18 <__gethex+0xc4>
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	e7de      	b.n	800bb3c <__gethex+0xe8>
 800bb7e:	eba6 0309 	sub.w	r3, r6, r9
 800bb82:	3b01      	subs	r3, #1
 800bb84:	4629      	mov	r1, r5
 800bb86:	2b07      	cmp	r3, #7
 800bb88:	dc0a      	bgt.n	800bba0 <__gethex+0x14c>
 800bb8a:	9801      	ldr	r0, [sp, #4]
 800bb8c:	f000 fa46 	bl	800c01c <_Balloc>
 800bb90:	4604      	mov	r4, r0
 800bb92:	b940      	cbnz	r0, 800bba6 <__gethex+0x152>
 800bb94:	4b5c      	ldr	r3, [pc, #368]	@ (800bd08 <__gethex+0x2b4>)
 800bb96:	4602      	mov	r2, r0
 800bb98:	21e4      	movs	r1, #228	@ 0xe4
 800bb9a:	485c      	ldr	r0, [pc, #368]	@ (800bd0c <__gethex+0x2b8>)
 800bb9c:	f7ff f83e 	bl	800ac1c <__assert_func>
 800bba0:	3101      	adds	r1, #1
 800bba2:	105b      	asrs	r3, r3, #1
 800bba4:	e7ef      	b.n	800bb86 <__gethex+0x132>
 800bba6:	f100 0a14 	add.w	sl, r0, #20
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4655      	mov	r5, sl
 800bbae:	469b      	mov	fp, r3
 800bbb0:	45b1      	cmp	r9, r6
 800bbb2:	d337      	bcc.n	800bc24 <__gethex+0x1d0>
 800bbb4:	f845 bb04 	str.w	fp, [r5], #4
 800bbb8:	eba5 050a 	sub.w	r5, r5, sl
 800bbbc:	10ad      	asrs	r5, r5, #2
 800bbbe:	6125      	str	r5, [r4, #16]
 800bbc0:	4658      	mov	r0, fp
 800bbc2:	f000 fb1d 	bl	800c200 <__hi0bits>
 800bbc6:	016d      	lsls	r5, r5, #5
 800bbc8:	f8d8 6000 	ldr.w	r6, [r8]
 800bbcc:	1a2d      	subs	r5, r5, r0
 800bbce:	42b5      	cmp	r5, r6
 800bbd0:	dd54      	ble.n	800bc7c <__gethex+0x228>
 800bbd2:	1bad      	subs	r5, r5, r6
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 feb1 	bl	800c93e <__any_on>
 800bbdc:	4681      	mov	r9, r0
 800bbde:	b178      	cbz	r0, 800bc00 <__gethex+0x1ac>
 800bbe0:	1e6b      	subs	r3, r5, #1
 800bbe2:	1159      	asrs	r1, r3, #5
 800bbe4:	f003 021f 	and.w	r2, r3, #31
 800bbe8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bbec:	f04f 0901 	mov.w	r9, #1
 800bbf0:	fa09 f202 	lsl.w	r2, r9, r2
 800bbf4:	420a      	tst	r2, r1
 800bbf6:	d003      	beq.n	800bc00 <__gethex+0x1ac>
 800bbf8:	454b      	cmp	r3, r9
 800bbfa:	dc36      	bgt.n	800bc6a <__gethex+0x216>
 800bbfc:	f04f 0902 	mov.w	r9, #2
 800bc00:	4629      	mov	r1, r5
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7ff febe 	bl	800b984 <rshift>
 800bc08:	442f      	add	r7, r5
 800bc0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc0e:	42bb      	cmp	r3, r7
 800bc10:	da42      	bge.n	800bc98 <__gethex+0x244>
 800bc12:	9801      	ldr	r0, [sp, #4]
 800bc14:	4621      	mov	r1, r4
 800bc16:	f000 fa41 	bl	800c09c <_Bfree>
 800bc1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	25a3      	movs	r5, #163	@ 0xa3
 800bc22:	e793      	b.n	800bb4c <__gethex+0xf8>
 800bc24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bc28:	2a2e      	cmp	r2, #46	@ 0x2e
 800bc2a:	d012      	beq.n	800bc52 <__gethex+0x1fe>
 800bc2c:	2b20      	cmp	r3, #32
 800bc2e:	d104      	bne.n	800bc3a <__gethex+0x1e6>
 800bc30:	f845 bb04 	str.w	fp, [r5], #4
 800bc34:	f04f 0b00 	mov.w	fp, #0
 800bc38:	465b      	mov	r3, fp
 800bc3a:	7830      	ldrb	r0, [r6, #0]
 800bc3c:	9303      	str	r3, [sp, #12]
 800bc3e:	f7ff fef3 	bl	800ba28 <__hexdig_fun>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	f000 000f 	and.w	r0, r0, #15
 800bc48:	4098      	lsls	r0, r3
 800bc4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bc4e:	3304      	adds	r3, #4
 800bc50:	e7ae      	b.n	800bbb0 <__gethex+0x15c>
 800bc52:	45b1      	cmp	r9, r6
 800bc54:	d8ea      	bhi.n	800bc2c <__gethex+0x1d8>
 800bc56:	492b      	ldr	r1, [pc, #172]	@ (800bd04 <__gethex+0x2b0>)
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fe feca 	bl	800a9f6 <strncmp>
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1e1      	bne.n	800bc2c <__gethex+0x1d8>
 800bc68:	e7a2      	b.n	800bbb0 <__gethex+0x15c>
 800bc6a:	1ea9      	subs	r1, r5, #2
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 fe66 	bl	800c93e <__any_on>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d0c2      	beq.n	800bbfc <__gethex+0x1a8>
 800bc76:	f04f 0903 	mov.w	r9, #3
 800bc7a:	e7c1      	b.n	800bc00 <__gethex+0x1ac>
 800bc7c:	da09      	bge.n	800bc92 <__gethex+0x23e>
 800bc7e:	1b75      	subs	r5, r6, r5
 800bc80:	4621      	mov	r1, r4
 800bc82:	9801      	ldr	r0, [sp, #4]
 800bc84:	462a      	mov	r2, r5
 800bc86:	f000 fc21 	bl	800c4cc <__lshift>
 800bc8a:	1b7f      	subs	r7, r7, r5
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	f100 0a14 	add.w	sl, r0, #20
 800bc92:	f04f 0900 	mov.w	r9, #0
 800bc96:	e7b8      	b.n	800bc0a <__gethex+0x1b6>
 800bc98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc9c:	42bd      	cmp	r5, r7
 800bc9e:	dd6f      	ble.n	800bd80 <__gethex+0x32c>
 800bca0:	1bed      	subs	r5, r5, r7
 800bca2:	42ae      	cmp	r6, r5
 800bca4:	dc34      	bgt.n	800bd10 <__gethex+0x2bc>
 800bca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d022      	beq.n	800bcf4 <__gethex+0x2a0>
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d024      	beq.n	800bcfc <__gethex+0x2a8>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d115      	bne.n	800bce2 <__gethex+0x28e>
 800bcb6:	42ae      	cmp	r6, r5
 800bcb8:	d113      	bne.n	800bce2 <__gethex+0x28e>
 800bcba:	2e01      	cmp	r6, #1
 800bcbc:	d10b      	bne.n	800bcd6 <__gethex+0x282>
 800bcbe:	9a02      	ldr	r2, [sp, #8]
 800bcc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	f8ca 3000 	str.w	r3, [sl]
 800bcce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd0:	2562      	movs	r5, #98	@ 0x62
 800bcd2:	601c      	str	r4, [r3, #0]
 800bcd4:	e73a      	b.n	800bb4c <__gethex+0xf8>
 800bcd6:	1e71      	subs	r1, r6, #1
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fe30 	bl	800c93e <__any_on>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d1ed      	bne.n	800bcbe <__gethex+0x26a>
 800bce2:	9801      	ldr	r0, [sp, #4]
 800bce4:	4621      	mov	r1, r4
 800bce6:	f000 f9d9 	bl	800c09c <_Bfree>
 800bcea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcec:	2300      	movs	r3, #0
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	2550      	movs	r5, #80	@ 0x50
 800bcf2:	e72b      	b.n	800bb4c <__gethex+0xf8>
 800bcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f3      	bne.n	800bce2 <__gethex+0x28e>
 800bcfa:	e7e0      	b.n	800bcbe <__gethex+0x26a>
 800bcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1dd      	bne.n	800bcbe <__gethex+0x26a>
 800bd02:	e7ee      	b.n	800bce2 <__gethex+0x28e>
 800bd04:	0800d6f8 	.word	0x0800d6f8
 800bd08:	0800d8a3 	.word	0x0800d8a3
 800bd0c:	0800d8b4 	.word	0x0800d8b4
 800bd10:	1e6f      	subs	r7, r5, #1
 800bd12:	f1b9 0f00 	cmp.w	r9, #0
 800bd16:	d130      	bne.n	800bd7a <__gethex+0x326>
 800bd18:	b127      	cbz	r7, 800bd24 <__gethex+0x2d0>
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 fe0e 	bl	800c93e <__any_on>
 800bd22:	4681      	mov	r9, r0
 800bd24:	117a      	asrs	r2, r7, #5
 800bd26:	2301      	movs	r3, #1
 800bd28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd2c:	f007 071f 	and.w	r7, r7, #31
 800bd30:	40bb      	lsls	r3, r7
 800bd32:	4213      	tst	r3, r2
 800bd34:	4629      	mov	r1, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	bf18      	it	ne
 800bd3a:	f049 0902 	orrne.w	r9, r9, #2
 800bd3e:	f7ff fe21 	bl	800b984 <rshift>
 800bd42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bd46:	1b76      	subs	r6, r6, r5
 800bd48:	2502      	movs	r5, #2
 800bd4a:	f1b9 0f00 	cmp.w	r9, #0
 800bd4e:	d047      	beq.n	800bde0 <__gethex+0x38c>
 800bd50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d015      	beq.n	800bd84 <__gethex+0x330>
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d017      	beq.n	800bd8c <__gethex+0x338>
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d109      	bne.n	800bd74 <__gethex+0x320>
 800bd60:	f019 0f02 	tst.w	r9, #2
 800bd64:	d006      	beq.n	800bd74 <__gethex+0x320>
 800bd66:	f8da 3000 	ldr.w	r3, [sl]
 800bd6a:	ea49 0903 	orr.w	r9, r9, r3
 800bd6e:	f019 0f01 	tst.w	r9, #1
 800bd72:	d10e      	bne.n	800bd92 <__gethex+0x33e>
 800bd74:	f045 0510 	orr.w	r5, r5, #16
 800bd78:	e032      	b.n	800bde0 <__gethex+0x38c>
 800bd7a:	f04f 0901 	mov.w	r9, #1
 800bd7e:	e7d1      	b.n	800bd24 <__gethex+0x2d0>
 800bd80:	2501      	movs	r5, #1
 800bd82:	e7e2      	b.n	800bd4a <__gethex+0x2f6>
 800bd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd86:	f1c3 0301 	rsb	r3, r3, #1
 800bd8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f0      	beq.n	800bd74 <__gethex+0x320>
 800bd92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd96:	f104 0314 	add.w	r3, r4, #20
 800bd9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bda2:	f04f 0c00 	mov.w	ip, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdb0:	d01b      	beq.n	800bdea <__gethex+0x396>
 800bdb2:	3201      	adds	r2, #1
 800bdb4:	6002      	str	r2, [r0, #0]
 800bdb6:	2d02      	cmp	r5, #2
 800bdb8:	f104 0314 	add.w	r3, r4, #20
 800bdbc:	d13c      	bne.n	800be38 <__gethex+0x3e4>
 800bdbe:	f8d8 2000 	ldr.w	r2, [r8]
 800bdc2:	3a01      	subs	r2, #1
 800bdc4:	42b2      	cmp	r2, r6
 800bdc6:	d109      	bne.n	800bddc <__gethex+0x388>
 800bdc8:	1171      	asrs	r1, r6, #5
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdd0:	f006 061f 	and.w	r6, r6, #31
 800bdd4:	fa02 f606 	lsl.w	r6, r2, r6
 800bdd8:	421e      	tst	r6, r3
 800bdda:	d13a      	bne.n	800be52 <__gethex+0x3fe>
 800bddc:	f045 0520 	orr.w	r5, r5, #32
 800bde0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bde2:	601c      	str	r4, [r3, #0]
 800bde4:	9b02      	ldr	r3, [sp, #8]
 800bde6:	601f      	str	r7, [r3, #0]
 800bde8:	e6b0      	b.n	800bb4c <__gethex+0xf8>
 800bdea:	4299      	cmp	r1, r3
 800bdec:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdf0:	d8d9      	bhi.n	800bda6 <__gethex+0x352>
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	459b      	cmp	fp, r3
 800bdf6:	db17      	blt.n	800be28 <__gethex+0x3d4>
 800bdf8:	6861      	ldr	r1, [r4, #4]
 800bdfa:	9801      	ldr	r0, [sp, #4]
 800bdfc:	3101      	adds	r1, #1
 800bdfe:	f000 f90d 	bl	800c01c <_Balloc>
 800be02:	4681      	mov	r9, r0
 800be04:	b918      	cbnz	r0, 800be0e <__gethex+0x3ba>
 800be06:	4b1a      	ldr	r3, [pc, #104]	@ (800be70 <__gethex+0x41c>)
 800be08:	4602      	mov	r2, r0
 800be0a:	2184      	movs	r1, #132	@ 0x84
 800be0c:	e6c5      	b.n	800bb9a <__gethex+0x146>
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	3202      	adds	r2, #2
 800be12:	f104 010c 	add.w	r1, r4, #12
 800be16:	0092      	lsls	r2, r2, #2
 800be18:	300c      	adds	r0, #12
 800be1a:	f7fe fee2 	bl	800abe2 <memcpy>
 800be1e:	4621      	mov	r1, r4
 800be20:	9801      	ldr	r0, [sp, #4]
 800be22:	f000 f93b 	bl	800c09c <_Bfree>
 800be26:	464c      	mov	r4, r9
 800be28:	6923      	ldr	r3, [r4, #16]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be30:	6122      	str	r2, [r4, #16]
 800be32:	2201      	movs	r2, #1
 800be34:	615a      	str	r2, [r3, #20]
 800be36:	e7be      	b.n	800bdb6 <__gethex+0x362>
 800be38:	6922      	ldr	r2, [r4, #16]
 800be3a:	455a      	cmp	r2, fp
 800be3c:	dd0b      	ble.n	800be56 <__gethex+0x402>
 800be3e:	2101      	movs	r1, #1
 800be40:	4620      	mov	r0, r4
 800be42:	f7ff fd9f 	bl	800b984 <rshift>
 800be46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be4a:	3701      	adds	r7, #1
 800be4c:	42bb      	cmp	r3, r7
 800be4e:	f6ff aee0 	blt.w	800bc12 <__gethex+0x1be>
 800be52:	2501      	movs	r5, #1
 800be54:	e7c2      	b.n	800bddc <__gethex+0x388>
 800be56:	f016 061f 	ands.w	r6, r6, #31
 800be5a:	d0fa      	beq.n	800be52 <__gethex+0x3fe>
 800be5c:	4453      	add	r3, sl
 800be5e:	f1c6 0620 	rsb	r6, r6, #32
 800be62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be66:	f000 f9cb 	bl	800c200 <__hi0bits>
 800be6a:	42b0      	cmp	r0, r6
 800be6c:	dbe7      	blt.n	800be3e <__gethex+0x3ea>
 800be6e:	e7f0      	b.n	800be52 <__gethex+0x3fe>
 800be70:	0800d8a3 	.word	0x0800d8a3

0800be74 <L_shift>:
 800be74:	f1c2 0208 	rsb	r2, r2, #8
 800be78:	0092      	lsls	r2, r2, #2
 800be7a:	b570      	push	{r4, r5, r6, lr}
 800be7c:	f1c2 0620 	rsb	r6, r2, #32
 800be80:	6843      	ldr	r3, [r0, #4]
 800be82:	6804      	ldr	r4, [r0, #0]
 800be84:	fa03 f506 	lsl.w	r5, r3, r6
 800be88:	432c      	orrs	r4, r5
 800be8a:	40d3      	lsrs	r3, r2
 800be8c:	6004      	str	r4, [r0, #0]
 800be8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be92:	4288      	cmp	r0, r1
 800be94:	d3f4      	bcc.n	800be80 <L_shift+0xc>
 800be96:	bd70      	pop	{r4, r5, r6, pc}

0800be98 <__match>:
 800be98:	b530      	push	{r4, r5, lr}
 800be9a:	6803      	ldr	r3, [r0, #0]
 800be9c:	3301      	adds	r3, #1
 800be9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea2:	b914      	cbnz	r4, 800beaa <__match+0x12>
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	2001      	movs	r0, #1
 800bea8:	bd30      	pop	{r4, r5, pc}
 800beaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800beb2:	2d19      	cmp	r5, #25
 800beb4:	bf98      	it	ls
 800beb6:	3220      	addls	r2, #32
 800beb8:	42a2      	cmp	r2, r4
 800beba:	d0f0      	beq.n	800be9e <__match+0x6>
 800bebc:	2000      	movs	r0, #0
 800bebe:	e7f3      	b.n	800bea8 <__match+0x10>

0800bec0 <__hexnan>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	680b      	ldr	r3, [r1, #0]
 800bec6:	6801      	ldr	r1, [r0, #0]
 800bec8:	115e      	asrs	r6, r3, #5
 800beca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bece:	f013 031f 	ands.w	r3, r3, #31
 800bed2:	b087      	sub	sp, #28
 800bed4:	bf18      	it	ne
 800bed6:	3604      	addne	r6, #4
 800bed8:	2500      	movs	r5, #0
 800beda:	1f37      	subs	r7, r6, #4
 800bedc:	4682      	mov	sl, r0
 800bede:	4690      	mov	r8, r2
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bee6:	46b9      	mov	r9, r7
 800bee8:	463c      	mov	r4, r7
 800beea:	9502      	str	r5, [sp, #8]
 800beec:	46ab      	mov	fp, r5
 800beee:	784a      	ldrb	r2, [r1, #1]
 800bef0:	1c4b      	adds	r3, r1, #1
 800bef2:	9303      	str	r3, [sp, #12]
 800bef4:	b342      	cbz	r2, 800bf48 <__hexnan+0x88>
 800bef6:	4610      	mov	r0, r2
 800bef8:	9105      	str	r1, [sp, #20]
 800befa:	9204      	str	r2, [sp, #16]
 800befc:	f7ff fd94 	bl	800ba28 <__hexdig_fun>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d151      	bne.n	800bfa8 <__hexnan+0xe8>
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	9905      	ldr	r1, [sp, #20]
 800bf08:	2a20      	cmp	r2, #32
 800bf0a:	d818      	bhi.n	800bf3e <__hexnan+0x7e>
 800bf0c:	9b02      	ldr	r3, [sp, #8]
 800bf0e:	459b      	cmp	fp, r3
 800bf10:	dd13      	ble.n	800bf3a <__hexnan+0x7a>
 800bf12:	454c      	cmp	r4, r9
 800bf14:	d206      	bcs.n	800bf24 <__hexnan+0x64>
 800bf16:	2d07      	cmp	r5, #7
 800bf18:	dc04      	bgt.n	800bf24 <__hexnan+0x64>
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff ffa8 	bl	800be74 <L_shift>
 800bf24:	4544      	cmp	r4, r8
 800bf26:	d952      	bls.n	800bfce <__hexnan+0x10e>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f1a4 0904 	sub.w	r9, r4, #4
 800bf2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf32:	f8cd b008 	str.w	fp, [sp, #8]
 800bf36:	464c      	mov	r4, r9
 800bf38:	461d      	mov	r5, r3
 800bf3a:	9903      	ldr	r1, [sp, #12]
 800bf3c:	e7d7      	b.n	800beee <__hexnan+0x2e>
 800bf3e:	2a29      	cmp	r2, #41	@ 0x29
 800bf40:	d157      	bne.n	800bff2 <__hexnan+0x132>
 800bf42:	3102      	adds	r1, #2
 800bf44:	f8ca 1000 	str.w	r1, [sl]
 800bf48:	f1bb 0f00 	cmp.w	fp, #0
 800bf4c:	d051      	beq.n	800bff2 <__hexnan+0x132>
 800bf4e:	454c      	cmp	r4, r9
 800bf50:	d206      	bcs.n	800bf60 <__hexnan+0xa0>
 800bf52:	2d07      	cmp	r5, #7
 800bf54:	dc04      	bgt.n	800bf60 <__hexnan+0xa0>
 800bf56:	462a      	mov	r2, r5
 800bf58:	4649      	mov	r1, r9
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7ff ff8a 	bl	800be74 <L_shift>
 800bf60:	4544      	cmp	r4, r8
 800bf62:	d936      	bls.n	800bfd2 <__hexnan+0x112>
 800bf64:	f1a8 0204 	sub.w	r2, r8, #4
 800bf68:	4623      	mov	r3, r4
 800bf6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf72:	429f      	cmp	r7, r3
 800bf74:	d2f9      	bcs.n	800bf6a <__hexnan+0xaa>
 800bf76:	1b3b      	subs	r3, r7, r4
 800bf78:	f023 0303 	bic.w	r3, r3, #3
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	3401      	adds	r4, #1
 800bf80:	3e03      	subs	r6, #3
 800bf82:	42b4      	cmp	r4, r6
 800bf84:	bf88      	it	hi
 800bf86:	2304      	movhi	r3, #4
 800bf88:	4443      	add	r3, r8
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f843 2b04 	str.w	r2, [r3], #4
 800bf90:	429f      	cmp	r7, r3
 800bf92:	d2fb      	bcs.n	800bf8c <__hexnan+0xcc>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	b91b      	cbnz	r3, 800bfa0 <__hexnan+0xe0>
 800bf98:	4547      	cmp	r7, r8
 800bf9a:	d128      	bne.n	800bfee <__hexnan+0x12e>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	2005      	movs	r0, #5
 800bfa2:	b007      	add	sp, #28
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	3501      	adds	r5, #1
 800bfaa:	2d08      	cmp	r5, #8
 800bfac:	f10b 0b01 	add.w	fp, fp, #1
 800bfb0:	dd06      	ble.n	800bfc0 <__hexnan+0x100>
 800bfb2:	4544      	cmp	r4, r8
 800bfb4:	d9c1      	bls.n	800bf3a <__hexnan+0x7a>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfbc:	2501      	movs	r5, #1
 800bfbe:	3c04      	subs	r4, #4
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	f000 000f 	and.w	r0, r0, #15
 800bfc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bfca:	6020      	str	r0, [r4, #0]
 800bfcc:	e7b5      	b.n	800bf3a <__hexnan+0x7a>
 800bfce:	2508      	movs	r5, #8
 800bfd0:	e7b3      	b.n	800bf3a <__hexnan+0x7a>
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d0dd      	beq.n	800bf94 <__hexnan+0xd4>
 800bfd8:	f1c3 0320 	rsb	r3, r3, #32
 800bfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe0:	40da      	lsrs	r2, r3
 800bfe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bfec:	e7d2      	b.n	800bf94 <__hexnan+0xd4>
 800bfee:	3f04      	subs	r7, #4
 800bff0:	e7d0      	b.n	800bf94 <__hexnan+0xd4>
 800bff2:	2004      	movs	r0, #4
 800bff4:	e7d5      	b.n	800bfa2 <__hexnan+0xe2>

0800bff6 <__ascii_mbtowc>:
 800bff6:	b082      	sub	sp, #8
 800bff8:	b901      	cbnz	r1, 800bffc <__ascii_mbtowc+0x6>
 800bffa:	a901      	add	r1, sp, #4
 800bffc:	b142      	cbz	r2, 800c010 <__ascii_mbtowc+0x1a>
 800bffe:	b14b      	cbz	r3, 800c014 <__ascii_mbtowc+0x1e>
 800c000:	7813      	ldrb	r3, [r2, #0]
 800c002:	600b      	str	r3, [r1, #0]
 800c004:	7812      	ldrb	r2, [r2, #0]
 800c006:	1e10      	subs	r0, r2, #0
 800c008:	bf18      	it	ne
 800c00a:	2001      	movne	r0, #1
 800c00c:	b002      	add	sp, #8
 800c00e:	4770      	bx	lr
 800c010:	4610      	mov	r0, r2
 800c012:	e7fb      	b.n	800c00c <__ascii_mbtowc+0x16>
 800c014:	f06f 0001 	mvn.w	r0, #1
 800c018:	e7f8      	b.n	800c00c <__ascii_mbtowc+0x16>
	...

0800c01c <_Balloc>:
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	69c6      	ldr	r6, [r0, #28]
 800c020:	4604      	mov	r4, r0
 800c022:	460d      	mov	r5, r1
 800c024:	b976      	cbnz	r6, 800c044 <_Balloc+0x28>
 800c026:	2010      	movs	r0, #16
 800c028:	f7fc fd02 	bl	8008a30 <malloc>
 800c02c:	4602      	mov	r2, r0
 800c02e:	61e0      	str	r0, [r4, #28]
 800c030:	b920      	cbnz	r0, 800c03c <_Balloc+0x20>
 800c032:	4b18      	ldr	r3, [pc, #96]	@ (800c094 <_Balloc+0x78>)
 800c034:	4818      	ldr	r0, [pc, #96]	@ (800c098 <_Balloc+0x7c>)
 800c036:	216b      	movs	r1, #107	@ 0x6b
 800c038:	f7fe fdf0 	bl	800ac1c <__assert_func>
 800c03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c040:	6006      	str	r6, [r0, #0]
 800c042:	60c6      	str	r6, [r0, #12]
 800c044:	69e6      	ldr	r6, [r4, #28]
 800c046:	68f3      	ldr	r3, [r6, #12]
 800c048:	b183      	cbz	r3, 800c06c <_Balloc+0x50>
 800c04a:	69e3      	ldr	r3, [r4, #28]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c052:	b9b8      	cbnz	r0, 800c084 <_Balloc+0x68>
 800c054:	2101      	movs	r1, #1
 800c056:	fa01 f605 	lsl.w	r6, r1, r5
 800c05a:	1d72      	adds	r2, r6, #5
 800c05c:	0092      	lsls	r2, r2, #2
 800c05e:	4620      	mov	r0, r4
 800c060:	f001 f913 	bl	800d28a <_calloc_r>
 800c064:	b160      	cbz	r0, 800c080 <_Balloc+0x64>
 800c066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c06a:	e00e      	b.n	800c08a <_Balloc+0x6e>
 800c06c:	2221      	movs	r2, #33	@ 0x21
 800c06e:	2104      	movs	r1, #4
 800c070:	4620      	mov	r0, r4
 800c072:	f001 f90a 	bl	800d28a <_calloc_r>
 800c076:	69e3      	ldr	r3, [r4, #28]
 800c078:	60f0      	str	r0, [r6, #12]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e4      	bne.n	800c04a <_Balloc+0x2e>
 800c080:	2000      	movs	r0, #0
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	6802      	ldr	r2, [r0, #0]
 800c086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c08a:	2300      	movs	r3, #0
 800c08c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c090:	e7f7      	b.n	800c082 <_Balloc+0x66>
 800c092:	bf00      	nop
 800c094:	0800d789 	.word	0x0800d789
 800c098:	0800d914 	.word	0x0800d914

0800c09c <_Bfree>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	69c6      	ldr	r6, [r0, #28]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b976      	cbnz	r6, 800c0c4 <_Bfree+0x28>
 800c0a6:	2010      	movs	r0, #16
 800c0a8:	f7fc fcc2 	bl	8008a30 <malloc>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	61e8      	str	r0, [r5, #28]
 800c0b0:	b920      	cbnz	r0, 800c0bc <_Bfree+0x20>
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <_Bfree+0x3c>)
 800c0b4:	4809      	ldr	r0, [pc, #36]	@ (800c0dc <_Bfree+0x40>)
 800c0b6:	218f      	movs	r1, #143	@ 0x8f
 800c0b8:	f7fe fdb0 	bl	800ac1c <__assert_func>
 800c0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0c0:	6006      	str	r6, [r0, #0]
 800c0c2:	60c6      	str	r6, [r0, #12]
 800c0c4:	b13c      	cbz	r4, 800c0d6 <_Bfree+0x3a>
 800c0c6:	69eb      	ldr	r3, [r5, #28]
 800c0c8:	6862      	ldr	r2, [r4, #4]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0d0:	6021      	str	r1, [r4, #0]
 800c0d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	0800d789 	.word	0x0800d789
 800c0dc:	0800d914 	.word	0x0800d914

0800c0e0 <__multadd>:
 800c0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e4:	690d      	ldr	r5, [r1, #16]
 800c0e6:	4607      	mov	r7, r0
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	461e      	mov	r6, r3
 800c0ec:	f101 0c14 	add.w	ip, r1, #20
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0f6:	b299      	uxth	r1, r3
 800c0f8:	fb02 6101 	mla	r1, r2, r1, r6
 800c0fc:	0c1e      	lsrs	r6, r3, #16
 800c0fe:	0c0b      	lsrs	r3, r1, #16
 800c100:	fb02 3306 	mla	r3, r2, r6, r3
 800c104:	b289      	uxth	r1, r1
 800c106:	3001      	adds	r0, #1
 800c108:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c10c:	4285      	cmp	r5, r0
 800c10e:	f84c 1b04 	str.w	r1, [ip], #4
 800c112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c116:	dcec      	bgt.n	800c0f2 <__multadd+0x12>
 800c118:	b30e      	cbz	r6, 800c15e <__multadd+0x7e>
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	42ab      	cmp	r3, r5
 800c11e:	dc19      	bgt.n	800c154 <__multadd+0x74>
 800c120:	6861      	ldr	r1, [r4, #4]
 800c122:	4638      	mov	r0, r7
 800c124:	3101      	adds	r1, #1
 800c126:	f7ff ff79 	bl	800c01c <_Balloc>
 800c12a:	4680      	mov	r8, r0
 800c12c:	b928      	cbnz	r0, 800c13a <__multadd+0x5a>
 800c12e:	4602      	mov	r2, r0
 800c130:	4b0c      	ldr	r3, [pc, #48]	@ (800c164 <__multadd+0x84>)
 800c132:	480d      	ldr	r0, [pc, #52]	@ (800c168 <__multadd+0x88>)
 800c134:	21ba      	movs	r1, #186	@ 0xba
 800c136:	f7fe fd71 	bl	800ac1c <__assert_func>
 800c13a:	6922      	ldr	r2, [r4, #16]
 800c13c:	3202      	adds	r2, #2
 800c13e:	f104 010c 	add.w	r1, r4, #12
 800c142:	0092      	lsls	r2, r2, #2
 800c144:	300c      	adds	r0, #12
 800c146:	f7fe fd4c 	bl	800abe2 <memcpy>
 800c14a:	4621      	mov	r1, r4
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7ff ffa5 	bl	800c09c <_Bfree>
 800c152:	4644      	mov	r4, r8
 800c154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c158:	3501      	adds	r5, #1
 800c15a:	615e      	str	r6, [r3, #20]
 800c15c:	6125      	str	r5, [r4, #16]
 800c15e:	4620      	mov	r0, r4
 800c160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c164:	0800d8a3 	.word	0x0800d8a3
 800c168:	0800d914 	.word	0x0800d914

0800c16c <__s2b>:
 800c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c170:	460c      	mov	r4, r1
 800c172:	4615      	mov	r5, r2
 800c174:	461f      	mov	r7, r3
 800c176:	2209      	movs	r2, #9
 800c178:	3308      	adds	r3, #8
 800c17a:	4606      	mov	r6, r0
 800c17c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c180:	2100      	movs	r1, #0
 800c182:	2201      	movs	r2, #1
 800c184:	429a      	cmp	r2, r3
 800c186:	db09      	blt.n	800c19c <__s2b+0x30>
 800c188:	4630      	mov	r0, r6
 800c18a:	f7ff ff47 	bl	800c01c <_Balloc>
 800c18e:	b940      	cbnz	r0, 800c1a2 <__s2b+0x36>
 800c190:	4602      	mov	r2, r0
 800c192:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <__s2b+0x8c>)
 800c194:	4819      	ldr	r0, [pc, #100]	@ (800c1fc <__s2b+0x90>)
 800c196:	21d3      	movs	r1, #211	@ 0xd3
 800c198:	f7fe fd40 	bl	800ac1c <__assert_func>
 800c19c:	0052      	lsls	r2, r2, #1
 800c19e:	3101      	adds	r1, #1
 800c1a0:	e7f0      	b.n	800c184 <__s2b+0x18>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	6143      	str	r3, [r0, #20]
 800c1a6:	2d09      	cmp	r5, #9
 800c1a8:	f04f 0301 	mov.w	r3, #1
 800c1ac:	6103      	str	r3, [r0, #16]
 800c1ae:	dd16      	ble.n	800c1de <__s2b+0x72>
 800c1b0:	f104 0909 	add.w	r9, r4, #9
 800c1b4:	46c8      	mov	r8, r9
 800c1b6:	442c      	add	r4, r5
 800c1b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1bc:	4601      	mov	r1, r0
 800c1be:	3b30      	subs	r3, #48	@ 0x30
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff ff8c 	bl	800c0e0 <__multadd>
 800c1c8:	45a0      	cmp	r8, r4
 800c1ca:	d1f5      	bne.n	800c1b8 <__s2b+0x4c>
 800c1cc:	f1a5 0408 	sub.w	r4, r5, #8
 800c1d0:	444c      	add	r4, r9
 800c1d2:	1b2d      	subs	r5, r5, r4
 800c1d4:	1963      	adds	r3, r4, r5
 800c1d6:	42bb      	cmp	r3, r7
 800c1d8:	db04      	blt.n	800c1e4 <__s2b+0x78>
 800c1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1de:	340a      	adds	r4, #10
 800c1e0:	2509      	movs	r5, #9
 800c1e2:	e7f6      	b.n	800c1d2 <__s2b+0x66>
 800c1e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1e8:	4601      	mov	r1, r0
 800c1ea:	3b30      	subs	r3, #48	@ 0x30
 800c1ec:	220a      	movs	r2, #10
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7ff ff76 	bl	800c0e0 <__multadd>
 800c1f4:	e7ee      	b.n	800c1d4 <__s2b+0x68>
 800c1f6:	bf00      	nop
 800c1f8:	0800d8a3 	.word	0x0800d8a3
 800c1fc:	0800d914 	.word	0x0800d914

0800c200 <__hi0bits>:
 800c200:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c204:	4603      	mov	r3, r0
 800c206:	bf36      	itet	cc
 800c208:	0403      	lslcc	r3, r0, #16
 800c20a:	2000      	movcs	r0, #0
 800c20c:	2010      	movcc	r0, #16
 800c20e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c212:	bf3c      	itt	cc
 800c214:	021b      	lslcc	r3, r3, #8
 800c216:	3008      	addcc	r0, #8
 800c218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c21c:	bf3c      	itt	cc
 800c21e:	011b      	lslcc	r3, r3, #4
 800c220:	3004      	addcc	r0, #4
 800c222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c226:	bf3c      	itt	cc
 800c228:	009b      	lslcc	r3, r3, #2
 800c22a:	3002      	addcc	r0, #2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	db05      	blt.n	800c23c <__hi0bits+0x3c>
 800c230:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c234:	f100 0001 	add.w	r0, r0, #1
 800c238:	bf08      	it	eq
 800c23a:	2020      	moveq	r0, #32
 800c23c:	4770      	bx	lr

0800c23e <__lo0bits>:
 800c23e:	6803      	ldr	r3, [r0, #0]
 800c240:	4602      	mov	r2, r0
 800c242:	f013 0007 	ands.w	r0, r3, #7
 800c246:	d00b      	beq.n	800c260 <__lo0bits+0x22>
 800c248:	07d9      	lsls	r1, r3, #31
 800c24a:	d421      	bmi.n	800c290 <__lo0bits+0x52>
 800c24c:	0798      	lsls	r0, r3, #30
 800c24e:	bf49      	itett	mi
 800c250:	085b      	lsrmi	r3, r3, #1
 800c252:	089b      	lsrpl	r3, r3, #2
 800c254:	2001      	movmi	r0, #1
 800c256:	6013      	strmi	r3, [r2, #0]
 800c258:	bf5c      	itt	pl
 800c25a:	6013      	strpl	r3, [r2, #0]
 800c25c:	2002      	movpl	r0, #2
 800c25e:	4770      	bx	lr
 800c260:	b299      	uxth	r1, r3
 800c262:	b909      	cbnz	r1, 800c268 <__lo0bits+0x2a>
 800c264:	0c1b      	lsrs	r3, r3, #16
 800c266:	2010      	movs	r0, #16
 800c268:	b2d9      	uxtb	r1, r3
 800c26a:	b909      	cbnz	r1, 800c270 <__lo0bits+0x32>
 800c26c:	3008      	adds	r0, #8
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	0719      	lsls	r1, r3, #28
 800c272:	bf04      	itt	eq
 800c274:	091b      	lsreq	r3, r3, #4
 800c276:	3004      	addeq	r0, #4
 800c278:	0799      	lsls	r1, r3, #30
 800c27a:	bf04      	itt	eq
 800c27c:	089b      	lsreq	r3, r3, #2
 800c27e:	3002      	addeq	r0, #2
 800c280:	07d9      	lsls	r1, r3, #31
 800c282:	d403      	bmi.n	800c28c <__lo0bits+0x4e>
 800c284:	085b      	lsrs	r3, r3, #1
 800c286:	f100 0001 	add.w	r0, r0, #1
 800c28a:	d003      	beq.n	800c294 <__lo0bits+0x56>
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	4770      	bx	lr
 800c290:	2000      	movs	r0, #0
 800c292:	4770      	bx	lr
 800c294:	2020      	movs	r0, #32
 800c296:	4770      	bx	lr

0800c298 <__i2b>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	460c      	mov	r4, r1
 800c29c:	2101      	movs	r1, #1
 800c29e:	f7ff febd 	bl	800c01c <_Balloc>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	b928      	cbnz	r0, 800c2b2 <__i2b+0x1a>
 800c2a6:	4b05      	ldr	r3, [pc, #20]	@ (800c2bc <__i2b+0x24>)
 800c2a8:	4805      	ldr	r0, [pc, #20]	@ (800c2c0 <__i2b+0x28>)
 800c2aa:	f240 1145 	movw	r1, #325	@ 0x145
 800c2ae:	f7fe fcb5 	bl	800ac1c <__assert_func>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	6144      	str	r4, [r0, #20]
 800c2b6:	6103      	str	r3, [r0, #16]
 800c2b8:	bd10      	pop	{r4, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800d8a3 	.word	0x0800d8a3
 800c2c0:	0800d914 	.word	0x0800d914

0800c2c4 <__multiply>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	690a      	ldr	r2, [r1, #16]
 800c2cc:	6923      	ldr	r3, [r4, #16]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	bfa8      	it	ge
 800c2d2:	4623      	movge	r3, r4
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	bfa4      	itt	ge
 800c2d8:	460c      	movge	r4, r1
 800c2da:	461f      	movge	r7, r3
 800c2dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c2e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	6861      	ldr	r1, [r4, #4]
 800c2e8:	eb0a 0609 	add.w	r6, sl, r9
 800c2ec:	42b3      	cmp	r3, r6
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	bfb8      	it	lt
 800c2f2:	3101      	addlt	r1, #1
 800c2f4:	f7ff fe92 	bl	800c01c <_Balloc>
 800c2f8:	b930      	cbnz	r0, 800c308 <__multiply+0x44>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	4b44      	ldr	r3, [pc, #272]	@ (800c410 <__multiply+0x14c>)
 800c2fe:	4845      	ldr	r0, [pc, #276]	@ (800c414 <__multiply+0x150>)
 800c300:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c304:	f7fe fc8a 	bl	800ac1c <__assert_func>
 800c308:	f100 0514 	add.w	r5, r0, #20
 800c30c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c310:	462b      	mov	r3, r5
 800c312:	2200      	movs	r2, #0
 800c314:	4543      	cmp	r3, r8
 800c316:	d321      	bcc.n	800c35c <__multiply+0x98>
 800c318:	f107 0114 	add.w	r1, r7, #20
 800c31c:	f104 0214 	add.w	r2, r4, #20
 800c320:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c324:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c328:	9302      	str	r3, [sp, #8]
 800c32a:	1b13      	subs	r3, r2, r4
 800c32c:	3b15      	subs	r3, #21
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	3304      	adds	r3, #4
 800c334:	f104 0715 	add.w	r7, r4, #21
 800c338:	42ba      	cmp	r2, r7
 800c33a:	bf38      	it	cc
 800c33c:	2304      	movcc	r3, #4
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	9103      	str	r1, [sp, #12]
 800c344:	428b      	cmp	r3, r1
 800c346:	d80c      	bhi.n	800c362 <__multiply+0x9e>
 800c348:	2e00      	cmp	r6, #0
 800c34a:	dd03      	ble.n	800c354 <__multiply+0x90>
 800c34c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c350:	2b00      	cmp	r3, #0
 800c352:	d05b      	beq.n	800c40c <__multiply+0x148>
 800c354:	6106      	str	r6, [r0, #16]
 800c356:	b005      	add	sp, #20
 800c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35c:	f843 2b04 	str.w	r2, [r3], #4
 800c360:	e7d8      	b.n	800c314 <__multiply+0x50>
 800c362:	f8b1 a000 	ldrh.w	sl, [r1]
 800c366:	f1ba 0f00 	cmp.w	sl, #0
 800c36a:	d024      	beq.n	800c3b6 <__multiply+0xf2>
 800c36c:	f104 0e14 	add.w	lr, r4, #20
 800c370:	46a9      	mov	r9, r5
 800c372:	f04f 0c00 	mov.w	ip, #0
 800c376:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c37a:	f8d9 3000 	ldr.w	r3, [r9]
 800c37e:	fa1f fb87 	uxth.w	fp, r7
 800c382:	b29b      	uxth	r3, r3
 800c384:	fb0a 330b 	mla	r3, sl, fp, r3
 800c388:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c38c:	f8d9 7000 	ldr.w	r7, [r9]
 800c390:	4463      	add	r3, ip
 800c392:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c396:	fb0a c70b 	mla	r7, sl, fp, ip
 800c39a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3a4:	4572      	cmp	r2, lr
 800c3a6:	f849 3b04 	str.w	r3, [r9], #4
 800c3aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3ae:	d8e2      	bhi.n	800c376 <__multiply+0xb2>
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	f845 c003 	str.w	ip, [r5, r3]
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c3bc:	3104      	adds	r1, #4
 800c3be:	f1b9 0f00 	cmp.w	r9, #0
 800c3c2:	d021      	beq.n	800c408 <__multiply+0x144>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	f104 0c14 	add.w	ip, r4, #20
 800c3ca:	46ae      	mov	lr, r5
 800c3cc:	f04f 0a00 	mov.w	sl, #0
 800c3d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c3d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c3d8:	fb09 770b 	mla	r7, r9, fp, r7
 800c3dc:	4457      	add	r7, sl
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c3e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3f0:	f8be 3000 	ldrh.w	r3, [lr]
 800c3f4:	fb09 330a 	mla	r3, r9, sl, r3
 800c3f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c3fc:	4562      	cmp	r2, ip
 800c3fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c402:	d8e5      	bhi.n	800c3d0 <__multiply+0x10c>
 800c404:	9f01      	ldr	r7, [sp, #4]
 800c406:	51eb      	str	r3, [r5, r7]
 800c408:	3504      	adds	r5, #4
 800c40a:	e799      	b.n	800c340 <__multiply+0x7c>
 800c40c:	3e01      	subs	r6, #1
 800c40e:	e79b      	b.n	800c348 <__multiply+0x84>
 800c410:	0800d8a3 	.word	0x0800d8a3
 800c414:	0800d914 	.word	0x0800d914

0800c418 <__pow5mult>:
 800c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c41c:	4615      	mov	r5, r2
 800c41e:	f012 0203 	ands.w	r2, r2, #3
 800c422:	4607      	mov	r7, r0
 800c424:	460e      	mov	r6, r1
 800c426:	d007      	beq.n	800c438 <__pow5mult+0x20>
 800c428:	4c25      	ldr	r4, [pc, #148]	@ (800c4c0 <__pow5mult+0xa8>)
 800c42a:	3a01      	subs	r2, #1
 800c42c:	2300      	movs	r3, #0
 800c42e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c432:	f7ff fe55 	bl	800c0e0 <__multadd>
 800c436:	4606      	mov	r6, r0
 800c438:	10ad      	asrs	r5, r5, #2
 800c43a:	d03d      	beq.n	800c4b8 <__pow5mult+0xa0>
 800c43c:	69fc      	ldr	r4, [r7, #28]
 800c43e:	b97c      	cbnz	r4, 800c460 <__pow5mult+0x48>
 800c440:	2010      	movs	r0, #16
 800c442:	f7fc faf5 	bl	8008a30 <malloc>
 800c446:	4602      	mov	r2, r0
 800c448:	61f8      	str	r0, [r7, #28]
 800c44a:	b928      	cbnz	r0, 800c458 <__pow5mult+0x40>
 800c44c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4c4 <__pow5mult+0xac>)
 800c44e:	481e      	ldr	r0, [pc, #120]	@ (800c4c8 <__pow5mult+0xb0>)
 800c450:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c454:	f7fe fbe2 	bl	800ac1c <__assert_func>
 800c458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c45c:	6004      	str	r4, [r0, #0]
 800c45e:	60c4      	str	r4, [r0, #12]
 800c460:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c468:	b94c      	cbnz	r4, 800c47e <__pow5mult+0x66>
 800c46a:	f240 2171 	movw	r1, #625	@ 0x271
 800c46e:	4638      	mov	r0, r7
 800c470:	f7ff ff12 	bl	800c298 <__i2b>
 800c474:	2300      	movs	r3, #0
 800c476:	f8c8 0008 	str.w	r0, [r8, #8]
 800c47a:	4604      	mov	r4, r0
 800c47c:	6003      	str	r3, [r0, #0]
 800c47e:	f04f 0900 	mov.w	r9, #0
 800c482:	07eb      	lsls	r3, r5, #31
 800c484:	d50a      	bpl.n	800c49c <__pow5mult+0x84>
 800c486:	4631      	mov	r1, r6
 800c488:	4622      	mov	r2, r4
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7ff ff1a 	bl	800c2c4 <__multiply>
 800c490:	4631      	mov	r1, r6
 800c492:	4680      	mov	r8, r0
 800c494:	4638      	mov	r0, r7
 800c496:	f7ff fe01 	bl	800c09c <_Bfree>
 800c49a:	4646      	mov	r6, r8
 800c49c:	106d      	asrs	r5, r5, #1
 800c49e:	d00b      	beq.n	800c4b8 <__pow5mult+0xa0>
 800c4a0:	6820      	ldr	r0, [r4, #0]
 800c4a2:	b938      	cbnz	r0, 800c4b4 <__pow5mult+0x9c>
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff ff0b 	bl	800c2c4 <__multiply>
 800c4ae:	6020      	str	r0, [r4, #0]
 800c4b0:	f8c0 9000 	str.w	r9, [r0]
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	e7e4      	b.n	800c482 <__pow5mult+0x6a>
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4be:	bf00      	nop
 800c4c0:	0800d970 	.word	0x0800d970
 800c4c4:	0800d789 	.word	0x0800d789
 800c4c8:	0800d914 	.word	0x0800d914

0800c4cc <__lshift>:
 800c4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	6849      	ldr	r1, [r1, #4]
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4da:	68a3      	ldr	r3, [r4, #8]
 800c4dc:	4607      	mov	r7, r0
 800c4de:	4691      	mov	r9, r2
 800c4e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4e4:	f108 0601 	add.w	r6, r8, #1
 800c4e8:	42b3      	cmp	r3, r6
 800c4ea:	db0b      	blt.n	800c504 <__lshift+0x38>
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	f7ff fd95 	bl	800c01c <_Balloc>
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	b948      	cbnz	r0, 800c50a <__lshift+0x3e>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	4b28      	ldr	r3, [pc, #160]	@ (800c59c <__lshift+0xd0>)
 800c4fa:	4829      	ldr	r0, [pc, #164]	@ (800c5a0 <__lshift+0xd4>)
 800c4fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c500:	f7fe fb8c 	bl	800ac1c <__assert_func>
 800c504:	3101      	adds	r1, #1
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	e7ee      	b.n	800c4e8 <__lshift+0x1c>
 800c50a:	2300      	movs	r3, #0
 800c50c:	f100 0114 	add.w	r1, r0, #20
 800c510:	f100 0210 	add.w	r2, r0, #16
 800c514:	4618      	mov	r0, r3
 800c516:	4553      	cmp	r3, sl
 800c518:	db33      	blt.n	800c582 <__lshift+0xb6>
 800c51a:	6920      	ldr	r0, [r4, #16]
 800c51c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c520:	f104 0314 	add.w	r3, r4, #20
 800c524:	f019 091f 	ands.w	r9, r9, #31
 800c528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c52c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c530:	d02b      	beq.n	800c58a <__lshift+0xbe>
 800c532:	f1c9 0e20 	rsb	lr, r9, #32
 800c536:	468a      	mov	sl, r1
 800c538:	2200      	movs	r2, #0
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	fa00 f009 	lsl.w	r0, r0, r9
 800c540:	4310      	orrs	r0, r2
 800c542:	f84a 0b04 	str.w	r0, [sl], #4
 800c546:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54a:	459c      	cmp	ip, r3
 800c54c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c550:	d8f3      	bhi.n	800c53a <__lshift+0x6e>
 800c552:	ebac 0304 	sub.w	r3, ip, r4
 800c556:	3b15      	subs	r3, #21
 800c558:	f023 0303 	bic.w	r3, r3, #3
 800c55c:	3304      	adds	r3, #4
 800c55e:	f104 0015 	add.w	r0, r4, #21
 800c562:	4584      	cmp	ip, r0
 800c564:	bf38      	it	cc
 800c566:	2304      	movcc	r3, #4
 800c568:	50ca      	str	r2, [r1, r3]
 800c56a:	b10a      	cbz	r2, 800c570 <__lshift+0xa4>
 800c56c:	f108 0602 	add.w	r6, r8, #2
 800c570:	3e01      	subs	r6, #1
 800c572:	4638      	mov	r0, r7
 800c574:	612e      	str	r6, [r5, #16]
 800c576:	4621      	mov	r1, r4
 800c578:	f7ff fd90 	bl	800c09c <_Bfree>
 800c57c:	4628      	mov	r0, r5
 800c57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c582:	f842 0f04 	str.w	r0, [r2, #4]!
 800c586:	3301      	adds	r3, #1
 800c588:	e7c5      	b.n	800c516 <__lshift+0x4a>
 800c58a:	3904      	subs	r1, #4
 800c58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c590:	f841 2f04 	str.w	r2, [r1, #4]!
 800c594:	459c      	cmp	ip, r3
 800c596:	d8f9      	bhi.n	800c58c <__lshift+0xc0>
 800c598:	e7ea      	b.n	800c570 <__lshift+0xa4>
 800c59a:	bf00      	nop
 800c59c:	0800d8a3 	.word	0x0800d8a3
 800c5a0:	0800d914 	.word	0x0800d914

0800c5a4 <__mcmp>:
 800c5a4:	690a      	ldr	r2, [r1, #16]
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6900      	ldr	r0, [r0, #16]
 800c5aa:	1a80      	subs	r0, r0, r2
 800c5ac:	b530      	push	{r4, r5, lr}
 800c5ae:	d10e      	bne.n	800c5ce <__mcmp+0x2a>
 800c5b0:	3314      	adds	r3, #20
 800c5b2:	3114      	adds	r1, #20
 800c5b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c5c4:	4295      	cmp	r5, r2
 800c5c6:	d003      	beq.n	800c5d0 <__mcmp+0x2c>
 800c5c8:	d205      	bcs.n	800c5d6 <__mcmp+0x32>
 800c5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ce:	bd30      	pop	{r4, r5, pc}
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	d3f3      	bcc.n	800c5bc <__mcmp+0x18>
 800c5d4:	e7fb      	b.n	800c5ce <__mcmp+0x2a>
 800c5d6:	2001      	movs	r0, #1
 800c5d8:	e7f9      	b.n	800c5ce <__mcmp+0x2a>
	...

0800c5dc <__mdiff>:
 800c5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	4689      	mov	r9, r1
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	4648      	mov	r0, r9
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	f7ff ffdb 	bl	800c5a4 <__mcmp>
 800c5ee:	1e05      	subs	r5, r0, #0
 800c5f0:	d112      	bne.n	800c618 <__mdiff+0x3c>
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f7ff fd11 	bl	800c01c <_Balloc>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	b928      	cbnz	r0, 800c60a <__mdiff+0x2e>
 800c5fe:	4b3f      	ldr	r3, [pc, #252]	@ (800c6fc <__mdiff+0x120>)
 800c600:	f240 2137 	movw	r1, #567	@ 0x237
 800c604:	483e      	ldr	r0, [pc, #248]	@ (800c700 <__mdiff+0x124>)
 800c606:	f7fe fb09 	bl	800ac1c <__assert_func>
 800c60a:	2301      	movs	r3, #1
 800c60c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c610:	4610      	mov	r0, r2
 800c612:	b003      	add	sp, #12
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	bfbc      	itt	lt
 800c61a:	464b      	movlt	r3, r9
 800c61c:	46a1      	movlt	r9, r4
 800c61e:	4630      	mov	r0, r6
 800c620:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c624:	bfba      	itte	lt
 800c626:	461c      	movlt	r4, r3
 800c628:	2501      	movlt	r5, #1
 800c62a:	2500      	movge	r5, #0
 800c62c:	f7ff fcf6 	bl	800c01c <_Balloc>
 800c630:	4602      	mov	r2, r0
 800c632:	b918      	cbnz	r0, 800c63c <__mdiff+0x60>
 800c634:	4b31      	ldr	r3, [pc, #196]	@ (800c6fc <__mdiff+0x120>)
 800c636:	f240 2145 	movw	r1, #581	@ 0x245
 800c63a:	e7e3      	b.n	800c604 <__mdiff+0x28>
 800c63c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c640:	6926      	ldr	r6, [r4, #16]
 800c642:	60c5      	str	r5, [r0, #12]
 800c644:	f109 0310 	add.w	r3, r9, #16
 800c648:	f109 0514 	add.w	r5, r9, #20
 800c64c:	f104 0e14 	add.w	lr, r4, #20
 800c650:	f100 0b14 	add.w	fp, r0, #20
 800c654:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c658:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	46d9      	mov	r9, fp
 800c660:	f04f 0c00 	mov.w	ip, #0
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c66a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	fa1f f38a 	uxth.w	r3, sl
 800c674:	4619      	mov	r1, r3
 800c676:	b283      	uxth	r3, r0
 800c678:	1acb      	subs	r3, r1, r3
 800c67a:	0c00      	lsrs	r0, r0, #16
 800c67c:	4463      	add	r3, ip
 800c67e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c682:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c686:	b29b      	uxth	r3, r3
 800c688:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c68c:	4576      	cmp	r6, lr
 800c68e:	f849 3b04 	str.w	r3, [r9], #4
 800c692:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c696:	d8e5      	bhi.n	800c664 <__mdiff+0x88>
 800c698:	1b33      	subs	r3, r6, r4
 800c69a:	3b15      	subs	r3, #21
 800c69c:	f023 0303 	bic.w	r3, r3, #3
 800c6a0:	3415      	adds	r4, #21
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	42a6      	cmp	r6, r4
 800c6a6:	bf38      	it	cc
 800c6a8:	2304      	movcc	r3, #4
 800c6aa:	441d      	add	r5, r3
 800c6ac:	445b      	add	r3, fp
 800c6ae:	461e      	mov	r6, r3
 800c6b0:	462c      	mov	r4, r5
 800c6b2:	4544      	cmp	r4, r8
 800c6b4:	d30e      	bcc.n	800c6d4 <__mdiff+0xf8>
 800c6b6:	f108 0103 	add.w	r1, r8, #3
 800c6ba:	1b49      	subs	r1, r1, r5
 800c6bc:	f021 0103 	bic.w	r1, r1, #3
 800c6c0:	3d03      	subs	r5, #3
 800c6c2:	45a8      	cmp	r8, r5
 800c6c4:	bf38      	it	cc
 800c6c6:	2100      	movcc	r1, #0
 800c6c8:	440b      	add	r3, r1
 800c6ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6ce:	b191      	cbz	r1, 800c6f6 <__mdiff+0x11a>
 800c6d0:	6117      	str	r7, [r2, #16]
 800c6d2:	e79d      	b.n	800c610 <__mdiff+0x34>
 800c6d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6d8:	46e6      	mov	lr, ip
 800c6da:	0c08      	lsrs	r0, r1, #16
 800c6dc:	fa1c fc81 	uxtah	ip, ip, r1
 800c6e0:	4471      	add	r1, lr
 800c6e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6e6:	b289      	uxth	r1, r1
 800c6e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c6ec:	f846 1b04 	str.w	r1, [r6], #4
 800c6f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6f4:	e7dd      	b.n	800c6b2 <__mdiff+0xd6>
 800c6f6:	3f01      	subs	r7, #1
 800c6f8:	e7e7      	b.n	800c6ca <__mdiff+0xee>
 800c6fa:	bf00      	nop
 800c6fc:	0800d8a3 	.word	0x0800d8a3
 800c700:	0800d914 	.word	0x0800d914

0800c704 <__ulp>:
 800c704:	b082      	sub	sp, #8
 800c706:	ed8d 0b00 	vstr	d0, [sp]
 800c70a:	9a01      	ldr	r2, [sp, #4]
 800c70c:	4b0f      	ldr	r3, [pc, #60]	@ (800c74c <__ulp+0x48>)
 800c70e:	4013      	ands	r3, r2
 800c710:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c714:	2b00      	cmp	r3, #0
 800c716:	dc08      	bgt.n	800c72a <__ulp+0x26>
 800c718:	425b      	negs	r3, r3
 800c71a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c71e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c722:	da04      	bge.n	800c72e <__ulp+0x2a>
 800c724:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c728:	4113      	asrs	r3, r2
 800c72a:	2200      	movs	r2, #0
 800c72c:	e008      	b.n	800c740 <__ulp+0x3c>
 800c72e:	f1a2 0314 	sub.w	r3, r2, #20
 800c732:	2b1e      	cmp	r3, #30
 800c734:	bfda      	itte	le
 800c736:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c73a:	40da      	lsrle	r2, r3
 800c73c:	2201      	movgt	r2, #1
 800c73e:	2300      	movs	r3, #0
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	ec41 0b10 	vmov	d0, r0, r1
 800c748:	b002      	add	sp, #8
 800c74a:	4770      	bx	lr
 800c74c:	7ff00000 	.word	0x7ff00000

0800c750 <__b2d>:
 800c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c754:	6906      	ldr	r6, [r0, #16]
 800c756:	f100 0814 	add.w	r8, r0, #20
 800c75a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c75e:	1f37      	subs	r7, r6, #4
 800c760:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c764:	4610      	mov	r0, r2
 800c766:	f7ff fd4b 	bl	800c200 <__hi0bits>
 800c76a:	f1c0 0320 	rsb	r3, r0, #32
 800c76e:	280a      	cmp	r0, #10
 800c770:	600b      	str	r3, [r1, #0]
 800c772:	491b      	ldr	r1, [pc, #108]	@ (800c7e0 <__b2d+0x90>)
 800c774:	dc15      	bgt.n	800c7a2 <__b2d+0x52>
 800c776:	f1c0 0c0b 	rsb	ip, r0, #11
 800c77a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c77e:	45b8      	cmp	r8, r7
 800c780:	ea43 0501 	orr.w	r5, r3, r1
 800c784:	bf34      	ite	cc
 800c786:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c78a:	2300      	movcs	r3, #0
 800c78c:	3015      	adds	r0, #21
 800c78e:	fa02 f000 	lsl.w	r0, r2, r0
 800c792:	fa23 f30c 	lsr.w	r3, r3, ip
 800c796:	4303      	orrs	r3, r0
 800c798:	461c      	mov	r4, r3
 800c79a:	ec45 4b10 	vmov	d0, r4, r5
 800c79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a2:	45b8      	cmp	r8, r7
 800c7a4:	bf3a      	itte	cc
 800c7a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800c7ae:	2300      	movcs	r3, #0
 800c7b0:	380b      	subs	r0, #11
 800c7b2:	d012      	beq.n	800c7da <__b2d+0x8a>
 800c7b4:	f1c0 0120 	rsb	r1, r0, #32
 800c7b8:	fa23 f401 	lsr.w	r4, r3, r1
 800c7bc:	4082      	lsls	r2, r0
 800c7be:	4322      	orrs	r2, r4
 800c7c0:	4547      	cmp	r7, r8
 800c7c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c7c6:	bf8c      	ite	hi
 800c7c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c7cc:	2200      	movls	r2, #0
 800c7ce:	4083      	lsls	r3, r0
 800c7d0:	40ca      	lsrs	r2, r1
 800c7d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	e7de      	b.n	800c798 <__b2d+0x48>
 800c7da:	ea42 0501 	orr.w	r5, r2, r1
 800c7de:	e7db      	b.n	800c798 <__b2d+0x48>
 800c7e0:	3ff00000 	.word	0x3ff00000

0800c7e4 <__d2b>:
 800c7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	ec59 8b10 	vmov	r8, r9, d0
 800c7f0:	4616      	mov	r6, r2
 800c7f2:	f7ff fc13 	bl	800c01c <_Balloc>
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	b930      	cbnz	r0, 800c808 <__d2b+0x24>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4b23      	ldr	r3, [pc, #140]	@ (800c88c <__d2b+0xa8>)
 800c7fe:	4824      	ldr	r0, [pc, #144]	@ (800c890 <__d2b+0xac>)
 800c800:	f240 310f 	movw	r1, #783	@ 0x30f
 800c804:	f7fe fa0a 	bl	800ac1c <__assert_func>
 800c808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c80c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c810:	b10d      	cbz	r5, 800c816 <__d2b+0x32>
 800c812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	f1b8 0300 	subs.w	r3, r8, #0
 800c81c:	d023      	beq.n	800c866 <__d2b+0x82>
 800c81e:	4668      	mov	r0, sp
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	f7ff fd0c 	bl	800c23e <__lo0bits>
 800c826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c82a:	b1d0      	cbz	r0, 800c862 <__d2b+0x7e>
 800c82c:	f1c0 0320 	rsb	r3, r0, #32
 800c830:	fa02 f303 	lsl.w	r3, r2, r3
 800c834:	430b      	orrs	r3, r1
 800c836:	40c2      	lsrs	r2, r0
 800c838:	6163      	str	r3, [r4, #20]
 800c83a:	9201      	str	r2, [sp, #4]
 800c83c:	9b01      	ldr	r3, [sp, #4]
 800c83e:	61a3      	str	r3, [r4, #24]
 800c840:	2b00      	cmp	r3, #0
 800c842:	bf0c      	ite	eq
 800c844:	2201      	moveq	r2, #1
 800c846:	2202      	movne	r2, #2
 800c848:	6122      	str	r2, [r4, #16]
 800c84a:	b1a5      	cbz	r5, 800c876 <__d2b+0x92>
 800c84c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c850:	4405      	add	r5, r0
 800c852:	603d      	str	r5, [r7, #0]
 800c854:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c858:	6030      	str	r0, [r6, #0]
 800c85a:	4620      	mov	r0, r4
 800c85c:	b003      	add	sp, #12
 800c85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c862:	6161      	str	r1, [r4, #20]
 800c864:	e7ea      	b.n	800c83c <__d2b+0x58>
 800c866:	a801      	add	r0, sp, #4
 800c868:	f7ff fce9 	bl	800c23e <__lo0bits>
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	6163      	str	r3, [r4, #20]
 800c870:	3020      	adds	r0, #32
 800c872:	2201      	movs	r2, #1
 800c874:	e7e8      	b.n	800c848 <__d2b+0x64>
 800c876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c87a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c87e:	6038      	str	r0, [r7, #0]
 800c880:	6918      	ldr	r0, [r3, #16]
 800c882:	f7ff fcbd 	bl	800c200 <__hi0bits>
 800c886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c88a:	e7e5      	b.n	800c858 <__d2b+0x74>
 800c88c:	0800d8a3 	.word	0x0800d8a3
 800c890:	0800d914 	.word	0x0800d914

0800c894 <__ratio>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	b085      	sub	sp, #20
 800c89a:	e9cd 1000 	strd	r1, r0, [sp]
 800c89e:	a902      	add	r1, sp, #8
 800c8a0:	f7ff ff56 	bl	800c750 <__b2d>
 800c8a4:	9800      	ldr	r0, [sp, #0]
 800c8a6:	a903      	add	r1, sp, #12
 800c8a8:	ec55 4b10 	vmov	r4, r5, d0
 800c8ac:	f7ff ff50 	bl	800c750 <__b2d>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	6919      	ldr	r1, [r3, #16]
 800c8b4:	9b00      	ldr	r3, [sp, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	1ac9      	subs	r1, r1, r3
 800c8ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c8be:	1a9b      	subs	r3, r3, r2
 800c8c0:	ec5b ab10 	vmov	sl, fp, d0
 800c8c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bfce      	itee	gt
 800c8cc:	462a      	movgt	r2, r5
 800c8ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8d2:	465a      	movle	r2, fp
 800c8d4:	462f      	mov	r7, r5
 800c8d6:	46d9      	mov	r9, fp
 800c8d8:	bfcc      	ite	gt
 800c8da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	4652      	mov	r2, sl
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 ffb7 	bl	800085c <__aeabi_ddiv>
 800c8ee:	ec41 0b10 	vmov	d0, r0, r1
 800c8f2:	b005      	add	sp, #20
 800c8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8f8 <__copybits>:
 800c8f8:	3901      	subs	r1, #1
 800c8fa:	b570      	push	{r4, r5, r6, lr}
 800c8fc:	1149      	asrs	r1, r1, #5
 800c8fe:	6914      	ldr	r4, [r2, #16]
 800c900:	3101      	adds	r1, #1
 800c902:	f102 0314 	add.w	r3, r2, #20
 800c906:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c90a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c90e:	1f05      	subs	r5, r0, #4
 800c910:	42a3      	cmp	r3, r4
 800c912:	d30c      	bcc.n	800c92e <__copybits+0x36>
 800c914:	1aa3      	subs	r3, r4, r2
 800c916:	3b11      	subs	r3, #17
 800c918:	f023 0303 	bic.w	r3, r3, #3
 800c91c:	3211      	adds	r2, #17
 800c91e:	42a2      	cmp	r2, r4
 800c920:	bf88      	it	hi
 800c922:	2300      	movhi	r3, #0
 800c924:	4418      	add	r0, r3
 800c926:	2300      	movs	r3, #0
 800c928:	4288      	cmp	r0, r1
 800c92a:	d305      	bcc.n	800c938 <__copybits+0x40>
 800c92c:	bd70      	pop	{r4, r5, r6, pc}
 800c92e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c932:	f845 6f04 	str.w	r6, [r5, #4]!
 800c936:	e7eb      	b.n	800c910 <__copybits+0x18>
 800c938:	f840 3b04 	str.w	r3, [r0], #4
 800c93c:	e7f4      	b.n	800c928 <__copybits+0x30>

0800c93e <__any_on>:
 800c93e:	f100 0214 	add.w	r2, r0, #20
 800c942:	6900      	ldr	r0, [r0, #16]
 800c944:	114b      	asrs	r3, r1, #5
 800c946:	4298      	cmp	r0, r3
 800c948:	b510      	push	{r4, lr}
 800c94a:	db11      	blt.n	800c970 <__any_on+0x32>
 800c94c:	dd0a      	ble.n	800c964 <__any_on+0x26>
 800c94e:	f011 011f 	ands.w	r1, r1, #31
 800c952:	d007      	beq.n	800c964 <__any_on+0x26>
 800c954:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c958:	fa24 f001 	lsr.w	r0, r4, r1
 800c95c:	fa00 f101 	lsl.w	r1, r0, r1
 800c960:	428c      	cmp	r4, r1
 800c962:	d10b      	bne.n	800c97c <__any_on+0x3e>
 800c964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c968:	4293      	cmp	r3, r2
 800c96a:	d803      	bhi.n	800c974 <__any_on+0x36>
 800c96c:	2000      	movs	r0, #0
 800c96e:	bd10      	pop	{r4, pc}
 800c970:	4603      	mov	r3, r0
 800c972:	e7f7      	b.n	800c964 <__any_on+0x26>
 800c974:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c978:	2900      	cmp	r1, #0
 800c97a:	d0f5      	beq.n	800c968 <__any_on+0x2a>
 800c97c:	2001      	movs	r0, #1
 800c97e:	e7f6      	b.n	800c96e <__any_on+0x30>

0800c980 <_strtol_l.constprop.0>:
 800c980:	2b24      	cmp	r3, #36	@ 0x24
 800c982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c986:	4686      	mov	lr, r0
 800c988:	4690      	mov	r8, r2
 800c98a:	d801      	bhi.n	800c990 <_strtol_l.constprop.0+0x10>
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d106      	bne.n	800c99e <_strtol_l.constprop.0+0x1e>
 800c990:	f7fe f8fa 	bl	800ab88 <__errno>
 800c994:	2316      	movs	r3, #22
 800c996:	6003      	str	r3, [r0, #0]
 800c998:	2000      	movs	r0, #0
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	4834      	ldr	r0, [pc, #208]	@ (800ca70 <_strtol_l.constprop.0+0xf0>)
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9a8:	5d06      	ldrb	r6, [r0, r4]
 800c9aa:	f016 0608 	ands.w	r6, r6, #8
 800c9ae:	d1f8      	bne.n	800c9a2 <_strtol_l.constprop.0+0x22>
 800c9b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c9b2:	d12d      	bne.n	800ca10 <_strtol_l.constprop.0+0x90>
 800c9b4:	782c      	ldrb	r4, [r5, #0]
 800c9b6:	2601      	movs	r6, #1
 800c9b8:	1c95      	adds	r5, r2, #2
 800c9ba:	f033 0210 	bics.w	r2, r3, #16
 800c9be:	d109      	bne.n	800c9d4 <_strtol_l.constprop.0+0x54>
 800c9c0:	2c30      	cmp	r4, #48	@ 0x30
 800c9c2:	d12a      	bne.n	800ca1a <_strtol_l.constprop.0+0x9a>
 800c9c4:	782a      	ldrb	r2, [r5, #0]
 800c9c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9ca:	2a58      	cmp	r2, #88	@ 0x58
 800c9cc:	d125      	bne.n	800ca1a <_strtol_l.constprop.0+0x9a>
 800c9ce:	786c      	ldrb	r4, [r5, #1]
 800c9d0:	2310      	movs	r3, #16
 800c9d2:	3502      	adds	r5, #2
 800c9d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c9d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9dc:	2200      	movs	r2, #0
 800c9de:	fbbc f9f3 	udiv	r9, ip, r3
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c9ec:	2f09      	cmp	r7, #9
 800c9ee:	d81b      	bhi.n	800ca28 <_strtol_l.constprop.0+0xa8>
 800c9f0:	463c      	mov	r4, r7
 800c9f2:	42a3      	cmp	r3, r4
 800c9f4:	dd27      	ble.n	800ca46 <_strtol_l.constprop.0+0xc6>
 800c9f6:	1c57      	adds	r7, r2, #1
 800c9f8:	d007      	beq.n	800ca0a <_strtol_l.constprop.0+0x8a>
 800c9fa:	4581      	cmp	r9, r0
 800c9fc:	d320      	bcc.n	800ca40 <_strtol_l.constprop.0+0xc0>
 800c9fe:	d101      	bne.n	800ca04 <_strtol_l.constprop.0+0x84>
 800ca00:	45a2      	cmp	sl, r4
 800ca02:	db1d      	blt.n	800ca40 <_strtol_l.constprop.0+0xc0>
 800ca04:	fb00 4003 	mla	r0, r0, r3, r4
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca0e:	e7eb      	b.n	800c9e8 <_strtol_l.constprop.0+0x68>
 800ca10:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca12:	bf04      	itt	eq
 800ca14:	782c      	ldrbeq	r4, [r5, #0]
 800ca16:	1c95      	addeq	r5, r2, #2
 800ca18:	e7cf      	b.n	800c9ba <_strtol_l.constprop.0+0x3a>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1da      	bne.n	800c9d4 <_strtol_l.constprop.0+0x54>
 800ca1e:	2c30      	cmp	r4, #48	@ 0x30
 800ca20:	bf0c      	ite	eq
 800ca22:	2308      	moveq	r3, #8
 800ca24:	230a      	movne	r3, #10
 800ca26:	e7d5      	b.n	800c9d4 <_strtol_l.constprop.0+0x54>
 800ca28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca2c:	2f19      	cmp	r7, #25
 800ca2e:	d801      	bhi.n	800ca34 <_strtol_l.constprop.0+0xb4>
 800ca30:	3c37      	subs	r4, #55	@ 0x37
 800ca32:	e7de      	b.n	800c9f2 <_strtol_l.constprop.0+0x72>
 800ca34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca38:	2f19      	cmp	r7, #25
 800ca3a:	d804      	bhi.n	800ca46 <_strtol_l.constprop.0+0xc6>
 800ca3c:	3c57      	subs	r4, #87	@ 0x57
 800ca3e:	e7d8      	b.n	800c9f2 <_strtol_l.constprop.0+0x72>
 800ca40:	f04f 32ff 	mov.w	r2, #4294967295
 800ca44:	e7e1      	b.n	800ca0a <_strtol_l.constprop.0+0x8a>
 800ca46:	1c53      	adds	r3, r2, #1
 800ca48:	d108      	bne.n	800ca5c <_strtol_l.constprop.0+0xdc>
 800ca4a:	2322      	movs	r3, #34	@ 0x22
 800ca4c:	f8ce 3000 	str.w	r3, [lr]
 800ca50:	4660      	mov	r0, ip
 800ca52:	f1b8 0f00 	cmp.w	r8, #0
 800ca56:	d0a0      	beq.n	800c99a <_strtol_l.constprop.0+0x1a>
 800ca58:	1e69      	subs	r1, r5, #1
 800ca5a:	e006      	b.n	800ca6a <_strtol_l.constprop.0+0xea>
 800ca5c:	b106      	cbz	r6, 800ca60 <_strtol_l.constprop.0+0xe0>
 800ca5e:	4240      	negs	r0, r0
 800ca60:	f1b8 0f00 	cmp.w	r8, #0
 800ca64:	d099      	beq.n	800c99a <_strtol_l.constprop.0+0x1a>
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d1f6      	bne.n	800ca58 <_strtol_l.constprop.0+0xd8>
 800ca6a:	f8c8 1000 	str.w	r1, [r8]
 800ca6e:	e794      	b.n	800c99a <_strtol_l.constprop.0+0x1a>
 800ca70:	0800da71 	.word	0x0800da71

0800ca74 <_strtol_r>:
 800ca74:	f7ff bf84 	b.w	800c980 <_strtol_l.constprop.0>

0800ca78 <__ascii_wctomb>:
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4608      	mov	r0, r1
 800ca7c:	b141      	cbz	r1, 800ca90 <__ascii_wctomb+0x18>
 800ca7e:	2aff      	cmp	r2, #255	@ 0xff
 800ca80:	d904      	bls.n	800ca8c <__ascii_wctomb+0x14>
 800ca82:	228a      	movs	r2, #138	@ 0x8a
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	4770      	bx	lr
 800ca8c:	700a      	strb	r2, [r1, #0]
 800ca8e:	2001      	movs	r0, #1
 800ca90:	4770      	bx	lr

0800ca92 <__ssputs_r>:
 800ca92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca96:	688e      	ldr	r6, [r1, #8]
 800ca98:	461f      	mov	r7, r3
 800ca9a:	42be      	cmp	r6, r7
 800ca9c:	680b      	ldr	r3, [r1, #0]
 800ca9e:	4682      	mov	sl, r0
 800caa0:	460c      	mov	r4, r1
 800caa2:	4690      	mov	r8, r2
 800caa4:	d82d      	bhi.n	800cb02 <__ssputs_r+0x70>
 800caa6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caaa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800caae:	d026      	beq.n	800cafe <__ssputs_r+0x6c>
 800cab0:	6965      	ldr	r5, [r4, #20]
 800cab2:	6909      	ldr	r1, [r1, #16]
 800cab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cab8:	eba3 0901 	sub.w	r9, r3, r1
 800cabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cac0:	1c7b      	adds	r3, r7, #1
 800cac2:	444b      	add	r3, r9
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	429d      	cmp	r5, r3
 800cac8:	bf38      	it	cc
 800caca:	461d      	movcc	r5, r3
 800cacc:	0553      	lsls	r3, r2, #21
 800cace:	d527      	bpl.n	800cb20 <__ssputs_r+0x8e>
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7fb ffdf 	bl	8008a94 <_malloc_r>
 800cad6:	4606      	mov	r6, r0
 800cad8:	b360      	cbz	r0, 800cb34 <__ssputs_r+0xa2>
 800cada:	6921      	ldr	r1, [r4, #16]
 800cadc:	464a      	mov	r2, r9
 800cade:	f7fe f880 	bl	800abe2 <memcpy>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	6126      	str	r6, [r4, #16]
 800caf0:	6165      	str	r5, [r4, #20]
 800caf2:	444e      	add	r6, r9
 800caf4:	eba5 0509 	sub.w	r5, r5, r9
 800caf8:	6026      	str	r6, [r4, #0]
 800cafa:	60a5      	str	r5, [r4, #8]
 800cafc:	463e      	mov	r6, r7
 800cafe:	42be      	cmp	r6, r7
 800cb00:	d900      	bls.n	800cb04 <__ssputs_r+0x72>
 800cb02:	463e      	mov	r6, r7
 800cb04:	6820      	ldr	r0, [r4, #0]
 800cb06:	4632      	mov	r2, r6
 800cb08:	4641      	mov	r1, r8
 800cb0a:	f000 fb7b 	bl	800d204 <memmove>
 800cb0e:	68a3      	ldr	r3, [r4, #8]
 800cb10:	1b9b      	subs	r3, r3, r6
 800cb12:	60a3      	str	r3, [r4, #8]
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	4433      	add	r3, r6
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb20:	462a      	mov	r2, r5
 800cb22:	f000 fbc6 	bl	800d2b2 <_realloc_r>
 800cb26:	4606      	mov	r6, r0
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d1e0      	bne.n	800caee <__ssputs_r+0x5c>
 800cb2c:	6921      	ldr	r1, [r4, #16]
 800cb2e:	4650      	mov	r0, sl
 800cb30:	f7fe fede 	bl	800b8f0 <_free_r>
 800cb34:	230c      	movs	r3, #12
 800cb36:	f8ca 3000 	str.w	r3, [sl]
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb40:	81a3      	strh	r3, [r4, #12]
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295
 800cb46:	e7e9      	b.n	800cb1c <__ssputs_r+0x8a>

0800cb48 <_svfiprintf_r>:
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	4698      	mov	r8, r3
 800cb4e:	898b      	ldrh	r3, [r1, #12]
 800cb50:	061b      	lsls	r3, r3, #24
 800cb52:	b09d      	sub	sp, #116	@ 0x74
 800cb54:	4607      	mov	r7, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	4614      	mov	r4, r2
 800cb5a:	d510      	bpl.n	800cb7e <_svfiprintf_r+0x36>
 800cb5c:	690b      	ldr	r3, [r1, #16]
 800cb5e:	b973      	cbnz	r3, 800cb7e <_svfiprintf_r+0x36>
 800cb60:	2140      	movs	r1, #64	@ 0x40
 800cb62:	f7fb ff97 	bl	8008a94 <_malloc_r>
 800cb66:	6028      	str	r0, [r5, #0]
 800cb68:	6128      	str	r0, [r5, #16]
 800cb6a:	b930      	cbnz	r0, 800cb7a <_svfiprintf_r+0x32>
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	603b      	str	r3, [r7, #0]
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	b01d      	add	sp, #116	@ 0x74
 800cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7a:	2340      	movs	r3, #64	@ 0x40
 800cb7c:	616b      	str	r3, [r5, #20]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb82:	2320      	movs	r3, #32
 800cb84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb8c:	2330      	movs	r3, #48	@ 0x30
 800cb8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd2c <_svfiprintf_r+0x1e4>
 800cb92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb96:	f04f 0901 	mov.w	r9, #1
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	469a      	mov	sl, r3
 800cb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cba2:	b10a      	cbz	r2, 800cba8 <_svfiprintf_r+0x60>
 800cba4:	2a25      	cmp	r2, #37	@ 0x25
 800cba6:	d1f9      	bne.n	800cb9c <_svfiprintf_r+0x54>
 800cba8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbac:	d00b      	beq.n	800cbc6 <_svfiprintf_r+0x7e>
 800cbae:	465b      	mov	r3, fp
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff ff6c 	bl	800ca92 <__ssputs_r>
 800cbba:	3001      	adds	r0, #1
 800cbbc:	f000 80a7 	beq.w	800cd0e <_svfiprintf_r+0x1c6>
 800cbc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbc2:	445a      	add	r2, fp
 800cbc4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 809f 	beq.w	800cd0e <_svfiprintf_r+0x1c6>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbda:	f10a 0a01 	add.w	sl, sl, #1
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	9307      	str	r3, [sp, #28]
 800cbe2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbe6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbe8:	4654      	mov	r4, sl
 800cbea:	2205      	movs	r2, #5
 800cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf0:	484e      	ldr	r0, [pc, #312]	@ (800cd2c <_svfiprintf_r+0x1e4>)
 800cbf2:	f7f3 faf5 	bl	80001e0 <memchr>
 800cbf6:	9a04      	ldr	r2, [sp, #16]
 800cbf8:	b9d8      	cbnz	r0, 800cc32 <_svfiprintf_r+0xea>
 800cbfa:	06d0      	lsls	r0, r2, #27
 800cbfc:	bf44      	itt	mi
 800cbfe:	2320      	movmi	r3, #32
 800cc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc04:	0711      	lsls	r1, r2, #28
 800cc06:	bf44      	itt	mi
 800cc08:	232b      	movmi	r3, #43	@ 0x2b
 800cc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc12:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc14:	d015      	beq.n	800cc42 <_svfiprintf_r+0xfa>
 800cc16:	9a07      	ldr	r2, [sp, #28]
 800cc18:	4654      	mov	r4, sl
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f04f 0c0a 	mov.w	ip, #10
 800cc20:	4621      	mov	r1, r4
 800cc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc26:	3b30      	subs	r3, #48	@ 0x30
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d94b      	bls.n	800ccc4 <_svfiprintf_r+0x17c>
 800cc2c:	b1b0      	cbz	r0, 800cc5c <_svfiprintf_r+0x114>
 800cc2e:	9207      	str	r2, [sp, #28]
 800cc30:	e014      	b.n	800cc5c <_svfiprintf_r+0x114>
 800cc32:	eba0 0308 	sub.w	r3, r0, r8
 800cc36:	fa09 f303 	lsl.w	r3, r9, r3
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	46a2      	mov	sl, r4
 800cc40:	e7d2      	b.n	800cbe8 <_svfiprintf_r+0xa0>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	1d19      	adds	r1, r3, #4
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	9103      	str	r1, [sp, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfbb      	ittet	lt
 800cc4e:	425b      	neglt	r3, r3
 800cc50:	f042 0202 	orrlt.w	r2, r2, #2
 800cc54:	9307      	strge	r3, [sp, #28]
 800cc56:	9307      	strlt	r3, [sp, #28]
 800cc58:	bfb8      	it	lt
 800cc5a:	9204      	strlt	r2, [sp, #16]
 800cc5c:	7823      	ldrb	r3, [r4, #0]
 800cc5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc60:	d10a      	bne.n	800cc78 <_svfiprintf_r+0x130>
 800cc62:	7863      	ldrb	r3, [r4, #1]
 800cc64:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc66:	d132      	bne.n	800ccce <_svfiprintf_r+0x186>
 800cc68:	9b03      	ldr	r3, [sp, #12]
 800cc6a:	1d1a      	adds	r2, r3, #4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	9203      	str	r2, [sp, #12]
 800cc70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc74:	3402      	adds	r4, #2
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd3c <_svfiprintf_r+0x1f4>
 800cc7c:	7821      	ldrb	r1, [r4, #0]
 800cc7e:	2203      	movs	r2, #3
 800cc80:	4650      	mov	r0, sl
 800cc82:	f7f3 faad 	bl	80001e0 <memchr>
 800cc86:	b138      	cbz	r0, 800cc98 <_svfiprintf_r+0x150>
 800cc88:	9b04      	ldr	r3, [sp, #16]
 800cc8a:	eba0 000a 	sub.w	r0, r0, sl
 800cc8e:	2240      	movs	r2, #64	@ 0x40
 800cc90:	4082      	lsls	r2, r0
 800cc92:	4313      	orrs	r3, r2
 800cc94:	3401      	adds	r4, #1
 800cc96:	9304      	str	r3, [sp, #16]
 800cc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc9c:	4824      	ldr	r0, [pc, #144]	@ (800cd30 <_svfiprintf_r+0x1e8>)
 800cc9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cca2:	2206      	movs	r2, #6
 800cca4:	f7f3 fa9c 	bl	80001e0 <memchr>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d036      	beq.n	800cd1a <_svfiprintf_r+0x1d2>
 800ccac:	4b21      	ldr	r3, [pc, #132]	@ (800cd34 <_svfiprintf_r+0x1ec>)
 800ccae:	bb1b      	cbnz	r3, 800ccf8 <_svfiprintf_r+0x1b0>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	3307      	adds	r3, #7
 800ccb4:	f023 0307 	bic.w	r3, r3, #7
 800ccb8:	3308      	adds	r3, #8
 800ccba:	9303      	str	r3, [sp, #12]
 800ccbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccbe:	4433      	add	r3, r6
 800ccc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccc2:	e76a      	b.n	800cb9a <_svfiprintf_r+0x52>
 800ccc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccc8:	460c      	mov	r4, r1
 800ccca:	2001      	movs	r0, #1
 800cccc:	e7a8      	b.n	800cc20 <_svfiprintf_r+0xd8>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	3401      	adds	r4, #1
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	f04f 0c0a 	mov.w	ip, #10
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce0:	3a30      	subs	r2, #48	@ 0x30
 800cce2:	2a09      	cmp	r2, #9
 800cce4:	d903      	bls.n	800ccee <_svfiprintf_r+0x1a6>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0c6      	beq.n	800cc78 <_svfiprintf_r+0x130>
 800ccea:	9105      	str	r1, [sp, #20]
 800ccec:	e7c4      	b.n	800cc78 <_svfiprintf_r+0x130>
 800ccee:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e7f0      	b.n	800ccda <_svfiprintf_r+0x192>
 800ccf8:	ab03      	add	r3, sp, #12
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cd38 <_svfiprintf_r+0x1f0>)
 800cd00:	a904      	add	r1, sp, #16
 800cd02:	4638      	mov	r0, r7
 800cd04:	f7fc fe5e 	bl	80099c4 <_printf_float>
 800cd08:	1c42      	adds	r2, r0, #1
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	d1d6      	bne.n	800ccbc <_svfiprintf_r+0x174>
 800cd0e:	89ab      	ldrh	r3, [r5, #12]
 800cd10:	065b      	lsls	r3, r3, #25
 800cd12:	f53f af2d 	bmi.w	800cb70 <_svfiprintf_r+0x28>
 800cd16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd18:	e72c      	b.n	800cb74 <_svfiprintf_r+0x2c>
 800cd1a:	ab03      	add	r3, sp, #12
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4b05      	ldr	r3, [pc, #20]	@ (800cd38 <_svfiprintf_r+0x1f0>)
 800cd22:	a904      	add	r1, sp, #16
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7fd f8e5 	bl	8009ef4 <_printf_i>
 800cd2a:	e7ed      	b.n	800cd08 <_svfiprintf_r+0x1c0>
 800cd2c:	0800db71 	.word	0x0800db71
 800cd30:	0800db7b 	.word	0x0800db7b
 800cd34:	080099c5 	.word	0x080099c5
 800cd38:	0800ca93 	.word	0x0800ca93
 800cd3c:	0800db77 	.word	0x0800db77

0800cd40 <__sfputc_r>:
 800cd40:	6893      	ldr	r3, [r2, #8]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	b410      	push	{r4}
 800cd48:	6093      	str	r3, [r2, #8]
 800cd4a:	da08      	bge.n	800cd5e <__sfputc_r+0x1e>
 800cd4c:	6994      	ldr	r4, [r2, #24]
 800cd4e:	42a3      	cmp	r3, r4
 800cd50:	db01      	blt.n	800cd56 <__sfputc_r+0x16>
 800cd52:	290a      	cmp	r1, #10
 800cd54:	d103      	bne.n	800cd5e <__sfputc_r+0x1e>
 800cd56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd5a:	f7fd bd94 	b.w	800a886 <__swbuf_r>
 800cd5e:	6813      	ldr	r3, [r2, #0]
 800cd60:	1c58      	adds	r0, r3, #1
 800cd62:	6010      	str	r0, [r2, #0]
 800cd64:	7019      	strb	r1, [r3, #0]
 800cd66:	4608      	mov	r0, r1
 800cd68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <__sfputs_r>:
 800cd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd70:	4606      	mov	r6, r0
 800cd72:	460f      	mov	r7, r1
 800cd74:	4614      	mov	r4, r2
 800cd76:	18d5      	adds	r5, r2, r3
 800cd78:	42ac      	cmp	r4, r5
 800cd7a:	d101      	bne.n	800cd80 <__sfputs_r+0x12>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e007      	b.n	800cd90 <__sfputs_r+0x22>
 800cd80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd84:	463a      	mov	r2, r7
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff ffda 	bl	800cd40 <__sfputc_r>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d1f3      	bne.n	800cd78 <__sfputs_r+0xa>
 800cd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd94 <_vfiprintf_r>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	460d      	mov	r5, r1
 800cd9a:	b09d      	sub	sp, #116	@ 0x74
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	4698      	mov	r8, r3
 800cda0:	4606      	mov	r6, r0
 800cda2:	b118      	cbz	r0, 800cdac <_vfiprintf_r+0x18>
 800cda4:	6a03      	ldr	r3, [r0, #32]
 800cda6:	b90b      	cbnz	r3, 800cdac <_vfiprintf_r+0x18>
 800cda8:	f7fd fc64 	bl	800a674 <__sinit>
 800cdac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdae:	07d9      	lsls	r1, r3, #31
 800cdb0:	d405      	bmi.n	800cdbe <_vfiprintf_r+0x2a>
 800cdb2:	89ab      	ldrh	r3, [r5, #12]
 800cdb4:	059a      	lsls	r2, r3, #22
 800cdb6:	d402      	bmi.n	800cdbe <_vfiprintf_r+0x2a>
 800cdb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdba:	f7fd ff10 	bl	800abde <__retarget_lock_acquire_recursive>
 800cdbe:	89ab      	ldrh	r3, [r5, #12]
 800cdc0:	071b      	lsls	r3, r3, #28
 800cdc2:	d501      	bpl.n	800cdc8 <_vfiprintf_r+0x34>
 800cdc4:	692b      	ldr	r3, [r5, #16]
 800cdc6:	b99b      	cbnz	r3, 800cdf0 <_vfiprintf_r+0x5c>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7fd fd9a 	bl	800a904 <__swsetup_r>
 800cdd0:	b170      	cbz	r0, 800cdf0 <_vfiprintf_r+0x5c>
 800cdd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdd4:	07dc      	lsls	r4, r3, #31
 800cdd6:	d504      	bpl.n	800cde2 <_vfiprintf_r+0x4e>
 800cdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cddc:	b01d      	add	sp, #116	@ 0x74
 800cdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	0598      	lsls	r0, r3, #22
 800cde6:	d4f7      	bmi.n	800cdd8 <_vfiprintf_r+0x44>
 800cde8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdea:	f7fd fef9 	bl	800abe0 <__retarget_lock_release_recursive>
 800cdee:	e7f3      	b.n	800cdd8 <_vfiprintf_r+0x44>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf4:	2320      	movs	r3, #32
 800cdf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdfe:	2330      	movs	r3, #48	@ 0x30
 800ce00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfb0 <_vfiprintf_r+0x21c>
 800ce04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce08:	f04f 0901 	mov.w	r9, #1
 800ce0c:	4623      	mov	r3, r4
 800ce0e:	469a      	mov	sl, r3
 800ce10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce14:	b10a      	cbz	r2, 800ce1a <_vfiprintf_r+0x86>
 800ce16:	2a25      	cmp	r2, #37	@ 0x25
 800ce18:	d1f9      	bne.n	800ce0e <_vfiprintf_r+0x7a>
 800ce1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce1e:	d00b      	beq.n	800ce38 <_vfiprintf_r+0xa4>
 800ce20:	465b      	mov	r3, fp
 800ce22:	4622      	mov	r2, r4
 800ce24:	4629      	mov	r1, r5
 800ce26:	4630      	mov	r0, r6
 800ce28:	f7ff ffa1 	bl	800cd6e <__sfputs_r>
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	f000 80a7 	beq.w	800cf80 <_vfiprintf_r+0x1ec>
 800ce32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce34:	445a      	add	r2, fp
 800ce36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce38:	f89a 3000 	ldrb.w	r3, [sl]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 809f 	beq.w	800cf80 <_vfiprintf_r+0x1ec>
 800ce42:	2300      	movs	r3, #0
 800ce44:	f04f 32ff 	mov.w	r2, #4294967295
 800ce48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce4c:	f10a 0a01 	add.w	sl, sl, #1
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	9307      	str	r3, [sp, #28]
 800ce54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce5a:	4654      	mov	r4, sl
 800ce5c:	2205      	movs	r2, #5
 800ce5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce62:	4853      	ldr	r0, [pc, #332]	@ (800cfb0 <_vfiprintf_r+0x21c>)
 800ce64:	f7f3 f9bc 	bl	80001e0 <memchr>
 800ce68:	9a04      	ldr	r2, [sp, #16]
 800ce6a:	b9d8      	cbnz	r0, 800cea4 <_vfiprintf_r+0x110>
 800ce6c:	06d1      	lsls	r1, r2, #27
 800ce6e:	bf44      	itt	mi
 800ce70:	2320      	movmi	r3, #32
 800ce72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce76:	0713      	lsls	r3, r2, #28
 800ce78:	bf44      	itt	mi
 800ce7a:	232b      	movmi	r3, #43	@ 0x2b
 800ce7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce80:	f89a 3000 	ldrb.w	r3, [sl]
 800ce84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce86:	d015      	beq.n	800ceb4 <_vfiprintf_r+0x120>
 800ce88:	9a07      	ldr	r2, [sp, #28]
 800ce8a:	4654      	mov	r4, sl
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	f04f 0c0a 	mov.w	ip, #10
 800ce92:	4621      	mov	r1, r4
 800ce94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce98:	3b30      	subs	r3, #48	@ 0x30
 800ce9a:	2b09      	cmp	r3, #9
 800ce9c:	d94b      	bls.n	800cf36 <_vfiprintf_r+0x1a2>
 800ce9e:	b1b0      	cbz	r0, 800cece <_vfiprintf_r+0x13a>
 800cea0:	9207      	str	r2, [sp, #28]
 800cea2:	e014      	b.n	800cece <_vfiprintf_r+0x13a>
 800cea4:	eba0 0308 	sub.w	r3, r0, r8
 800cea8:	fa09 f303 	lsl.w	r3, r9, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	9304      	str	r3, [sp, #16]
 800ceb0:	46a2      	mov	sl, r4
 800ceb2:	e7d2      	b.n	800ce5a <_vfiprintf_r+0xc6>
 800ceb4:	9b03      	ldr	r3, [sp, #12]
 800ceb6:	1d19      	adds	r1, r3, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	9103      	str	r1, [sp, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bfbb      	ittet	lt
 800cec0:	425b      	neglt	r3, r3
 800cec2:	f042 0202 	orrlt.w	r2, r2, #2
 800cec6:	9307      	strge	r3, [sp, #28]
 800cec8:	9307      	strlt	r3, [sp, #28]
 800ceca:	bfb8      	it	lt
 800cecc:	9204      	strlt	r2, [sp, #16]
 800cece:	7823      	ldrb	r3, [r4, #0]
 800ced0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ced2:	d10a      	bne.n	800ceea <_vfiprintf_r+0x156>
 800ced4:	7863      	ldrb	r3, [r4, #1]
 800ced6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced8:	d132      	bne.n	800cf40 <_vfiprintf_r+0x1ac>
 800ceda:	9b03      	ldr	r3, [sp, #12]
 800cedc:	1d1a      	adds	r2, r3, #4
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	9203      	str	r2, [sp, #12]
 800cee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cee6:	3402      	adds	r4, #2
 800cee8:	9305      	str	r3, [sp, #20]
 800ceea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfc0 <_vfiprintf_r+0x22c>
 800ceee:	7821      	ldrb	r1, [r4, #0]
 800cef0:	2203      	movs	r2, #3
 800cef2:	4650      	mov	r0, sl
 800cef4:	f7f3 f974 	bl	80001e0 <memchr>
 800cef8:	b138      	cbz	r0, 800cf0a <_vfiprintf_r+0x176>
 800cefa:	9b04      	ldr	r3, [sp, #16]
 800cefc:	eba0 000a 	sub.w	r0, r0, sl
 800cf00:	2240      	movs	r2, #64	@ 0x40
 800cf02:	4082      	lsls	r2, r0
 800cf04:	4313      	orrs	r3, r2
 800cf06:	3401      	adds	r4, #1
 800cf08:	9304      	str	r3, [sp, #16]
 800cf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0e:	4829      	ldr	r0, [pc, #164]	@ (800cfb4 <_vfiprintf_r+0x220>)
 800cf10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf14:	2206      	movs	r2, #6
 800cf16:	f7f3 f963 	bl	80001e0 <memchr>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d03f      	beq.n	800cf9e <_vfiprintf_r+0x20a>
 800cf1e:	4b26      	ldr	r3, [pc, #152]	@ (800cfb8 <_vfiprintf_r+0x224>)
 800cf20:	bb1b      	cbnz	r3, 800cf6a <_vfiprintf_r+0x1d6>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	3307      	adds	r3, #7
 800cf26:	f023 0307 	bic.w	r3, r3, #7
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	9303      	str	r3, [sp, #12]
 800cf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf30:	443b      	add	r3, r7
 800cf32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf34:	e76a      	b.n	800ce0c <_vfiprintf_r+0x78>
 800cf36:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	e7a8      	b.n	800ce92 <_vfiprintf_r+0xfe>
 800cf40:	2300      	movs	r3, #0
 800cf42:	3401      	adds	r4, #1
 800cf44:	9305      	str	r3, [sp, #20]
 800cf46:	4619      	mov	r1, r3
 800cf48:	f04f 0c0a 	mov.w	ip, #10
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf52:	3a30      	subs	r2, #48	@ 0x30
 800cf54:	2a09      	cmp	r2, #9
 800cf56:	d903      	bls.n	800cf60 <_vfiprintf_r+0x1cc>
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d0c6      	beq.n	800ceea <_vfiprintf_r+0x156>
 800cf5c:	9105      	str	r1, [sp, #20]
 800cf5e:	e7c4      	b.n	800ceea <_vfiprintf_r+0x156>
 800cf60:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf64:	4604      	mov	r4, r0
 800cf66:	2301      	movs	r3, #1
 800cf68:	e7f0      	b.n	800cf4c <_vfiprintf_r+0x1b8>
 800cf6a:	ab03      	add	r3, sp, #12
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4b12      	ldr	r3, [pc, #72]	@ (800cfbc <_vfiprintf_r+0x228>)
 800cf72:	a904      	add	r1, sp, #16
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7fc fd25 	bl	80099c4 <_printf_float>
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	1c78      	adds	r0, r7, #1
 800cf7e:	d1d6      	bne.n	800cf2e <_vfiprintf_r+0x19a>
 800cf80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf82:	07d9      	lsls	r1, r3, #31
 800cf84:	d405      	bmi.n	800cf92 <_vfiprintf_r+0x1fe>
 800cf86:	89ab      	ldrh	r3, [r5, #12]
 800cf88:	059a      	lsls	r2, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_vfiprintf_r+0x1fe>
 800cf8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf8e:	f7fd fe27 	bl	800abe0 <__retarget_lock_release_recursive>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	065b      	lsls	r3, r3, #25
 800cf96:	f53f af1f 	bmi.w	800cdd8 <_vfiprintf_r+0x44>
 800cf9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf9c:	e71e      	b.n	800cddc <_vfiprintf_r+0x48>
 800cf9e:	ab03      	add	r3, sp, #12
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <_vfiprintf_r+0x228>)
 800cfa6:	a904      	add	r1, sp, #16
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7fc ffa3 	bl	8009ef4 <_printf_i>
 800cfae:	e7e4      	b.n	800cf7a <_vfiprintf_r+0x1e6>
 800cfb0:	0800db71 	.word	0x0800db71
 800cfb4:	0800db7b 	.word	0x0800db7b
 800cfb8:	080099c5 	.word	0x080099c5
 800cfbc:	0800cd6f 	.word	0x0800cd6f
 800cfc0:	0800db77 	.word	0x0800db77

0800cfc4 <__sflush_r>:
 800cfc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfcc:	0716      	lsls	r6, r2, #28
 800cfce:	4605      	mov	r5, r0
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	d454      	bmi.n	800d07e <__sflush_r+0xba>
 800cfd4:	684b      	ldr	r3, [r1, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	dc02      	bgt.n	800cfe0 <__sflush_r+0x1c>
 800cfda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dd48      	ble.n	800d072 <__sflush_r+0xae>
 800cfe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfe2:	2e00      	cmp	r6, #0
 800cfe4:	d045      	beq.n	800d072 <__sflush_r+0xae>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfec:	682f      	ldr	r7, [r5, #0]
 800cfee:	6a21      	ldr	r1, [r4, #32]
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	d030      	beq.n	800d056 <__sflush_r+0x92>
 800cff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	0759      	lsls	r1, r3, #29
 800cffa:	d505      	bpl.n	800d008 <__sflush_r+0x44>
 800cffc:	6863      	ldr	r3, [r4, #4]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d002:	b10b      	cbz	r3, 800d008 <__sflush_r+0x44>
 800d004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	2300      	movs	r3, #0
 800d00a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d00c:	6a21      	ldr	r1, [r4, #32]
 800d00e:	4628      	mov	r0, r5
 800d010:	47b0      	blx	r6
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	d106      	bne.n	800d026 <__sflush_r+0x62>
 800d018:	6829      	ldr	r1, [r5, #0]
 800d01a:	291d      	cmp	r1, #29
 800d01c:	d82b      	bhi.n	800d076 <__sflush_r+0xb2>
 800d01e:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c8 <__sflush_r+0x104>)
 800d020:	410a      	asrs	r2, r1
 800d022:	07d6      	lsls	r6, r2, #31
 800d024:	d427      	bmi.n	800d076 <__sflush_r+0xb2>
 800d026:	2200      	movs	r2, #0
 800d028:	6062      	str	r2, [r4, #4]
 800d02a:	04d9      	lsls	r1, r3, #19
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	6022      	str	r2, [r4, #0]
 800d030:	d504      	bpl.n	800d03c <__sflush_r+0x78>
 800d032:	1c42      	adds	r2, r0, #1
 800d034:	d101      	bne.n	800d03a <__sflush_r+0x76>
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	b903      	cbnz	r3, 800d03c <__sflush_r+0x78>
 800d03a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d03c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d03e:	602f      	str	r7, [r5, #0]
 800d040:	b1b9      	cbz	r1, 800d072 <__sflush_r+0xae>
 800d042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d046:	4299      	cmp	r1, r3
 800d048:	d002      	beq.n	800d050 <__sflush_r+0x8c>
 800d04a:	4628      	mov	r0, r5
 800d04c:	f7fe fc50 	bl	800b8f0 <_free_r>
 800d050:	2300      	movs	r3, #0
 800d052:	6363      	str	r3, [r4, #52]	@ 0x34
 800d054:	e00d      	b.n	800d072 <__sflush_r+0xae>
 800d056:	2301      	movs	r3, #1
 800d058:	4628      	mov	r0, r5
 800d05a:	47b0      	blx	r6
 800d05c:	4602      	mov	r2, r0
 800d05e:	1c50      	adds	r0, r2, #1
 800d060:	d1c9      	bne.n	800cff6 <__sflush_r+0x32>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0c6      	beq.n	800cff6 <__sflush_r+0x32>
 800d068:	2b1d      	cmp	r3, #29
 800d06a:	d001      	beq.n	800d070 <__sflush_r+0xac>
 800d06c:	2b16      	cmp	r3, #22
 800d06e:	d11e      	bne.n	800d0ae <__sflush_r+0xea>
 800d070:	602f      	str	r7, [r5, #0]
 800d072:	2000      	movs	r0, #0
 800d074:	e022      	b.n	800d0bc <__sflush_r+0xf8>
 800d076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07a:	b21b      	sxth	r3, r3
 800d07c:	e01b      	b.n	800d0b6 <__sflush_r+0xf2>
 800d07e:	690f      	ldr	r7, [r1, #16]
 800d080:	2f00      	cmp	r7, #0
 800d082:	d0f6      	beq.n	800d072 <__sflush_r+0xae>
 800d084:	0793      	lsls	r3, r2, #30
 800d086:	680e      	ldr	r6, [r1, #0]
 800d088:	bf08      	it	eq
 800d08a:	694b      	ldreq	r3, [r1, #20]
 800d08c:	600f      	str	r7, [r1, #0]
 800d08e:	bf18      	it	ne
 800d090:	2300      	movne	r3, #0
 800d092:	eba6 0807 	sub.w	r8, r6, r7
 800d096:	608b      	str	r3, [r1, #8]
 800d098:	f1b8 0f00 	cmp.w	r8, #0
 800d09c:	dde9      	ble.n	800d072 <__sflush_r+0xae>
 800d09e:	6a21      	ldr	r1, [r4, #32]
 800d0a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0a2:	4643      	mov	r3, r8
 800d0a4:	463a      	mov	r2, r7
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	47b0      	blx	r6
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	dc08      	bgt.n	800d0c0 <__sflush_r+0xfc>
 800d0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c0:	4407      	add	r7, r0
 800d0c2:	eba8 0800 	sub.w	r8, r8, r0
 800d0c6:	e7e7      	b.n	800d098 <__sflush_r+0xd4>
 800d0c8:	dfbffffe 	.word	0xdfbffffe

0800d0cc <_fflush_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	690b      	ldr	r3, [r1, #16]
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	b913      	cbnz	r3, 800d0dc <_fflush_r+0x10>
 800d0d6:	2500      	movs	r5, #0
 800d0d8:	4628      	mov	r0, r5
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	b118      	cbz	r0, 800d0e6 <_fflush_r+0x1a>
 800d0de:	6a03      	ldr	r3, [r0, #32]
 800d0e0:	b90b      	cbnz	r3, 800d0e6 <_fflush_r+0x1a>
 800d0e2:	f7fd fac7 	bl	800a674 <__sinit>
 800d0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0f3      	beq.n	800d0d6 <_fflush_r+0xa>
 800d0ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0f0:	07d0      	lsls	r0, r2, #31
 800d0f2:	d404      	bmi.n	800d0fe <_fflush_r+0x32>
 800d0f4:	0599      	lsls	r1, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_fflush_r+0x32>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0fa:	f7fd fd70 	bl	800abde <__retarget_lock_acquire_recursive>
 800d0fe:	4628      	mov	r0, r5
 800d100:	4621      	mov	r1, r4
 800d102:	f7ff ff5f 	bl	800cfc4 <__sflush_r>
 800d106:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d108:	07da      	lsls	r2, r3, #31
 800d10a:	4605      	mov	r5, r0
 800d10c:	d4e4      	bmi.n	800d0d8 <_fflush_r+0xc>
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	059b      	lsls	r3, r3, #22
 800d112:	d4e1      	bmi.n	800d0d8 <_fflush_r+0xc>
 800d114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d116:	f7fd fd63 	bl	800abe0 <__retarget_lock_release_recursive>
 800d11a:	e7dd      	b.n	800d0d8 <_fflush_r+0xc>

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	@ (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f7ff fe31 	bl	800cd94 <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	20000198 	.word	0x20000198

0800d140 <__swhatbuf_r>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	460c      	mov	r4, r1
 800d144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d148:	2900      	cmp	r1, #0
 800d14a:	b096      	sub	sp, #88	@ 0x58
 800d14c:	4615      	mov	r5, r2
 800d14e:	461e      	mov	r6, r3
 800d150:	da0d      	bge.n	800d16e <__swhatbuf_r+0x2e>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d158:	f04f 0100 	mov.w	r1, #0
 800d15c:	bf14      	ite	ne
 800d15e:	2340      	movne	r3, #64	@ 0x40
 800d160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d164:	2000      	movs	r0, #0
 800d166:	6031      	str	r1, [r6, #0]
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	b016      	add	sp, #88	@ 0x58
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	466a      	mov	r2, sp
 800d170:	f000 f862 	bl	800d238 <_fstat_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	dbec      	blt.n	800d152 <__swhatbuf_r+0x12>
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d17e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d182:	4259      	negs	r1, r3
 800d184:	4159      	adcs	r1, r3
 800d186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d18a:	e7eb      	b.n	800d164 <__swhatbuf_r+0x24>

0800d18c <__smakebuf_r>:
 800d18c:	898b      	ldrh	r3, [r1, #12]
 800d18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d190:	079d      	lsls	r5, r3, #30
 800d192:	4606      	mov	r6, r0
 800d194:	460c      	mov	r4, r1
 800d196:	d507      	bpl.n	800d1a8 <__smakebuf_r+0x1c>
 800d198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	6123      	str	r3, [r4, #16]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	6163      	str	r3, [r4, #20]
 800d1a4:	b003      	add	sp, #12
 800d1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1a8:	ab01      	add	r3, sp, #4
 800d1aa:	466a      	mov	r2, sp
 800d1ac:	f7ff ffc8 	bl	800d140 <__swhatbuf_r>
 800d1b0:	9f00      	ldr	r7, [sp, #0]
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7fb fc6c 	bl	8008a94 <_malloc_r>
 800d1bc:	b948      	cbnz	r0, 800d1d2 <__smakebuf_r+0x46>
 800d1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c2:	059a      	lsls	r2, r3, #22
 800d1c4:	d4ee      	bmi.n	800d1a4 <__smakebuf_r+0x18>
 800d1c6:	f023 0303 	bic.w	r3, r3, #3
 800d1ca:	f043 0302 	orr.w	r3, r3, #2
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	e7e2      	b.n	800d198 <__smakebuf_r+0xc>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	6020      	str	r0, [r4, #0]
 800d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1e2:	b15b      	cbz	r3, 800d1fc <__smakebuf_r+0x70>
 800d1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f000 f837 	bl	800d25c <_isatty_r>
 800d1ee:	b128      	cbz	r0, 800d1fc <__smakebuf_r+0x70>
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	431d      	orrs	r5, r3
 800d200:	81a5      	strh	r5, [r4, #12]
 800d202:	e7cf      	b.n	800d1a4 <__smakebuf_r+0x18>

0800d204 <memmove>:
 800d204:	4288      	cmp	r0, r1
 800d206:	b510      	push	{r4, lr}
 800d208:	eb01 0402 	add.w	r4, r1, r2
 800d20c:	d902      	bls.n	800d214 <memmove+0x10>
 800d20e:	4284      	cmp	r4, r0
 800d210:	4623      	mov	r3, r4
 800d212:	d807      	bhi.n	800d224 <memmove+0x20>
 800d214:	1e43      	subs	r3, r0, #1
 800d216:	42a1      	cmp	r1, r4
 800d218:	d008      	beq.n	800d22c <memmove+0x28>
 800d21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d222:	e7f8      	b.n	800d216 <memmove+0x12>
 800d224:	4402      	add	r2, r0
 800d226:	4601      	mov	r1, r0
 800d228:	428a      	cmp	r2, r1
 800d22a:	d100      	bne.n	800d22e <memmove+0x2a>
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d236:	e7f7      	b.n	800d228 <memmove+0x24>

0800d238 <_fstat_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	4d07      	ldr	r5, [pc, #28]	@ (800d258 <_fstat_r+0x20>)
 800d23c:	2300      	movs	r3, #0
 800d23e:	4604      	mov	r4, r0
 800d240:	4608      	mov	r0, r1
 800d242:	4611      	mov	r1, r2
 800d244:	602b      	str	r3, [r5, #0]
 800d246:	f7f6 f9b7 	bl	80035b8 <_fstat>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	d102      	bne.n	800d254 <_fstat_r+0x1c>
 800d24e:	682b      	ldr	r3, [r5, #0]
 800d250:	b103      	cbz	r3, 800d254 <_fstat_r+0x1c>
 800d252:	6023      	str	r3, [r4, #0]
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	200007dc 	.word	0x200007dc

0800d25c <_isatty_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d06      	ldr	r5, [pc, #24]	@ (800d278 <_isatty_r+0x1c>)
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f6 f9b6 	bl	80035d8 <_isatty>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_isatty_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_isatty_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	200007dc 	.word	0x200007dc

0800d27c <abort>:
 800d27c:	b508      	push	{r3, lr}
 800d27e:	2006      	movs	r0, #6
 800d280:	f000 f86e 	bl	800d360 <raise>
 800d284:	2001      	movs	r0, #1
 800d286:	f7f6 f947 	bl	8003518 <_exit>

0800d28a <_calloc_r>:
 800d28a:	b570      	push	{r4, r5, r6, lr}
 800d28c:	fba1 5402 	umull	r5, r4, r1, r2
 800d290:	b93c      	cbnz	r4, 800d2a2 <_calloc_r+0x18>
 800d292:	4629      	mov	r1, r5
 800d294:	f7fb fbfe 	bl	8008a94 <_malloc_r>
 800d298:	4606      	mov	r6, r0
 800d29a:	b928      	cbnz	r0, 800d2a8 <_calloc_r+0x1e>
 800d29c:	2600      	movs	r6, #0
 800d29e:	4630      	mov	r0, r6
 800d2a0:	bd70      	pop	{r4, r5, r6, pc}
 800d2a2:	220c      	movs	r2, #12
 800d2a4:	6002      	str	r2, [r0, #0]
 800d2a6:	e7f9      	b.n	800d29c <_calloc_r+0x12>
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f7fd fb80 	bl	800a9b0 <memset>
 800d2b0:	e7f5      	b.n	800d29e <_calloc_r+0x14>

0800d2b2 <_realloc_r>:
 800d2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4615      	mov	r5, r2
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	b921      	cbnz	r1, 800d2c8 <_realloc_r+0x16>
 800d2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	f7fb bbe6 	b.w	8008a94 <_malloc_r>
 800d2c8:	b92a      	cbnz	r2, 800d2d6 <_realloc_r+0x24>
 800d2ca:	f7fe fb11 	bl	800b8f0 <_free_r>
 800d2ce:	2400      	movs	r4, #0
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d6:	f000 f85f 	bl	800d398 <_malloc_usable_size_r>
 800d2da:	4285      	cmp	r5, r0
 800d2dc:	4606      	mov	r6, r0
 800d2de:	d802      	bhi.n	800d2e6 <_realloc_r+0x34>
 800d2e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2e4:	d8f4      	bhi.n	800d2d0 <_realloc_r+0x1e>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	f7fb fbd3 	bl	8008a94 <_malloc_r>
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0ec      	beq.n	800d2ce <_realloc_r+0x1c>
 800d2f4:	42b5      	cmp	r5, r6
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	bf28      	it	cs
 800d2fc:	4632      	movcs	r2, r6
 800d2fe:	f7fd fc70 	bl	800abe2 <memcpy>
 800d302:	4621      	mov	r1, r4
 800d304:	4640      	mov	r0, r8
 800d306:	f7fe faf3 	bl	800b8f0 <_free_r>
 800d30a:	463c      	mov	r4, r7
 800d30c:	e7e0      	b.n	800d2d0 <_realloc_r+0x1e>

0800d30e <_raise_r>:
 800d30e:	291f      	cmp	r1, #31
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4605      	mov	r5, r0
 800d314:	460c      	mov	r4, r1
 800d316:	d904      	bls.n	800d322 <_raise_r+0x14>
 800d318:	2316      	movs	r3, #22
 800d31a:	6003      	str	r3, [r0, #0]
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	bd38      	pop	{r3, r4, r5, pc}
 800d322:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d324:	b112      	cbz	r2, 800d32c <_raise_r+0x1e>
 800d326:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d32a:	b94b      	cbnz	r3, 800d340 <_raise_r+0x32>
 800d32c:	4628      	mov	r0, r5
 800d32e:	f000 f831 	bl	800d394 <_getpid_r>
 800d332:	4622      	mov	r2, r4
 800d334:	4601      	mov	r1, r0
 800d336:	4628      	mov	r0, r5
 800d338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d33c:	f000 b818 	b.w	800d370 <_kill_r>
 800d340:	2b01      	cmp	r3, #1
 800d342:	d00a      	beq.n	800d35a <_raise_r+0x4c>
 800d344:	1c59      	adds	r1, r3, #1
 800d346:	d103      	bne.n	800d350 <_raise_r+0x42>
 800d348:	2316      	movs	r3, #22
 800d34a:	6003      	str	r3, [r0, #0]
 800d34c:	2001      	movs	r0, #1
 800d34e:	e7e7      	b.n	800d320 <_raise_r+0x12>
 800d350:	2100      	movs	r1, #0
 800d352:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d356:	4620      	mov	r0, r4
 800d358:	4798      	blx	r3
 800d35a:	2000      	movs	r0, #0
 800d35c:	e7e0      	b.n	800d320 <_raise_r+0x12>
	...

0800d360 <raise>:
 800d360:	4b02      	ldr	r3, [pc, #8]	@ (800d36c <raise+0xc>)
 800d362:	4601      	mov	r1, r0
 800d364:	6818      	ldr	r0, [r3, #0]
 800d366:	f7ff bfd2 	b.w	800d30e <_raise_r>
 800d36a:	bf00      	nop
 800d36c:	20000198 	.word	0x20000198

0800d370 <_kill_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d07      	ldr	r5, [pc, #28]	@ (800d390 <_kill_r+0x20>)
 800d374:	2300      	movs	r3, #0
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	4611      	mov	r1, r2
 800d37c:	602b      	str	r3, [r5, #0]
 800d37e:	f7f6 f8bb 	bl	80034f8 <_kill>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	d102      	bne.n	800d38c <_kill_r+0x1c>
 800d386:	682b      	ldr	r3, [r5, #0]
 800d388:	b103      	cbz	r3, 800d38c <_kill_r+0x1c>
 800d38a:	6023      	str	r3, [r4, #0]
 800d38c:	bd38      	pop	{r3, r4, r5, pc}
 800d38e:	bf00      	nop
 800d390:	200007dc 	.word	0x200007dc

0800d394 <_getpid_r>:
 800d394:	f7f6 b8a8 	b.w	80034e8 <_getpid>

0800d398 <_malloc_usable_size_r>:
 800d398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d39c:	1f18      	subs	r0, r3, #4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfbc      	itt	lt
 800d3a2:	580b      	ldrlt	r3, [r1, r0]
 800d3a4:	18c0      	addlt	r0, r0, r3
 800d3a6:	4770      	bx	lr

0800d3a8 <_init>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr

0800d3b4 <_fini>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr
