
BFMC2024_BRUSHED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800d6d0  0800d6d0  0000e6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de94  0800de94  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800de94  0800de94  0000ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de9c  0800de9c  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de9c  0800de9c  0000ee9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dea0  0800dea0  0000eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800dea4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  200001e8  0800e08c  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800e08c  0000f80c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135c6  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8f  00000000  00000000  000227de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00025470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee7  00000000  00000000  00026770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3f7  00000000  00000000  00027657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180ef  00000000  00000000  00041a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9dd  00000000  00000000  00059b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f951a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e0  00000000  00000000  000f9560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ffc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d6b8 	.word	0x0800d6b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d6b8 	.word	0x0800d6b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <BL_set_PWM>:
float BL_DegreeSec2RPM(float speed_degsec){
	float speed_rpm = speed_degsec * 60/360;
	return speed_rpm;
}

void BL_set_PWM(float duty){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM10->CCR1 = duty*TIM10->ARR;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <BL_set_PWM+0x38>)
 8001000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <BL_set_PWM+0x38>)
 8001014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001018:	ee17 2a90 	vmov	r2, s15
 800101c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40014400 	.word	0x40014400

08001030 <DegreeSec2RPM>:
#include <DC_motor.h>

float DegreeSec2RPM(float speed_degsec){
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 800103a:	edd7 7a01 	vldr	s15, [r7, #4]
 800103e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001068 <DegreeSec2RPM+0x38>
 8001042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001046:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800106c <DegreeSec2RPM+0x3c>
 800104a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104e:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	ee07 3a90 	vmov	s15, r3
}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	42700000 	.word	0x42700000
 800106c:	43b40000 	.word	0x43b40000

08001070 <Voltage2Duty>:

float Voltage2Duty(float u){
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/V_MAX;
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80010d4 <Voltage2Duty+0x64>
 8001082:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001086:	eef1 6a0e 	vmov.f32	s13, #30	@ 0x40f00000  7.5
 800108a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108e:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010d4 <Voltage2Duty+0x64>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	dd02      	ble.n	80010aa <Voltage2Duty+0x3a>
		duty=100;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <Voltage2Duty+0x68>)
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e009      	b.n	80010be <Voltage2Duty+0x4e>
	} else if(duty<0){
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d502      	bpl.n	80010be <Voltage2Duty+0x4e>
		duty = 0;
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	ee07 3a90 	vmov	s15, r3
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	42c80000 	.word	0x42c80000
 80010d8:	42c80000 	.word	0x42c80000

080010dc <set_PWM_and_dir>:
		dir = 1;
	}
	return dir;
}

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001140 <set_PWM_and_dir+0x64>
 80010f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <set_PWM_and_dir+0x68>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <set_PWM_and_dir+0x68>)
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	635a      	str	r2, [r3, #52]	@ 0x34

	if( dir == 0){
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <set_PWM_and_dir+0x4c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <set_PWM_and_dir+0x6c>)
 8001122:	f003 fdf9 	bl	8004d18 <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 8001126:	e007      	b.n	8001138 <set_PWM_and_dir+0x5c>
	}else if ( dir == 1){
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d104      	bne.n	8001138 <set_PWM_and_dir+0x5c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <set_PWM_and_dir+0x6c>)
 8001134:	f003 fdf0 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	42c80000 	.word	0x42c80000
 8001144:	40014400 	.word	0x40014400
 8001148:	40020800 	.word	0x40020800

0800114c <init_PID>:
#include "PID.h"
#include <stdio.h>

void init_PID(PID* p, float Tc, float u_max, float u_min, float offset){
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6178      	str	r0, [r7, #20]
 8001154:	ed87 0a04 	vstr	s0, [r7, #16]
 8001158:	edc7 0a03 	vstr	s1, [r7, #12]
 800115c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001160:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc = Tc;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	611a      	str	r2, [r3, #16]
	p->u_max = u_max;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	615a      	str	r2, [r3, #20]
	p->u_min = u_min;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	619a      	str	r2, [r3, #24]
	p->Iterm = 0;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
	p->e_old = 0;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
	p->offset = offset;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd, float Kb){
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6178      	str	r0, [r7, #20]
 80011a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80011a4:	edc7 0a03 	vstr	s1, [r7, #12]
 80011a8:	ed87 1a02 	vstr	s2, [r7, #8]
 80011ac:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Kp = Kp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	609a      	str	r2, [r3, #8]
	p->Kb = Kb;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	60da      	str	r2, [r3, #12]
}
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <resetPID>:

void resetPID(PID* p){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	p->Iterm = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
	p->e_old = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 80011f8:	b480      	push	{r7}
 80011fa:	b08d      	sub	sp, #52	@ 0x34
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	ed87 0a02 	vstr	s0, [r7, #8]
 8001204:	edc7 0a01 	vstr	s1, [r7, #4]
	float u;
	float newIterm;
	float e = 0;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24

	e = r-y;
 800120e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (isinf(p->Iterm) || isnan(p->Iterm)) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 7a08 	vldr	s15, [r3, #32]
 8001224:	eef0 7ae7 	vabs.f32	s15, s15
 8001228:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80013c8 <PID_controller+0x1d0>
 800122c:	eef4 7a47 	vcmp.f32	s15, s14
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	bfd4      	ite	le
 8001236:	2301      	movle	r3, #1
 8001238:	2300      	movgt	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <PID_controller+0x5e>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a08 	vldr	s15, [r3, #32]
 800124c:	eef4 7a67 	vcmp.f32	s15, s15
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	d707      	bvc.n	8001266 <PID_controller+0x6e>
		p->Iterm = 0;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
		p->e_old = 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
	}


	float Pterm = p->Kp*e;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	edc7 7a08 	vstr	s15, [r7, #32]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ed93 7a08 	vldr	s14, [r3, #32]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	edd3 6a01 	vldr	s13, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edd3 7a04 	vldr	s15, [r3, #16]
 800128a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	edd3 7a07 	vldr	s15, [r3, #28]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80012b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c2:	edc7 7a07 	vstr	s15, [r7, #28]

	p->e_old = e;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ca:	61da      	str	r2, [r3, #28]


	u = Pterm + newIterm + Dterm + p->offset;
 80012cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80012d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	edc7 7a06 	vstr	s15, [r7, #24]

	if(p->offset == 0){
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d11a      	bne.n	8001334 <PID_controller+0x13c>
		// ANTI-WINDUP DEL TERMINE INTEGRALE
		if(newIterm > p->u_max){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edd3 7a05 	vldr	s15, [r3, #20]
 8001304:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	dd03      	ble.n	800131a <PID_controller+0x122>
			newIterm = p->u_max;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001318:	e00c      	b.n	8001334 <PID_controller+0x13c>
		}
		else if(newIterm < p->u_min){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001320:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d502      	bpl.n	8001334 <PID_controller+0x13c>
			newIterm = p->u_min;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

		// saturazione con back-calculation
		float saturated_u = u;
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(saturated_u > p->u_max){
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	edd3 7a05 	vldr	s15, [r3, #20]
 800133e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	dd03      	ble.n	8001354 <PID_controller+0x15c>
			saturated_u = p->u_max;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001352:	e00c      	b.n	800136e <PID_controller+0x176>
		}
		else if(saturated_u < p->u_min){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	edd3 7a06 	vldr	s15, [r3, #24]
 800135a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d502      	bpl.n	800136e <PID_controller+0x176>
			saturated_u = p->u_min;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		float correction = p->Kb * (saturated_u - u) * p->Ki * p->Tc;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	ed93 7a03 	vldr	s14, [r3, #12]
 8001374:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001378:	edd7 7a06 	vldr	s15, [r7, #24]
 800137c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edd3 7a01 	vldr	s15, [r3, #4]
 800138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a04 	vldr	s15, [r3, #16]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	edc7 7a05 	vstr	s15, [r7, #20]
		p->Iterm = newIterm + correction;
 800139c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	edc3 7a08 	vstr	s15, [r3, #32]

		u = saturated_u;
 80013ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b0:	61bb      	str	r3, [r7, #24]

	if(p->offset == 0){
		//printf("%f;%f;%f\r\n", u, p->Iterm, correction);
	}

	return u;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	ee07 3a90 	vmov	s15, r3
}
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	3734      	adds	r7, #52	@ 0x34
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	7f7fffff 	.word	0x7f7fffff

080013cc <parseCSV>:


#define MAX_VALUES 3


void parseCSV(const char *csvString, float *values) {
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    char *token;
    char *copy = strdup(csvString); // Make a copy of the string to avoid modifying the original
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f009 fc7a 	bl	800acd0 <strdup>
 80013dc:	4603      	mov	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
    int index = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]

    token = strtok(copy, ",");
 80013e4:	4912      	ldr	r1, [pc, #72]	@ (8001430 <parseCSV+0x64>)
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f009 fca0 	bl	800ad2c <strtok>
 80013ec:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80013ee:	e012      	b.n	8001416 <parseCSV+0x4a>
        values[index++] = strtof(token, NULL); // Convert token to float and store in the array
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	613a      	str	r2, [r7, #16]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	18d4      	adds	r4, r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f008 fb64 	bl	8009acc <strtof>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	edc4 7a00 	vstr	s15, [r4]
        token = strtok(NULL, ",");
 800140c:	4908      	ldr	r1, [pc, #32]	@ (8001430 <parseCSV+0x64>)
 800140e:	2000      	movs	r0, #0
 8001410:	f009 fc8c 	bl	800ad2c <strtok>
 8001414:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <parseCSV+0x56>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b02      	cmp	r3, #2
 8001420:	dde6      	ble.n	80013f0 <parseCSV+0x24>
    }

    free(copy); // Free the dynamically allocated memory for the copied string
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f007 fc92 	bl	8008d4c <free>
}
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	0800d6d0 	.word	0x0800d6d0

08001434 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4619      	mov	r1, r3
 8001442:	2007      	movs	r0, #7
 8001444:	f000 fadc 	bl	8001a00 <bno055_writeData>
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4619      	mov	r1, r3
 800145e:	203d      	movs	r0, #61	@ 0x3d
 8001460:	f000 face 	bl	8001a00 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800146a:	2013      	movs	r0, #19
 800146c:	f000 fabc 	bl	80019e8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001470:	e002      	b.n	8001478 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001472:	2007      	movs	r0, #7
 8001474:	f000 fab8 	bl	80019e8 <bno055_delay>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff ffe3 	bl	8001450 <bno055_setOperationMode>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}

0800148e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001492:	200c      	movs	r0, #12
 8001494:	f7ff ffdc 	bl	8001450 <bno055_setOperationMode>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80014a0:	2120      	movs	r1, #32
 80014a2:	203f      	movs	r0, #63	@ 0x3f
 80014a4:	f000 faac 	bl	8001a00 <bno055_writeData>
  bno055_delay(700);
 80014a8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80014ac:	f000 fa9c 	bl	80019e8 <bno055_delay>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  bno055_reset();
 80014ba:	f7ff ffef 	bl	800149c <bno055_reset>

  uint8_t id = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 fb85 	bl	8001bd8 <bno055_readData>
  if (id != BNO055_ID) {
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80014d2:	d004      	beq.n	80014de <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <bno055_setup+0x4c>)
 80014da:	f009 fa89 	bl	800a9f0 <iprintf>
  }
  bno055_setPage(0);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ffa8 	bl	8001434 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	203f      	movs	r0, #63	@ 0x3f
 80014e8:	f000 fa8a 	bl	8001a00 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80014ec:	f7ff ffc8 	bl	8001480 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 fa79 	bl	80019e8 <bno055_delay>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	0800d6d4 	.word	0x0800d6d4

08001504 <bno055_getSystemStatus>:
  uint8_t tmp;
  bno055_readData(BNO055_BL_REV_ID, &tmp, 1);
  return tmp;
}

uint8_t bno055_getSystemStatus() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff ff92 	bl	8001434 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_STATUS, &tmp, 1);
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	2039      	movs	r0, #57	@ 0x39
 8001518:	f000 fb5e 	bl	8001bd8 <bno055_readData>
  return tmp;
 800151c:	79fb      	ldrb	r3, [r7, #7]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800152c:	b09e      	sub	sp, #120	@ 0x78
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff ff7c 	bl	8001434 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800153c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001540:	2b20      	cmp	r3, #32
 8001542:	d108      	bne.n	8001556 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001544:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800154c:	2208      	movs	r2, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb42 	bl	8001bd8 <bno055_readData>
 8001554:	e007      	b.n	8001566 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001556:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800155a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155e:	2206      	movs	r2, #6
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fb39 	bl	8001bd8 <bno055_readData>

  double scale = 1;
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b8b      	ldr	r3, [pc, #556]	@ (8001798 <bno055_getVector+0x270>)
 800156c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001574:	2b0e      	cmp	r3, #14
 8001576:	d109      	bne.n	800158c <bno055_getVector+0x64>
    scale = magScale;
 8001578:	4b88      	ldr	r3, [pc, #544]	@ (800179c <bno055_getVector+0x274>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffc9 	bl	8000514 <__aeabi_ui2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800158a:	e03e      	b.n	800160a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001590:	2b08      	cmp	r3, #8
 8001592:	d007      	beq.n	80015a4 <bno055_getVector+0x7c>
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001598:	2b28      	cmp	r3, #40	@ 0x28
 800159a:	d003      	beq.n	80015a4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800159c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015a2:	d109      	bne.n	80015b8 <bno055_getVector+0x90>
    scale = accelScale;
 80015a4:	4b7e      	ldr	r3, [pc, #504]	@ (80017a0 <bno055_getVector+0x278>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffb3 	bl	8000514 <__aeabi_ui2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80015b6:	e028      	b.n	800160a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80015b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015bc:	2b14      	cmp	r3, #20
 80015be:	d109      	bne.n	80015d4 <bno055_getVector+0xac>
    scale = angularRateScale;
 80015c0:	4b78      	ldr	r3, [pc, #480]	@ (80017a4 <bno055_getVector+0x27c>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffa5 	bl	8000514 <__aeabi_ui2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80015d2:	e01a      	b.n	800160a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d8:	2b1a      	cmp	r3, #26
 80015da:	d109      	bne.n	80015f0 <bno055_getVector+0xc8>
    scale = eulerScale;
 80015dc:	4b72      	ldr	r3, [pc, #456]	@ (80017a8 <bno055_getVector+0x280>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff97 	bl	8000514 <__aeabi_ui2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80015ee:	e00c      	b.n	800160a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d108      	bne.n	800160a <bno055_getVector+0xe2>
    scale = quaScale;
 80015f8:	4b6c      	ldr	r3, [pc, #432]	@ (80017ac <bno055_getVector+0x284>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff89 	bl	8000514 <__aeabi_ui2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2220      	movs	r2, #32
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f009 fb54 	bl	800acc0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800161c:	2b20      	cmp	r3, #32
 800161e:	d150      	bne.n	80016c2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001620:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff7e 	bl	8000534 <__aeabi_i2d>
 8001638:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800163c:	f7ff f90e 	bl	800085c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001648:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff6a 	bl	8000534 <__aeabi_i2d>
 8001660:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001664:	f7ff f8fa 	bl	800085c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001670:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21b      	sxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800168c:	f7ff f8e6 	bl	800085c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001698:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff42 	bl	8000534 <__aeabi_i2d>
 80016b0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016b4:	f7ff f8d2 	bl	800085c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80016c0:	e03b      	b.n	800173a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80016c2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff2d 	bl	8000534 <__aeabi_i2d>
 80016da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016de:	f7ff f8bd 	bl	800085c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80016ea:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff19 	bl	8000534 <__aeabi_i2d>
 8001702:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001706:	f7ff f8a9 	bl	800085c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001712:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21b      	sxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff05 	bl	8000534 <__aeabi_i2d>
 800172a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800172e:	f7ff f895 	bl	800085c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800173a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800173e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800174a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800174e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001752:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001756:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800175a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800175e:	ec49 8b14 	vmov	d4, r8, r9
 8001762:	ec45 4b15 	vmov	d5, r4, r5
 8001766:	ec41 0b16 	vmov	d6, r0, r1
 800176a:	ec43 2b17 	vmov	d7, r2, r3
}
 800176e:	eeb0 0a44 	vmov.f32	s0, s8
 8001772:	eef0 0a64 	vmov.f32	s1, s9
 8001776:	eeb0 1a45 	vmov.f32	s2, s10
 800177a:	eef0 1a65 	vmov.f32	s3, s11
 800177e:	eeb0 2a46 	vmov.f32	s4, s12
 8001782:	eef0 2a66 	vmov.f32	s5, s13
 8001786:	eeb0 3a47 	vmov.f32	s6, s14
 800178a:	eef0 3a67 	vmov.f32	s7, s15
 800178e:	3778      	adds	r7, #120	@ 0x78
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001796:	bf00      	nop
 8001798:	3ff00000 	.word	0x3ff00000
 800179c:	20000006 	.word	0x20000006
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000002 	.word	0x20000002
 80017a8:	20000004 	.word	0x20000004
 80017ac:	20000008 	.word	0x20000008

080017b0 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 80017b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017b4:	b090      	sub	sp, #64	@ 0x40
 80017b6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80017b8:	2008      	movs	r0, #8
 80017ba:	f7ff feb5 	bl	8001528 <bno055_getVector>
 80017be:	eeb0 4a40 	vmov.f32	s8, s0
 80017c2:	eef0 4a60 	vmov.f32	s9, s1
 80017c6:	eeb0 5a41 	vmov.f32	s10, s2
 80017ca:	eef0 5a61 	vmov.f32	s11, s3
 80017ce:	eeb0 6a42 	vmov.f32	s12, s4
 80017d2:	eef0 6a62 	vmov.f32	s13, s5
 80017d6:	eeb0 7a43 	vmov.f32	s14, s6
 80017da:	eef0 7a63 	vmov.f32	s15, s7
 80017de:	ed87 4b08 	vstr	d4, [r7, #32]
 80017e2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80017e6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80017ea:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80017ee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017f2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80017f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017fe:	ec49 8b14 	vmov	d4, r8, r9
 8001802:	ec45 4b15 	vmov	d5, r4, r5
 8001806:	ec41 0b16 	vmov	d6, r0, r1
 800180a:	ec43 2b17 	vmov	d7, r2, r3
}
 800180e:	eeb0 0a44 	vmov.f32	s0, s8
 8001812:	eef0 0a64 	vmov.f32	s1, s9
 8001816:	eeb0 1a45 	vmov.f32	s2, s10
 800181a:	eef0 1a65 	vmov.f32	s3, s11
 800181e:	eeb0 2a46 	vmov.f32	s4, s12
 8001822:	eef0 2a66 	vmov.f32	s5, s13
 8001826:	eeb0 3a47 	vmov.f32	s6, s14
 800182a:	eef0 3a67 	vmov.f32	s7, s15
 800182e:	3740      	adds	r7, #64	@ 0x40
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001836 <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8001836:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800183a:	b090      	sub	sp, #64	@ 0x40
 800183c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 800183e:	200e      	movs	r0, #14
 8001840:	f7ff fe72 	bl	8001528 <bno055_getVector>
 8001844:	eeb0 4a40 	vmov.f32	s8, s0
 8001848:	eef0 4a60 	vmov.f32	s9, s1
 800184c:	eeb0 5a41 	vmov.f32	s10, s2
 8001850:	eef0 5a61 	vmov.f32	s11, s3
 8001854:	eeb0 6a42 	vmov.f32	s12, s4
 8001858:	eef0 6a62 	vmov.f32	s13, s5
 800185c:	eeb0 7a43 	vmov.f32	s14, s6
 8001860:	eef0 7a63 	vmov.f32	s15, s7
 8001864:	ed87 4b08 	vstr	d4, [r7, #32]
 8001868:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800186c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001870:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001878:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800187c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001884:	ec49 8b14 	vmov	d4, r8, r9
 8001888:	ec45 4b15 	vmov	d5, r4, r5
 800188c:	ec41 0b16 	vmov	d6, r0, r1
 8001890:	ec43 2b17 	vmov	d7, r2, r3
}
 8001894:	eeb0 0a44 	vmov.f32	s0, s8
 8001898:	eef0 0a64 	vmov.f32	s1, s9
 800189c:	eeb0 1a45 	vmov.f32	s2, s10
 80018a0:	eef0 1a65 	vmov.f32	s3, s11
 80018a4:	eeb0 2a46 	vmov.f32	s4, s12
 80018a8:	eef0 2a66 	vmov.f32	s5, s13
 80018ac:	eeb0 3a47 	vmov.f32	s6, s14
 80018b0:	eef0 3a67 	vmov.f32	s7, s15
 80018b4:	3740      	adds	r7, #64	@ 0x40
 80018b6:	46bd      	mov	sp, r7
 80018b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018bc <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 80018bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c0:	b090      	sub	sp, #64	@ 0x40
 80018c2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80018c4:	2014      	movs	r0, #20
 80018c6:	f7ff fe2f 	bl	8001528 <bno055_getVector>
 80018ca:	eeb0 4a40 	vmov.f32	s8, s0
 80018ce:	eef0 4a60 	vmov.f32	s9, s1
 80018d2:	eeb0 5a41 	vmov.f32	s10, s2
 80018d6:	eef0 5a61 	vmov.f32	s11, s3
 80018da:	eeb0 6a42 	vmov.f32	s12, s4
 80018de:	eef0 6a62 	vmov.f32	s13, s5
 80018e2:	eeb0 7a43 	vmov.f32	s14, s6
 80018e6:	eef0 7a63 	vmov.f32	s15, s7
 80018ea:	ed87 4b08 	vstr	d4, [r7, #32]
 80018ee:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80018f2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80018f6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80018fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001902:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001906:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800190a:	ec49 8b14 	vmov	d4, r8, r9
 800190e:	ec45 4b15 	vmov	d5, r4, r5
 8001912:	ec41 0b16 	vmov	d6, r0, r1
 8001916:	ec43 2b17 	vmov	d7, r2, r3
}
 800191a:	eeb0 0a44 	vmov.f32	s0, s8
 800191e:	eef0 0a64 	vmov.f32	s1, s9
 8001922:	eeb0 1a45 	vmov.f32	s2, s10
 8001926:	eef0 1a65 	vmov.f32	s3, s11
 800192a:	eeb0 2a46 	vmov.f32	s4, s12
 800192e:	eef0 2a66 	vmov.f32	s5, s13
 8001932:	eeb0 3a47 	vmov.f32	s6, s14
 8001936:	eef0 3a67 	vmov.f32	s7, s15
 800193a:	3740      	adds	r7, #64	@ 0x40
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001942 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001942:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001946:	b090      	sub	sp, #64	@ 0x40
 8001948:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800194a:	2020      	movs	r0, #32
 800194c:	f7ff fdec 	bl	8001528 <bno055_getVector>
 8001950:	eeb0 4a40 	vmov.f32	s8, s0
 8001954:	eef0 4a60 	vmov.f32	s9, s1
 8001958:	eeb0 5a41 	vmov.f32	s10, s2
 800195c:	eef0 5a61 	vmov.f32	s11, s3
 8001960:	eeb0 6a42 	vmov.f32	s12, s4
 8001964:	eef0 6a62 	vmov.f32	s13, s5
 8001968:	eeb0 7a43 	vmov.f32	s14, s6
 800196c:	eef0 7a63 	vmov.f32	s15, s7
 8001970:	ed87 4b08 	vstr	d4, [r7, #32]
 8001974:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001978:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800197c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001988:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800198c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001990:	ec49 8b14 	vmov	d4, r8, r9
 8001994:	ec45 4b15 	vmov	d5, r4, r5
 8001998:	ec41 0b16 	vmov	d6, r0, r1
 800199c:	ec43 2b17 	vmov	d7, r2, r3
}
 80019a0:	eeb0 0a44 	vmov.f32	s0, s8
 80019a4:	eef0 0a64 	vmov.f32	s1, s9
 80019a8:	eeb0 1a45 	vmov.f32	s2, s10
 80019ac:	eef0 1a65 	vmov.f32	s3, s11
 80019b0:	eeb0 2a46 	vmov.f32	s4, s12
 80019b4:	eef0 2a66 	vmov.f32	s5, s13
 80019b8:	eeb0 3a47 	vmov.f32	s6, s14
 80019bc:	eef0 3a67 	vmov.f32	s7, s15
 80019c0:	3740      	adds	r7, #64	@ 0x40
 80019c2:	46bd      	mov	sp, r7
 80019c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019c8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <bno055_assignI2C+0x1c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000204 	.word	0x20000204

080019e8 <bno055_delay>:

void bno055_delay(int time) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 f840 	bl	8003a78 <HAL_Delay>
#endif
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	733b      	strb	r3, [r7, #12]
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001a18:	4b5a      	ldr	r3, [pc, #360]	@ (8001b84 <bno055_writeData+0x184>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	230a      	movs	r3, #10
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2302      	movs	r3, #2
 8001a26:	2150      	movs	r1, #80	@ 0x50
 8001a28:	f003 fb06 	bl	8005038 <HAL_I2C_Master_Transmit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80a0 	beq.w	8001b78 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d103      	bne.n	8001a46 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001a3e:	4852      	ldr	r0, [pc, #328]	@ (8001b88 <bno055_writeData+0x188>)
 8001a40:	f009 f83e 	bl	800aac0 <puts>
 8001a44:	e012      	b.n	8001a6c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d103      	bne.n	8001a54 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001a4c:	484f      	ldr	r0, [pc, #316]	@ (8001b8c <bno055_writeData+0x18c>)
 8001a4e:	f009 f837 	bl	800aac0 <puts>
 8001a52:	e00b      	b.n	8001a6c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d103      	bne.n	8001a62 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001a5a:	484d      	ldr	r0, [pc, #308]	@ (8001b90 <bno055_writeData+0x190>)
 8001a5c:	f009 f830 	bl	800aac0 <puts>
 8001a60:	e004      	b.n	8001a6c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	4619      	mov	r1, r3
 8001a66:	484b      	ldr	r0, [pc, #300]	@ (8001b94 <bno055_writeData+0x194>)
 8001a68:	f008 ffc2 	bl	800a9f0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001a6c:	4b45      	ldr	r3, [pc, #276]	@ (8001b84 <bno055_writeData+0x184>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fe13 	bl	800569c <HAL_I2C_GetError>
 8001a76:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d07e      	beq.n	8001b7c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d103      	bne.n	8001a8c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001a84:	4844      	ldr	r0, [pc, #272]	@ (8001b98 <bno055_writeData+0x198>)
 8001a86:	f009 f81b 	bl	800aac0 <puts>
 8001a8a:	e021      	b.n	8001ad0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d103      	bne.n	8001a9a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001a92:	4842      	ldr	r0, [pc, #264]	@ (8001b9c <bno055_writeData+0x19c>)
 8001a94:	f009 f814 	bl	800aac0 <puts>
 8001a98:	e01a      	b.n	8001ad0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d103      	bne.n	8001aa8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001aa0:	483f      	ldr	r0, [pc, #252]	@ (8001ba0 <bno055_writeData+0x1a0>)
 8001aa2:	f009 f80d 	bl	800aac0 <puts>
 8001aa6:	e013      	b.n	8001ad0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d103      	bne.n	8001ab6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001aae:	483d      	ldr	r0, [pc, #244]	@ (8001ba4 <bno055_writeData+0x1a4>)
 8001ab0:	f009 f806 	bl	800aac0 <puts>
 8001ab4:	e00c      	b.n	8001ad0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d103      	bne.n	8001ac4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001abc:	483a      	ldr	r0, [pc, #232]	@ (8001ba8 <bno055_writeData+0x1a8>)
 8001abe:	f008 ffff 	bl	800aac0 <puts>
 8001ac2:	e005      	b.n	8001ad0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d102      	bne.n	8001ad0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001aca:	4838      	ldr	r0, [pc, #224]	@ (8001bac <bno055_writeData+0x1ac>)
 8001acc:	f008 fff8 	bl	800aac0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <bno055_writeData+0x184>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fdd3 	bl	8005680 <HAL_I2C_GetState>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ae4:	4832      	ldr	r0, [pc, #200]	@ (8001bb0 <bno055_writeData+0x1b0>)
 8001ae6:	f008 ffeb 	bl	800aac0 <puts>
 8001aea:	e048      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d103      	bne.n	8001afa <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001af2:	482f      	ldr	r0, [pc, #188]	@ (8001bb0 <bno055_writeData+0x1b0>)
 8001af4:	f008 ffe4 	bl	800aac0 <puts>
 8001af8:	e041      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b24      	cmp	r3, #36	@ 0x24
 8001afe:	d103      	bne.n	8001b08 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001b00:	482c      	ldr	r0, [pc, #176]	@ (8001bb4 <bno055_writeData+0x1b4>)
 8001b02:	f008 ffdd 	bl	800aac0 <puts>
 8001b06:	e03a      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b21      	cmp	r3, #33	@ 0x21
 8001b0c:	d103      	bne.n	8001b16 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001b0e:	482a      	ldr	r0, [pc, #168]	@ (8001bb8 <bno055_writeData+0x1b8>)
 8001b10:	f008 ffd6 	bl	800aac0 <puts>
 8001b14:	e033      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b22      	cmp	r3, #34	@ 0x22
 8001b1a:	d103      	bne.n	8001b24 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001b1c:	4827      	ldr	r0, [pc, #156]	@ (8001bbc <bno055_writeData+0x1bc>)
 8001b1e:	f008 ffcf 	bl	800aac0 <puts>
 8001b22:	e02c      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b28      	cmp	r3, #40	@ 0x28
 8001b28:	d103      	bne.n	8001b32 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001b2a:	4825      	ldr	r0, [pc, #148]	@ (8001bc0 <bno055_writeData+0x1c0>)
 8001b2c:	f008 ffc8 	bl	800aac0 <puts>
 8001b30:	e025      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b29      	cmp	r3, #41	@ 0x29
 8001b36:	d103      	bne.n	8001b40 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001b38:	4822      	ldr	r0, [pc, #136]	@ (8001bc4 <bno055_writeData+0x1c4>)
 8001b3a:	f008 ffc1 	bl	800aac0 <puts>
 8001b3e:	e01e      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b44:	d103      	bne.n	8001b4e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001b46:	4820      	ldr	r0, [pc, #128]	@ (8001bc8 <bno055_writeData+0x1c8>)
 8001b48:	f008 ffba 	bl	800aac0 <puts>
 8001b4c:	e017      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b60      	cmp	r3, #96	@ 0x60
 8001b52:	d103      	bne.n	8001b5c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001b54:	481d      	ldr	r0, [pc, #116]	@ (8001bcc <bno055_writeData+0x1cc>)
 8001b56:	f008 ffb3 	bl	800aac0 <puts>
 8001b5a:	e010      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b60:	d103      	bne.n	8001b6a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001b62:	481b      	ldr	r0, [pc, #108]	@ (8001bd0 <bno055_writeData+0x1d0>)
 8001b64:	f008 ffac 	bl	800aac0 <puts>
 8001b68:	e009      	b.n	8001b7e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2be0      	cmp	r3, #224	@ 0xe0
 8001b6e:	d106      	bne.n	8001b7e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001b70:	4818      	ldr	r0, [pc, #96]	@ (8001bd4 <bno055_writeData+0x1d4>)
 8001b72:	f008 ffa5 	bl	800aac0 <puts>
 8001b76:	e002      	b.n	8001b7e <bno055_writeData+0x17e>
    return;
 8001b78:	bf00      	nop
 8001b7a:	e000      	b.n	8001b7e <bno055_writeData+0x17e>
    return;
 8001b7c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000204 	.word	0x20000204
 8001b88:	0800d710 	.word	0x0800d710
 8001b8c:	0800d734 	.word	0x0800d734
 8001b90:	0800d75c 	.word	0x0800d75c
 8001b94:	0800d780 	.word	0x0800d780
 8001b98:	0800d798 	.word	0x0800d798
 8001b9c:	0800d7ac 	.word	0x0800d7ac
 8001ba0:	0800d7c0 	.word	0x0800d7c0
 8001ba4:	0800d7d4 	.word	0x0800d7d4
 8001ba8:	0800d7e8 	.word	0x0800d7e8
 8001bac:	0800d7fc 	.word	0x0800d7fc
 8001bb0:	0800d814 	.word	0x0800d814
 8001bb4:	0800d82c 	.word	0x0800d82c
 8001bb8:	0800d840 	.word	0x0800d840
 8001bbc:	0800d858 	.word	0x0800d858
 8001bc0:	0800d870 	.word	0x0800d870
 8001bc4:	0800d888 	.word	0x0800d888
 8001bc8:	0800d8a8 	.word	0x0800d8a8
 8001bcc:	0800d8c8 	.word	0x0800d8c8
 8001bd0:	0800d8e0 	.word	0x0800d8e0
 8001bd4:	0800d8f8 	.word	0x0800d8f8

08001bd8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <bno055_readData+0x40>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	1dfa      	adds	r2, r7, #7
 8001bee:	2364      	movs	r3, #100	@ 0x64
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	2150      	movs	r1, #80	@ 0x50
 8001bf6:	f003 fa1f 	bl	8005038 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <bno055_readData+0x40>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2264      	movs	r2, #100	@ 0x64
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	2150      	movs	r1, #80	@ 0x50
 8001c0a:	f003 fb13 	bl	8005234 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000204 	.word	0x20000204
 8001c1c:	00000000 	.word	0x00000000

08001c20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c24:	b08d      	sub	sp, #52	@ 0x34
 8001c26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c28:	f001 feb4 	bl	8003994 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c2c:	f000 fb70 	bl	8002310 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c30:	f000 fe36 	bl	80028a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c34:	f000 fe14 	bl	8002860 <MX_DMA_Init>
	MX_I2C1_Init();
 8001c38:	f000 fc28 	bl	800248c <MX_I2C1_Init>
	MX_TIM1_Init();
 8001c3c:	f000 fc54 	bl	80024e8 <MX_TIM1_Init>
	MX_TIM10_Init();
 8001c40:	f000 fd48 	bl	80026d4 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001c44:	f000 fd94 	bl	8002770 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001c48:	f000 fdb6 	bl	80027b8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001c4c:	f000 fcee 	bl	800262c <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8001c50:	f000 fddc 	bl	800280c <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001c54:	f000 fbc8 	bl	80023e8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	//RESET BNO055
	resetBNO055();
 8001c58:	f001 fa2a 	bl	80030b0 <resetBNO055>
	printf("BNO055 Resetted!\r\n");
 8001c5c:	48b0      	ldr	r0, [pc, #704]	@ (8001f20 <main+0x300>)
 8001c5e:	f008 ff2f 	bl	800aac0 <puts>

	printf("Starting BNO055!\r\n");
 8001c62:	48b0      	ldr	r0, [pc, #704]	@ (8001f24 <main+0x304>)
 8001c64:	f008 ff2c 	bl	800aac0 <puts>
	bno055_assignI2C(&hi2c1);
 8001c68:	48af      	ldr	r0, [pc, #700]	@ (8001f28 <main+0x308>)
 8001c6a:	f7ff fead 	bl	80019c8 <bno055_assignI2C>
	bno055_setup();
 8001c6e:	f7ff fc21 	bl	80014b4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001c72:	f7ff fc0c 	bl	800148e <bno055_setOperationModeNDOF>
	printf("BNO055 System Status: %i\r\n", bno055_getSystemStatus());
 8001c76:	f7ff fc45 	bl	8001504 <bno055_getSystemStatus>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	48ab      	ldr	r0, [pc, #684]	@ (8001f2c <main+0x30c>)
 8001c80:	f008 feb6 	bl	800a9f0 <iprintf>
	printf("BNO055 Initialization Completed!\r\n");
 8001c84:	48aa      	ldr	r0, [pc, #680]	@ (8001f30 <main+0x310>)
 8001c86:	f008 ff1b 	bl	800aac0 <puts>


	//attivo DMA per ricezione dati seriale
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8001c8a:	2232      	movs	r2, #50	@ 0x32
 8001c8c:	49a9      	ldr	r1, [pc, #676]	@ (8001f34 <main+0x314>)
 8001c8e:	48aa      	ldr	r0, [pc, #680]	@ (8001f38 <main+0x318>)
 8001c90:	f005 feff 	bl	8007a92 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001c94:	4ba9      	ldr	r3, [pc, #676]	@ (8001f3c <main+0x31c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4ba8      	ldr	r3, [pc, #672]	@ (8001f3c <main+0x31c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0208 	bic.w	r2, r2, #8
 8001ca2:	601a      	str	r2, [r3, #0]
	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	48a6      	ldr	r0, [pc, #664]	@ (8001f40 <main+0x320>)
 8001ca8:	f004 fdd6 	bl	8006858 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001cac:	2100      	movs	r1, #0
 8001cae:	48a5      	ldr	r0, [pc, #660]	@ (8001f44 <main+0x324>)
 8001cb0:	f004 fdd2 	bl	8006858 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001cb4:	213c      	movs	r1, #60	@ 0x3c
 8001cb6:	48a4      	ldr	r0, [pc, #656]	@ (8001f48 <main+0x328>)
 8001cb8:	f004 ff24 	bl	8006b04 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 8001cbc:	48a3      	ldr	r0, [pc, #652]	@ (8001f4c <main+0x32c>)
 8001cbe:	f004 fd0f 	bl	80066e0 <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION, NEUTRAL_PWM);
 8001cc2:	eddf 1aa3 	vldr	s3, [pc, #652]	@ 8001f50 <main+0x330>
 8001cc6:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 8001f54 <main+0x334>
 8001cca:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8001f58 <main+0x338>
 8001cce:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8001f5c <main+0x33c>
 8001cd2:	48a3      	ldr	r0, [pc, #652]	@ (8001f60 <main+0x340>)
 8001cd4:	f7ff fa3a 	bl	800114c <init_PID>
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0, 0);
 8001cd8:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8001f50 <main+0x330>
 8001cdc:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8001f50 <main+0x330>
 8001ce0:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 8001f64 <main+0x344>
 8001ce4:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8001f68 <main+0x348>
 8001ce8:	489d      	ldr	r0, [pc, #628]	@ (8001f60 <main+0x340>)
 8001cea:	f7ff fa55 	bl	8001198 <tune_PID>

	//PID steering
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING, 0);
 8001cee:	eddf 1a98 	vldr	s3, [pc, #608]	@ 8001f50 <main+0x330>
 8001cf2:	eebb 1a07 	vmov.f32	s2, #183	@ 0xc1b80000 -23.0
 8001cf6:	eef3 0a07 	vmov.f32	s1, #55	@ 0x41b80000  23.0
 8001cfa:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8001f5c <main+0x33c>
 8001cfe:	489b      	ldr	r0, [pc, #620]	@ (8001f6c <main+0x34c>)
 8001d00:	f7ff fa24 	bl	800114c <init_PID>
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0, 50);
 8001d04:	eddf 1a9a 	vldr	s3, [pc, #616]	@ 8001f70 <main+0x350>
 8001d08:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8001f50 <main+0x330>
 8001d0c:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8001f74 <main+0x354>
 8001d10:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001d14:	4895      	ldr	r0, [pc, #596]	@ (8001f6c <main+0x34c>)
 8001d16:	f7ff fa3f 	bl	8001198 <tune_PID>

	printf("Initialization Completed!\r\n");
 8001d1a:	4897      	ldr	r0, [pc, #604]	@ (8001f78 <main+0x358>)
 8001d1c:	f008 fed0 	bl	800aac0 <puts>

	//Traction Motor Neutral
	set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001d20:	4b96      	ldr	r3, [pc, #600]	@ (8001f7c <main+0x35c>)
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	4619      	mov	r1, r3
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff f9d7 	bl	80010dc <set_PWM_and_dir>
	//Servo Neutral Position
	servo_motor(0);
 8001d2e:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8001f50 <main+0x330>
 8001d32:	f001 f9dd 	bl	80030f0 <servo_motor>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		max_flag_button = 1;
 8001d36:	4b92      	ldr	r3, [pc, #584]	@ (8001f80 <main+0x360>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
		switch(flag_button){
 8001d3c:	4b91      	ldr	r3, [pc, #580]	@ (8001f84 <main+0x364>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d013      	beq.n	8001d6c <main+0x14c>
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	dc1a      	bgt.n	8001d7e <main+0x15e>
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d002      	beq.n	8001d54 <main+0x134>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <main+0x13a>
 8001d52:	e014      	b.n	8001d7e <main+0x15e>
		//Calibrazione
		case -1:
			//if(dataRX.enable == 0)
			ProceduraCalibrazione();
 8001d54:	f001 f8f8 	bl	8002f48 <ProceduraCalibrazione>
			break;
 8001d58:	e011      	b.n	8001d7e <main+0x15e>
			//Idle
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	488a      	ldr	r0, [pc, #552]	@ (8001f88 <main+0x368>)
 8001d60:	f002 ffda 	bl	8004d18 <HAL_GPIO_WritePin>
			HardwareEnable = 0;
 8001d64:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <main+0x36c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
			break;
 8001d6a:	e008      	b.n	8001d7e <main+0x15e>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2120      	movs	r1, #32
 8001d70:	4885      	ldr	r0, [pc, #532]	@ (8001f88 <main+0x368>)
 8001d72:	f002 ffd1 	bl	8004d18 <HAL_GPIO_WritePin>
			HardwareEnable = 1;
 8001d76:	4b85      	ldr	r3, [pc, #532]	@ (8001f8c <main+0x36c>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
			break;
 8001d7c:	bf00      	nop
		}

		//-------------------------------------------------------------
		//Controllo
		if(bno055_getSystemStatus() != 5)
 8001d7e:	f7ff fbc1 	bl	8001504 <bno055_getSystemStatus>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d001      	beq.n	8001d8c <main+0x16c>
			HAL_NVIC_SystemReset();
 8001d88:	f002 fa17 	bl	80041ba <HAL_NVIC_SystemReset>

		if (HardwareEnable == 1 && dataRX.enable == 1) {
 8001d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f8c <main+0x36c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f040 828f 	bne.w	80022b4 <main+0x694>
 8001d96:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <main+0x370>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	f040 828a 	bne.w	80022b4 <main+0x694>
			if (Flag_10ms == 1) {
 8001da0:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <main+0x374>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f040 82a1 	bne.w	80022ec <main+0x6cc>
				Flag_10ms = 0;
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <main+0x374>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
				//-------------------------------------------------------------

				//TRACTION control

				//Measure speed with encoder
				vehicleState.ref_count = TIM2->ARR / 2;
 8001db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b70      	ldr	r3, [pc, #448]	@ (8001f7c <main+0x35c>)
 8001dbc:	605a      	str	r2, [r3, #4]
				vehicleState.delta_count = vehicleState.counts - vehicleState.ref_count;
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <main+0x35c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <main+0x35c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a6c      	ldr	r2, [pc, #432]	@ (8001f7c <main+0x35c>)
 8001dca:	6093      	str	r3, [r2, #8]

				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360) / ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO));
 8001dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8001f7c <main+0x35c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbab 	bl	8000534 <__aeabi_i2d>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f98 <main+0x378>)
 8001de4:	f7fe fd3a 	bl	800085c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe ff02 	bl	8000bf8 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a61      	ldr	r2, [pc, #388]	@ (8001f7c <main+0x35c>)
 8001df8:	60d3      	str	r3, [r2, #12]
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg / ENCODER_SAMPLING_TIME;
 8001dfa:	4b60      	ldr	r3, [pc, #384]	@ (8001f7c <main+0x35c>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbaa 	bl	8000558 <__aeabi_f2d>
 8001e04:	a344      	add	r3, pc, #272	@ (adr r3, 8001f18 <main+0x2f8>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fd27 	bl	800085c <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <main+0x35c>)
 8001e1e:	6113      	str	r3, [r2, #16]
				tempRPM = DegreeSec2RPM(vehicleState.motor_speed_deg_sec);
 8001e20:	4b56      	ldr	r3, [pc, #344]	@ (8001f7c <main+0x35c>)
 8001e22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	f7ff f901 	bl	8001030 <DegreeSec2RPM>
 8001e2e:	eef0 7a40 	vmov.f32	s15, s0
 8001e32:	4b5a      	ldr	r3, [pc, #360]	@ (8001f9c <main+0x37c>)
 8001e34:	edc3 7a00 	vstr	s15, [r3]

				//Filtraggio della velocità
				ArrayRPM[PtrRPM] = tempRPM;
 8001e38:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <main+0x380>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	@ (8001f9c <main+0x37c>)
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	4958      	ldr	r1, [pc, #352]	@ (8001fa4 <main+0x384>)
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	601a      	str	r2, [r3, #0]
				MeanRPM = 0;
 8001e48:	4b57      	ldr	r3, [pc, #348]	@ (8001fa8 <main+0x388>)
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_RPM_VALUES; i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e54:	e010      	b.n	8001e78 <main+0x258>
					MeanRPM += ArrayRPM[i];
 8001e56:	4a53      	ldr	r2, [pc, #332]	@ (8001fa4 <main+0x384>)
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <main+0x388>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa8 <main+0x388>)
 8001e6e:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i < MAX_RPM_VALUES; i++){
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	3301      	adds	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7a:	2b09      	cmp	r3, #9
 8001e7c:	ddeb      	ble.n	8001e56 <main+0x236>
				}
				MeanRPM /= MAX_RPM_VALUES;
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa8 <main+0x388>)
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8c:	4b46      	ldr	r3, [pc, #280]	@ (8001fa8 <main+0x388>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]

				if(PtrRPM == MAX_RPM_VALUES-1)
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <main+0x380>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d103      	bne.n	8001ea2 <main+0x282>
					PtrRPM = 0;
 8001e9a:	4b41      	ldr	r3, [pc, #260]	@ (8001fa0 <main+0x380>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e004      	b.n	8001eac <main+0x28c>
				else
					PtrRPM++;
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <main+0x380>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8001fa0 <main+0x380>)
 8001eaa:	6013      	str	r3, [r2, #0]
				vehicleState.motor_speed_RPM = MeanRPM;
 8001eac:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa8 <main+0x388>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a32      	ldr	r2, [pc, #200]	@ (8001f7c <main+0x35c>)
 8001eb2:	6153      	str	r3, [r2, #20]

				//Speed reference for motor
				vehicleState.motor_speed_ref_RPM = dataRX.linear_speed_ref_m_s / RPM_2_m_s;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <main+0x370>)
 8001eb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001eba:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <main+0x38c>)
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <main+0x35c>)
 8001ec6:	edc3 7a07 	vstr	s15, [r3, #28]

				u_trazione = PID_controller(&pid_traction, vehicleState.motor_speed_RPM, vehicleState.motor_speed_ref_RPM);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <main+0x35c>)
 8001ecc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <main+0x35c>)
 8001ed2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ed6:	eef0 0a47 	vmov.f32	s1, s14
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	4820      	ldr	r0, [pc, #128]	@ (8001f60 <main+0x340>)
 8001ee0:	f7ff f98a 	bl	80011f8 <PID_controller>
 8001ee4:	ee10 3a10 	vmov	r3, s0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb35 	bl	8000558 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	492f      	ldr	r1, [pc, #188]	@ (8001fb0 <main+0x390>)
 8001ef4:	e9c1 2300 	strd	r2, r3, [r1]

				//Assegno il duty al motore
				if (vehicleState.motor_speed_ref_RPM == 0)
 8001ef8:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <main+0x35c>)
 8001efa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d155      	bne.n	8001fb4 <main+0x394>
					set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <main+0x35c>)
 8001f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff f8e3 	bl	80010dc <set_PWM_and_dir>
 8001f16:	e065      	b.n	8001fe4 <main+0x3c4>
 8001f18:	47ae147b 	.word	0x47ae147b
 8001f1c:	3f847ae1 	.word	0x3f847ae1
 8001f20:	0800d910 	.word	0x0800d910
 8001f24:	0800d924 	.word	0x0800d924
 8001f28:	20000250 	.word	0x20000250
 8001f2c:	0800d938 	.word	0x0800d938
 8001f30:	0800d954 	.word	0x0800d954
 8001f34:	2000064c 	.word	0x2000064c
 8001f38:	20000408 	.word	0x20000408
 8001f3c:	2000044c 	.word	0x2000044c
 8001f40:	200002a4 	.word	0x200002a4
 8001f44:	20000334 	.word	0x20000334
 8001f48:	200002ec 	.word	0x200002ec
 8001f4c:	2000037c 	.word	0x2000037c
 8001f50:	00000000 	.word	0x00000000
 8001f54:	c0266666 	.word	0xc0266666
 8001f58:	40266666 	.word	0x40266666
 8001f5c:	3c23d70a 	.word	0x3c23d70a
 8001f60:	20000540 	.word	0x20000540
 8001f64:	3b9374bc 	.word	0x3b9374bc
 8001f68:	3a902de0 	.word	0x3a902de0
 8001f6c:	200005b8 	.word	0x200005b8
 8001f70:	42480000 	.word	0x42480000
 8001f74:	437a0000 	.word	0x437a0000
 8001f78:	0800d978 	.word	0x0800d978
 8001f7c:	20000500 	.word	0x20000500
 8001f80:	2000060c 	.word	0x2000060c
 8001f84:	200005f8 	.word	0x200005f8
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	200005f4 	.word	0x200005f4
 8001f90:	200004ac 	.word	0x200004ac
 8001f94:	200005f0 	.word	0x200005f0
 8001f98:	40c00000 	.word	0x40c00000
 8001f9c:	20000618 	.word	0x20000618
 8001fa0:	2000061c 	.word	0x2000061c
 8001fa4:	20000624 	.word	0x20000624
 8001fa8:	20000620 	.word	0x20000620
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	200005e0 	.word	0x200005e0
				else
					set_PWM_and_dir((uint32_t) Voltage2Duty(u_trazione), vehicleState.motor_direction_ref);
 8001fb4:	4bb6      	ldr	r3, [pc, #728]	@ (8002290 <main+0x670>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fe1b 	bl	8000bf8 <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	ee00 3a10 	vmov	s0, r3
 8001fc8:	f7ff f852 	bl	8001070 <Voltage2Duty>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd4:	4baf      	ldr	r3, [pc, #700]	@ (8002294 <main+0x674>)
 8001fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	ee17 0a90 	vmov	r0, s15
 8001fe0:	f7ff f87c 	bl	80010dc <set_PWM_and_dir>
				//-------------------------------------------------------------

				//STEERING control

				//Get yawrate from IMU
				bno055_vector_t v = bno055_getVectorGyroscope();
 8001fe4:	f7ff fc6a 	bl	80018bc <bno055_getVectorGyroscope>
 8001fe8:	eeb0 4a40 	vmov.f32	s8, s0
 8001fec:	eef0 4a60 	vmov.f32	s9, s1
 8001ff0:	eeb0 5a41 	vmov.f32	s10, s2
 8001ff4:	eef0 5a61 	vmov.f32	s11, s3
 8001ff8:	eeb0 6a42 	vmov.f32	s12, s4
 8001ffc:	eef0 6a62 	vmov.f32	s13, s5
 8002000:	eeb0 7a43 	vmov.f32	s14, s6
 8002004:	eef0 7a63 	vmov.f32	s15, s7
 8002008:	ed87 4b00 	vstr	d4, [r7]
 800200c:	ed87 5b02 	vstr	d5, [r7, #8]
 8002010:	ed87 6b04 	vstr	d6, [r7, #16]
 8002014:	ed87 7b06 	vstr	d7, [r7, #24]
				vehicleState.yaw_rate_deg_sec = v.z;
 8002018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800201c:	499d      	ldr	r1, [pc, #628]	@ (8002294 <main+0x674>)
 800201e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec * M_PI) / 180;
 8002022:	4b9c      	ldr	r3, [pc, #624]	@ (8002294 <main+0x674>)
 8002024:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002028:	a397      	add	r3, pc, #604	@ (adr r3, 8002288 <main+0x668>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe faeb 	bl	8000608 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b96      	ldr	r3, [pc, #600]	@ (8002298 <main+0x678>)
 8002040:	f7fe fc0c 	bl	800085c <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4992      	ldr	r1, [pc, #584]	@ (8002294 <main+0x674>)
 800204a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				last_read = dataRX.curvature_radius_ref_m;
 800204e:	4b93      	ldr	r3, [pc, #588]	@ (800229c <main+0x67c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a93      	ldr	r2, [pc, #588]	@ (80022a0 <main+0x680>)
 8002054:	6013      	str	r3, [r2, #0]

				if (dataRX.curvature_radius_ref_m >= MAX_CURVATURE_RADIUS_FOR_STRAIGHT) {
 8002056:	4b91      	ldr	r3, [pc, #580]	@ (800229c <main+0x67c>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	db38      	blt.n	80020dc <main+0x4bc>

					vehicleState.yaw_rate_ref_rad_sec = 0;
 800206a:	498a      	ldr	r1, [pc, #552]	@ (8002294 <main+0x674>)
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

					u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec);
 8002078:	4b86      	ldr	r3, [pc, #536]	@ (8002294 <main+0x674>)
 800207a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fdb9 	bl	8000bf8 <__aeabi_d2f>
 8002086:	4606      	mov	r6, r0
 8002088:	4b82      	ldr	r3, [pc, #520]	@ (8002294 <main+0x674>)
 800208a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fdb1 	bl	8000bf8 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	ee00 3a90 	vmov	s1, r3
 800209c:	ee00 6a10 	vmov	s0, r6
 80020a0:	4880      	ldr	r0, [pc, #512]	@ (80022a4 <main+0x684>)
 80020a2:	f7ff f8a9 	bl	80011f8 <PID_controller>
 80020a6:	ee10 3a10 	vmov	r3, s0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa54 	bl	8000558 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	497c      	ldr	r1, [pc, #496]	@ (80022a8 <main+0x688>)
 80020b6:	e9c1 2300 	strd	r2, r3, [r1]

					servo_motor(-u_sterzo); //Minus because yawrate and steering are opposite
 80020ba:	4b7b      	ldr	r3, [pc, #492]	@ (80022a8 <main+0x688>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd98 	bl	8000bf8 <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef1 7a67 	vneg.f32	s15, s15
 80020d2:	eeb0 0a67 	vmov.f32	s0, s15
 80020d6:	f001 f80b 	bl	80030f0 <servo_motor>
 80020da:	e0c8      	b.n	800226e <main+0x64e>
				} else {

					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM * RPM_2_m_s;
 80020dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002294 <main+0x674>)
 80020de:	ed93 7a05 	vldr	s14, [r3, #20]
 80020e2:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <main+0x68c>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	4b69      	ldr	r3, [pc, #420]	@ (8002294 <main+0x674>)
 80020ee:	edc3 7a06 	vstr	s15, [r3, #24]
					if (dataRX.curvature_radius_ref_m == 0)
 80020f2:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <main+0x67c>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d107      	bne.n	8002112 <main+0x4f2>
						vehicleState.yaw_rate_ref_rad_sec = 0;
 8002102:	4964      	ldr	r1, [pc, #400]	@ (8002294 <main+0x674>)
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8002110:	e010      	b.n	8002134 <main+0x514>
					else
						vehicleState.yaw_rate_ref_rad_sec = vehicleState.linear_speed_m_s / dataRX.curvature_radius_ref_m;
 8002112:	4b60      	ldr	r3, [pc, #384]	@ (8002294 <main+0x674>)
 8002114:	ed93 7a06 	vldr	s14, [r3, #24]
 8002118:	4b60      	ldr	r3, [pc, #384]	@ (800229c <main+0x67c>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002122:	ee16 0a90 	vmov	r0, s13
 8002126:	f7fe fa17 	bl	8000558 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4959      	ldr	r1, [pc, #356]	@ (8002294 <main+0x674>)
 8002130:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

					float yaw_rate_ref_rad_sec_abs = vehicleState.yaw_rate_ref_rad_sec;
 8002134:	4b57      	ldr	r3, [pc, #348]	@ (8002294 <main+0x674>)
 8002136:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd5b 	bl	8000bf8 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
					float yaw_rate_rad_sec_abs = vehicleState.yaw_rate_rad_sec;
 8002146:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <main+0x674>)
 8002148:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fd52 	bl	8000bf8 <__aeabi_d2f>
 8002154:	4603      	mov	r3, r0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
					if (vehicleState.yaw_rate_ref_rad_sec < 0)
 8002158:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <main+0x674>)
 800215a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	f7fe fcc1 	bl	8000aec <__aeabi_dcmplt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <main+0x56c>
						yaw_rate_ref_rad_sec_abs = -vehicleState.yaw_rate_ref_rad_sec;
 8002170:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <main+0x674>)
 8002172:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd3d 	bl	8000bf8 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef1 7a67 	vneg.f32	s15, s15
 8002188:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					if (vehicleState.yaw_rate_rad_sec < 0)
 800218c:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <main+0x674>)
 800218e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	f7fe fca7 	bl	8000aec <__aeabi_dcmplt>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <main+0x5a0>
						yaw_rate_rad_sec_abs = -vehicleState.yaw_rate_rad_sec;
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <main+0x674>)
 80021a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fd23 	bl	8000bf8 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef1 7a67 	vneg.f32	s15, s15
 80021bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

					u_sterzo = PID_controller(&pid_steering, yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs);
 80021c0:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 80021c4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80021c8:	4836      	ldr	r0, [pc, #216]	@ (80022a4 <main+0x684>)
 80021ca:	f7ff f815 	bl	80011f8 <PID_controller>
 80021ce:	ee10 3a10 	vmov	r3, s0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_f2d>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4932      	ldr	r1, [pc, #200]	@ (80022a8 <main+0x688>)
 80021de:	e9c1 2300 	strd	r2, r3, [r1]

					//Minus because yawrate and steering are opposite
					if (dataRX.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 80021e2:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <main+0x67c>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	db14      	blt.n	800221c <main+0x5fc>
 80021f2:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <main+0x688>)
 80021f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f7fe fc92 	bl	8000b28 <__aeabi_dcmpgt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <main+0x5fc>
						u_sterzo *= -1.0;
 800220a:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <main+0x688>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	4614      	mov	r4, r2
 8002212:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <main+0x688>)
 8002218:	e9c3 4500 	strd	r4, r5, [r3]
					if (dataRX.curvature_radius_ref_m < 0 && u_sterzo < 0)
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <main+0x67c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	d514      	bpl.n	8002256 <main+0x636>
 800222c:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <main+0x688>)
 800222e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f7fe fc57 	bl	8000aec <__aeabi_dcmplt>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <main+0x636>
						u_sterzo *= -1.0;
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <main+0x688>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	4690      	mov	r8, r2
 800224c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002250:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <main+0x688>)
 8002252:	e9c3 8900 	strd	r8, r9, [r3]

					servo_motor(u_sterzo);
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <main+0x688>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fcca 	bl	8000bf8 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	ee00 3a10 	vmov	s0, r3
 800226a:	f000 ff41 	bl	80030f0 <servo_motor>
				}
				dataTX.current_servo_angle_deg = u_sterzo;
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <main+0x688>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fcbe 	bl	8000bf8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <main+0x690>)
 8002280:	6053      	str	r3, [r2, #4]
			if (Flag_10ms == 1) {
 8002282:	e033      	b.n	80022ec <main+0x6cc>
 8002284:	f3af 8000 	nop.w
 8002288:	54442d18 	.word	0x54442d18
 800228c:	400921fb 	.word	0x400921fb
 8002290:	200005e0 	.word	0x200005e0
 8002294:	20000500 	.word	0x20000500
 8002298:	40668000 	.word	0x40668000
 800229c:	200004ac 	.word	0x200004ac
 80022a0:	200006b0 	.word	0x200006b0
 80022a4:	200005b8 	.word	0x200005b8
 80022a8:	200005e8 	.word	0x200005e8
 80022ac:	20000010 	.word	0x20000010
 80022b0:	200004bc 	.word	0x200004bc
			}
		} else {
			if(flag_button != -1){
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <main+0x6d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d016      	beq.n	80022ec <main+0x6cc>
				set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <main+0x6d8>)
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	4619      	mov	r1, r3
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7fe ff08 	bl	80010dc <set_PWM_and_dir>
				servo_motor(0);
 80022cc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80022fc <main+0x6dc>
 80022d0:	f000 ff0e 	bl	80030f0 <servo_motor>

				// Reset dei pid
				resetPID(&pid_steering);
 80022d4:	480a      	ldr	r0, [pc, #40]	@ (8002300 <main+0x6e0>)
 80022d6:	f7fe ff7d 	bl	80011d4 <resetPID>
				resetPID(&pid_traction);
 80022da:	480a      	ldr	r0, [pc, #40]	@ (8002304 <main+0x6e4>)
 80022dc:	f7fe ff7a 	bl	80011d4 <resetPID>
				resetPID(&pid_traction_RWD);
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <main+0x6e8>)
 80022e2:	f7fe ff77 	bl	80011d4 <resetPID>
				resetPID(&pid_traction_DESC);
 80022e6:	4809      	ldr	r0, [pc, #36]	@ (800230c <main+0x6ec>)
 80022e8:	f7fe ff74 	bl	80011d4 <resetPID>
			}
		}

		TransmitTelemetry();
 80022ec:	f000 fcf0 	bl	8002cd0 <TransmitTelemetry>
		max_flag_button = 1;
 80022f0:	e521      	b.n	8001d36 <main+0x116>
 80022f2:	bf00      	nop
 80022f4:	200005f8 	.word	0x200005f8
 80022f8:	20000500 	.word	0x20000500
 80022fc:	00000000 	.word	0x00000000
 8002300:	200005b8 	.word	0x200005b8
 8002304:	20000540 	.word	0x20000540
 8002308:	20000568 	.word	0x20000568
 800230c:	20000590 	.word	0x20000590

08002310 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b094      	sub	sp, #80	@ 0x50
 8002314:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2230      	movs	r2, #48	@ 0x30
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fcce 	bl	800acc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <SystemClock_Config+0xd0>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <SystemClock_Config+0xd0>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	@ 0x40
 8002344:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <SystemClock_Config+0xd0>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <SystemClock_Config+0xd4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800235c:	4a21      	ldr	r2, [pc, #132]	@ (80023e4 <SystemClock_Config+0xd4>)
 800235e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <SystemClock_Config+0xd4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002370:	2302      	movs	r3, #2
 8002372:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002374:	2301      	movs	r3, #1
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002378:	2310      	movs	r3, #16
 800237a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237c:	2302      	movs	r3, #2
 800237e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002380:	2300      	movs	r3, #0
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002384:	2310      	movs	r3, #16
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002388:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800238e:	2304      	movs	r3, #4
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002392:	2307      	movs	r3, #7
 8002394:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fcb8 	bl	8005d10 <HAL_RCC_OscConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80023a6:	f000 fe9d 	bl	80030e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023aa:	230f      	movs	r3, #15
 80023ac:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 ff1a 	bl	8006200 <HAL_RCC_ClockConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80023d2:	f000 fe87 	bl	80030e4 <Error_Handler>
	}
}
 80023d6:	bf00      	nop
 80023d8:	3750      	adds	r7, #80	@ 0x50
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000

080023e8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80023fa:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <MX_ADC1_Init+0x98>)
 80023fc:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <MX_ADC1_Init+0x9c>)
 80023fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002402:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002406:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_ADC1_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002416:	2200      	movs	r2, #0
 8002418:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <MX_ADC1_Init+0x98>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_ADC1_Init+0x98>)
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <MX_ADC1_Init+0xa0>)
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002436:	2201      	movs	r2, #1
 8002438:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_ADC1_Init+0x98>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_ADC1_Init+0x98>)
 8002444:	2201      	movs	r2, #1
 8002446:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <MX_ADC1_Init+0x98>)
 800244a:	f001 fb39 	bl	8003ac0 <HAL_ADC_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8002454:	f000 fe46 	bl	80030e4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8002458:	230b      	movs	r3, #11
 800245a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800245c:	2301      	movs	r3, #1
 800245e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_ADC1_Init+0x98>)
 800246a:	f001 fb6d 	bl	8003b48 <HAL_ADC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8002474:	f000 fe36 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000208 	.word	0x20000208
 8002484:	40012000 	.word	0x40012000
 8002488:	0f000001 	.word	0x0f000001

0800248c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <MX_I2C1_Init+0x50>)
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <MX_I2C1_Init+0x54>)
 8002494:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002496:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <MX_I2C1_Init+0x50>)
 8002498:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <MX_I2C1_Init+0x58>)
 800249a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <MX_I2C1_Init+0x50>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c8:	4804      	ldr	r0, [pc, #16]	@ (80024dc <MX_I2C1_Init+0x50>)
 80024ca:	f002 fc71 	bl	8004db0 <HAL_I2C_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80024d4:	f000 fe06 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000250 	.word	0x20000250
 80024e0:	40005400 	.word	0x40005400
 80024e4:	00061a80 	.word	0x00061a80

080024e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b096      	sub	sp, #88	@ 0x58
 80024ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	615a      	str	r2, [r3, #20]
 8002518:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2220      	movs	r2, #32
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f008 fbcd 	bl	800acc0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002526:	4b3f      	ldr	r3, [pc, #252]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002528:	4a3f      	ldr	r2, [pc, #252]	@ (8002628 <MX_TIM1_Init+0x140>)
 800252a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1681-1;
 800252c:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <MX_TIM1_Init+0x13c>)
 800252e:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8002532:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1001-1;
 800253a:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <MX_TIM1_Init+0x13c>)
 800253c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002540:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002548:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <MX_TIM1_Init+0x13c>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002554:	4833      	ldr	r0, [pc, #204]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002556:	f004 f873 	bl	8006640 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8002560:	f000 fdc0 	bl	80030e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800256e:	4619      	mov	r1, r3
 8002570:	482c      	ldr	r0, [pc, #176]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002572:	f004 fd1f 	bl	8006fb4 <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 800257c:	f000 fdb2 	bl	80030e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002580:	4828      	ldr	r0, [pc, #160]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002582:	f004 f90f 	bl	80067a4 <HAL_TIM_PWM_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 800258c:	f000 fdaa 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002598:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800259c:	4619      	mov	r1, r3
 800259e:	4821      	ldr	r0, [pc, #132]	@ (8002624 <MX_TIM1_Init+0x13c>)
 80025a0:	f005 f8c4 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 80025aa:	f000 fd9b 	bl	80030e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ae:	2360      	movs	r3, #96	@ 0x60
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4814      	ldr	r0, [pc, #80]	@ (8002624 <MX_TIM1_Init+0x13c>)
 80025d4:	f004 fc2c 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 80025de:	f000 fd81 	bl	80030e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025fa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4807      	ldr	r0, [pc, #28]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002606:	f005 f8ff 	bl	8007808 <HAL_TIMEx_ConfigBreakDeadTime>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 8002610:	f000 fd68 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <MX_TIM1_Init+0x13c>)
 8002616:	f000 ff35 	bl	8003484 <HAL_TIM_MspPostInit>

}
 800261a:	bf00      	nop
 800261c:	3758      	adds	r7, #88	@ 0x58
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200002a4 	.word	0x200002a4
 8002628:	40010000 	.word	0x40010000

0800262c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	@ 0x30
 8002630:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	2224      	movs	r2, #36	@ 0x24
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f008 fb40 	bl	800acc0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 800264a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800264e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295-1;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 800265e:	f06f 0201 	mvn.w	r2, #1
 8002662:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266a:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002670:	2303      	movs	r3, #3
 8002672:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002678:	2301      	movs	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4619      	mov	r1, r3
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 800269c:	f004 f98c 	bl	80069b8 <HAL_TIM_Encoder_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 80026a6:	f000 fd1d 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <MX_TIM2_Init+0xa4>)
 80026b8:	f005 f838 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 80026c2:	f000 fd0f 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	@ 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200002ec 	.word	0x200002ec

080026d4 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <MX_TIM10_Init+0x94>)
 80026ee:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <MX_TIM10_Init+0x98>)
 80026f0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 840-1;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <MX_TIM10_Init+0x94>)
 80026f4:	f240 3247 	movw	r2, #839	@ 0x347
 80026f8:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <MX_TIM10_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 2000-1;
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <MX_TIM10_Init+0x94>)
 8002702:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002706:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_TIM10_Init+0x94>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <MX_TIM10_Init+0x94>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002714:	4814      	ldr	r0, [pc, #80]	@ (8002768 <MX_TIM10_Init+0x94>)
 8002716:	f003 ff93 	bl	8006640 <HAL_TIM_Base_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM10_Init+0x50>
	{
		Error_Handler();
 8002720:	f000 fce0 	bl	80030e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002724:	4810      	ldr	r0, [pc, #64]	@ (8002768 <MX_TIM10_Init+0x94>)
 8002726:	f004 f83d 	bl	80067a4 <HAL_TIM_PWM_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM10_Init+0x60>
	{
		Error_Handler();
 8002730:	f000 fcd8 	bl	80030e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002734:	2360      	movs	r3, #96	@ 0x60
 8002736:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	@ (8002768 <MX_TIM10_Init+0x94>)
 800274c:	f004 fb70 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM10_Init+0x86>
	{
		Error_Handler();
 8002756:	f000 fcc5 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <MX_TIM10_Init+0x94>)
 800275c:	f000 fe92 	bl	8003484 <HAL_TIM_MspPostInit>

}
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000334 	.word	0x20000334
 800276c:	40014400 	.word	0x40014400

08002770 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002774:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <MX_TIM11_Init+0x40>)
 8002776:	4a0f      	ldr	r2, [pc, #60]	@ (80027b4 <MX_TIM11_Init+0x44>)
 8002778:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 120-1;
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <MX_TIM11_Init+0x40>)
 800277c:	2277      	movs	r2, #119	@ 0x77
 800277e:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <MX_TIM11_Init+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 7000-1;
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <MX_TIM11_Init+0x40>)
 8002788:	f641 3257 	movw	r2, #6999	@ 0x1b57
 800278c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <MX_TIM11_Init+0x40>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <MX_TIM11_Init+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_TIM11_Init+0x40>)
 800279c:	f003 ff50 	bl	8006640 <HAL_TIM_Base_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM11_Init+0x3a>
	{
		Error_Handler();
 80027a6:	f000 fc9d 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000037c 	.word	0x2000037c
 80027b4:	40014800 	.word	0x40014800

080027b8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <MX_USART2_UART_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_USART2_UART_Init+0x4c>)
 80027f0:	f005 f870 	bl	80078d4 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80027fa:	f000 fc73 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200003c4 	.word	0x200003c4
 8002808:	40004400 	.word	0x40004400

0800280c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <MX_USART6_UART_Init+0x50>)
 8002814:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800281c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_USART6_UART_Init+0x4c>)
 8002844:	f005 f846 	bl	80078d4 <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 800284e:	f000 fc49 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000408 	.word	0x20000408
 800285c:	40011400 	.word	0x40011400

08002860 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <MX_DMA_Init+0x3c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <MX_DMA_Init+0x3c>)
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <MX_DMA_Init+0x3c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	2039      	movs	r0, #57	@ 0x39
 8002888:	f001 fc6d 	bl	8004166 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800288c:	2039      	movs	r0, #57	@ 0x39
 800288e:	f001 fc86 	bl	800419e <HAL_NVIC_EnableIRQ>

}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b49      	ldr	r3, [pc, #292]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a48      	ldr	r2, [pc, #288]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b46      	ldr	r3, [pc, #280]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b42      	ldr	r3, [pc, #264]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a41      	ldr	r2, [pc, #260]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b3f      	ldr	r3, [pc, #252]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b3b      	ldr	r3, [pc, #236]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a3a      	ldr	r2, [pc, #232]	@ (80029e0 <MX_GPIO_Init+0x140>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <MX_GPIO_Init+0x140>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <MX_GPIO_Init+0x140>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a33      	ldr	r2, [pc, #204]	@ (80029e0 <MX_GPIO_Init+0x140>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <MX_GPIO_Init+0x140>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	482e      	ldr	r0, [pc, #184]	@ (80029e4 <MX_GPIO_Init+0x144>)
 800292c:	f002 f9f4 	bl	8004d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	482c      	ldr	r0, [pc, #176]	@ (80029e8 <MX_GPIO_Init+0x148>)
 8002936:	f002 f9ef 	bl	8004d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_SET);
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002940:	4828      	ldr	r0, [pc, #160]	@ (80029e4 <MX_GPIO_Init+0x144>)
 8002942:	f002 f9e9 	bl	8004d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800294c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002950:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4821      	ldr	r0, [pc, #132]	@ (80029e4 <MX_GPIO_Init+0x144>)
 800295e:	f002 f83f 	bl	80049e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_Pin IMU_RESET_Pin */
	GPIO_InitStruct.Pin = DIR_Pin|IMU_RESET_Pin;
 8002962:	f240 1301 	movw	r3, #257	@ 0x101
 8002966:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	481a      	ldr	r0, [pc, #104]	@ (80029e4 <MX_GPIO_Init+0x144>)
 800297c:	f002 f830 	bl	80049e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002980:	2320      	movs	r3, #32
 8002982:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4814      	ldr	r0, [pc, #80]	@ (80029e8 <MX_GPIO_Init+0x148>)
 8002998:	f002 f822 	bl	80049e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : External_button_Pin */
	GPIO_InitStruct.Pin = External_button_Pin;
 800299c:	2304      	movs	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029a0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(External_button_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	480e      	ldr	r0, [pc, #56]	@ (80029ec <MX_GPIO_Init+0x14c>)
 80029b2:	f002 f815 	bl	80049e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2008      	movs	r0, #8
 80029bc:	f001 fbd3 	bl	8004166 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029c0:	2008      	movs	r0, #8
 80029c2:	f001 fbec 	bl	800419e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2028      	movs	r0, #40	@ 0x28
 80029cc:	f001 fbcb 	bl	8004166 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029d0:	2028      	movs	r0, #40	@ 0x28
 80029d2:	f001 fbe4 	bl	800419e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	@ 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020000 	.word	0x40020000
 80029ec:	40020400 	.word	0x40020400

080029f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Timer11 for temporization
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d13a      	bne.n	8002a76 <HAL_TIM_PeriodElapsedCallback+0x86>
		Flag_10ms = 1;
 8002a00:	4b20      	ldr	r3, [pc, #128]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

		if (dataRX.curvature_radius_ref_m == last_read){
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	d110      	bne.n	8002a3e <HAL_TIM_PeriodElapsedCallback+0x4e>
			cnt_DMA++;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a1b      	ldr	r2, [pc, #108]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a24:	6013      	str	r3, [r2, #0]
			if(cnt_DMA >= 5){
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	dd07      	ble.n	8002a3e <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8002a2e:	2232      	movs	r2, #50	@ 0x32
 8002a30:	4918      	ldr	r1, [pc, #96]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a32:	4819      	ldr	r0, [pc, #100]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a34:	f005 f82d 	bl	8007a92 <HAL_UARTEx_ReceiveToIdle_DMA>
				cnt_DMA = 0;
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
			}
		}

		//Encoder
		vehicleState.counts = TIM2->CNT;
 8002a3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a48:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 8002a4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	6253      	str	r3, [r2, #36]	@ 0x24

		cnt_10ms_button++;
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a60:	6013      	str	r3, [r2, #0]

		//Variabile per la calibrazione
		if(flag_button == -1){
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PeriodElapsedCallback+0x86>
			counter_cal_ESC++;
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a74:	6013      	str	r3, [r2, #0]
		}

	}
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000037c 	.word	0x2000037c
 8002a84:	200005f0 	.word	0x200005f0
 8002a88:	200004ac 	.word	0x200004ac
 8002a8c:	200006b0 	.word	0x200006b0
 8002a90:	200006b4 	.word	0x200006b4
 8002a94:	2000064c 	.word	0x2000064c
 8002a98:	20000408 	.word	0x20000408
 8002a9c:	20000500 	.word	0x20000500
 8002aa0:	20000608 	.word	0x20000608
 8002aa4:	200005f8 	.word	0x200005f8
 8002aa8:	20000610 	.word	0x20000610

08002aac <__io_putchar>:

//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF); //putty
 8002ab4:	1d39      	adds	r1, r7, #4
 8002ab6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aba:	2201      	movs	r2, #1
 8002abc:	4807      	ldr	r0, [pc, #28]	@ (8002adc <__io_putchar+0x30>)
 8002abe:	f004 ff56 	bl	800796e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF); //rpi
 8002ac2:	1d39      	adds	r1, r7, #4
 8002ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <__io_putchar+0x34>)
 8002acc:	f004 ff4f 	bl	800796e <HAL_UART_Transmit>
	return ch;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200003c4 	.word	0x200003c4
 8002ae0:	20000408 	.word	0x20000408

08002ae4 <HAL_GPIO_EXTI_Callback>:

//-------------------------------------------------------------
//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13 ||GPIO_Pin == GPIO_PIN_2) {
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af4:	d002      	beq.n	8002afc <HAL_GPIO_EXTI_Callback+0x18>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d13a      	bne.n	8002b72 <HAL_GPIO_EXTI_Callback+0x8e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b00:	481e      	ldr	r0, [pc, #120]	@ (8002b7c <HAL_GPIO_EXTI_Callback+0x98>)
 8002b02:	f002 f8f1 	bl	8004ce8 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <HAL_GPIO_EXTI_Callback+0x32>

			// Button pressed
			buttonPressStartTime = cnt_10ms_button;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b12:	6013      	str	r3, [r2, #0]
				flag_button = -1;
				counter_cal_ESC = 0;
			}
		}
	}
}
 8002b14:	e02d      	b.n	8002b72 <HAL_GPIO_EXTI_Callback+0x8e>
			buttonPressEndTime = cnt_10ms_button;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b88 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b1c:	6013      	str	r3, [r2, #0]
			pressDuration = buttonPressEndTime - buttonPressStartTime;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a18      	ldr	r2, [pc, #96]	@ (8002b8c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b2a:	6013      	str	r3, [r2, #0]
			if (pressDuration < SHORT_PRESS_THRESHOLD)
 8002b2c:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b63      	cmp	r3, #99	@ 0x63
 8002b32:	d813      	bhi.n	8002b5c <HAL_GPIO_EXTI_Callback+0x78>
				if(flag_button >= 0 && flag_button < max_flag_button){
 8002b34:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0b      	blt.n	8002b54 <HAL_GPIO_EXTI_Callback+0x70>
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	da05      	bge.n	8002b54 <HAL_GPIO_EXTI_Callback+0x70>
					flag_button++;
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a10      	ldr	r2, [pc, #64]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	e00e      	b.n	8002b72 <HAL_GPIO_EXTI_Callback+0x8e>
					flag_button = 0;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	e00a      	b.n	8002b72 <HAL_GPIO_EXTI_Callback+0x8e>
			} else if (pressDuration >= LONG_PRESS_THRESHOLD)
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b62:	d906      	bls.n	8002b72 <HAL_GPIO_EXTI_Callback+0x8e>
				flag_button = -1;
 8002b64:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b66:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6a:	601a      	str	r2, [r3, #0]
				counter_cal_ESC = 0;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	20000608 	.word	0x20000608
 8002b84:	200005fc 	.word	0x200005fc
 8002b88:	20000600 	.word	0x20000600
 8002b8c:	20000604 	.word	0x20000604
 8002b90:	200005f8 	.word	0x200005f8
 8002b94:	2000060c 	.word	0x2000060c
 8002b98:	20000610 	.word	0x20000610

08002b9c <HAL_UARTEx_RxEventCallback>:

//-------------------------------------------------------------
// COMUNICAZIONE (RICEZIONE DATI)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6){
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d174      	bne.n	8002c9e <HAL_UARTEx_RxEventCallback+0x102>
 8002bb4:	466b      	mov	r3, sp
 8002bb6:	461e      	mov	r6, r3
		memcpy(msg, RxBuf, Size);
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	493b      	ldr	r1, [pc, #236]	@ (8002cac <HAL_UARTEx_RxEventCallback+0x110>)
 8002bbe:	483c      	ldr	r0, [pc, #240]	@ (8002cb0 <HAL_UARTEx_RxEventCallback+0x114>)
 8002bc0:	f008 f997 	bl	800aef2 <memcpy>
		float floatArray[MAX_VALUES];
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_UARTEx_RxEventCallback+0x118>)
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	1e4b      	subs	r3, r1, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	460a      	mov	r2, r1
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002be0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002be4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002be8:	460a      	mov	r2, r1
 8002bea:	2300      	movs	r3, #0
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	016b      	lsls	r3, r5, #5
 8002bfa:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002bfe:	0162      	lsls	r2, r4, #5
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3307      	adds	r3, #7
 8002c06:	08db      	lsrs	r3, r3, #3
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c0e:	466b      	mov	r3, sp
 8002c10:	3303      	adds	r3, #3
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	60bb      	str	r3, [r7, #8]
		parseCSV(msg, floatArray);
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4825      	ldr	r0, [pc, #148]	@ (8002cb0 <HAL_UARTEx_RxEventCallback+0x114>)
 8002c1c:	f7fe fbd6 	bl	80013cc <parseCSV>

		if(floatArray[0] == 0 || floatArray[0] == 1){
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d009      	beq.n	8002c44 <HAL_UARTEx_RxEventCallback+0xa8>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c3a:	eef4 7a47 	vcmp.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d110      	bne.n	8002c66 <HAL_UARTEx_RxEventCallback+0xca>
			dataRX.enable = floatArray[0];
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4e:	ee17 2a90 	vmov	r2, s15
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002c54:	609a      	str	r2, [r3, #8]
			dataRX.linear_speed_ref_m_s = floatArray[1];
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002c5c:	6053      	str	r3, [r2, #4]
			dataRX.curvature_radius_ref_m = floatArray[2];
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4a15      	ldr	r2, [pc, #84]	@ (8002cb8 <HAL_UARTEx_RxEventCallback+0x11c>)
 8002c64:	6013      	str	r3, [r2, #0]
		}

		if(floatArray[0] == 3){
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002c70:	eef4 7a47 	vcmp.f32	s15, s14
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d10b      	bne.n	8002c92 <HAL_UARTEx_RxEventCallback+0xf6>
			// Reset dei pid
			resetPID(&pid_steering);
 8002c7a:	4810      	ldr	r0, [pc, #64]	@ (8002cbc <HAL_UARTEx_RxEventCallback+0x120>)
 8002c7c:	f7fe faaa 	bl	80011d4 <resetPID>
			resetPID(&pid_traction);
 8002c80:	480f      	ldr	r0, [pc, #60]	@ (8002cc0 <HAL_UARTEx_RxEventCallback+0x124>)
 8002c82:	f7fe faa7 	bl	80011d4 <resetPID>
			resetPID(&pid_traction_RWD);
 8002c86:	480f      	ldr	r0, [pc, #60]	@ (8002cc4 <HAL_UARTEx_RxEventCallback+0x128>)
 8002c88:	f7fe faa4 	bl	80011d4 <resetPID>
			resetPID(&pid_traction_DESC);
 8002c8c:	480e      	ldr	r0, [pc, #56]	@ (8002cc8 <HAL_UARTEx_RxEventCallback+0x12c>)
 8002c8e:	f7fe faa1 	bl	80011d4 <resetPID>
			//printf("PID RESETTATO! (TASTO)\r\n");
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf, RxBuf_SIZE);
 8002c92:	2232      	movs	r2, #50	@ 0x32
 8002c94:	4905      	ldr	r1, [pc, #20]	@ (8002cac <HAL_UARTEx_RxEventCallback+0x110>)
 8002c96:	480d      	ldr	r0, [pc, #52]	@ (8002ccc <HAL_UARTEx_RxEventCallback+0x130>)
 8002c98:	f004 fefb 	bl	8007a92 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002c9c:	46b5      	mov	sp, r6
	}
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ca8:	40011400 	.word	0x40011400
 8002cac:	2000064c 	.word	0x2000064c
 8002cb0:	20000680 	.word	0x20000680
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	200004ac 	.word	0x200004ac
 8002cbc:	200005b8 	.word	0x200005b8
 8002cc0:	20000540 	.word	0x20000540
 8002cc4:	20000568 	.word	0x20000568
 8002cc8:	20000590 	.word	0x20000590
 8002ccc:	20000408 	.word	0x20000408

08002cd0 <TransmitTelemetry>:

// COMUNICAZIONE (TRASMISSIONE DATI)
void TransmitTelemetry(){
 8002cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd4:	ed2d 8b0a 	vpush	{d8-d12}
 8002cd8:	b0b4      	sub	sp, #208	@ 0xd0
 8002cda:	af12      	add	r7, sp, #72	@ 0x48
	dataTX.current_speed_rpm = vehicleState.motor_speed_RPM;
 8002cdc:	4b95      	ldr	r3, [pc, #596]	@ (8002f34 <TransmitTelemetry+0x264>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	4a95      	ldr	r2, [pc, #596]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002ce2:	6013      	str	r3, [r2, #0]
	dataTX.current_yaw_rate_deg_sec = vehicleState.yaw_rate_deg_sec;
 8002ce4:	4b93      	ldr	r3, [pc, #588]	@ (8002f34 <TransmitTelemetry+0x264>)
 8002ce6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7fd ff83 	bl	8000bf8 <__aeabi_d2f>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a90      	ldr	r2, [pc, #576]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002cf6:	6093      	str	r3, [r2, #8]

	bno055_vector_t accel = bno055_getVectorAccelerometer();
 8002cf8:	f7fe fd5a 	bl	80017b0 <bno055_getVectorAccelerometer>
 8002cfc:	eeb0 4a40 	vmov.f32	s8, s0
 8002d00:	eef0 4a60 	vmov.f32	s9, s1
 8002d04:	eeb0 5a41 	vmov.f32	s10, s2
 8002d08:	eef0 5a61 	vmov.f32	s11, s3
 8002d0c:	eeb0 6a42 	vmov.f32	s12, s4
 8002d10:	eef0 6a62 	vmov.f32	s13, s5
 8002d14:	eeb0 7a43 	vmov.f32	s14, s6
 8002d18:	eef0 7a63 	vmov.f32	s15, s7
 8002d1c:	ed87 4b1a 	vstr	d4, [r7, #104]	@ 0x68
 8002d20:	ed87 5b1c 	vstr	d5, [r7, #112]	@ 0x70
 8002d24:	ed87 6b1e 	vstr	d6, [r7, #120]	@ 0x78
 8002d28:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
	bno055_vector_t angle = bno055_getVectorGyroscope();
 8002d2c:	f7fe fdc6 	bl	80018bc <bno055_getVectorGyroscope>
 8002d30:	eeb0 4a40 	vmov.f32	s8, s0
 8002d34:	eef0 4a60 	vmov.f32	s9, s1
 8002d38:	eeb0 5a41 	vmov.f32	s10, s2
 8002d3c:	eef0 5a61 	vmov.f32	s11, s3
 8002d40:	eeb0 6a42 	vmov.f32	s12, s4
 8002d44:	eef0 6a62 	vmov.f32	s13, s5
 8002d48:	eeb0 7a43 	vmov.f32	s14, s6
 8002d4c:	eef0 7a63 	vmov.f32	s15, s7
 8002d50:	ed87 4b12 	vstr	d4, [r7, #72]	@ 0x48
 8002d54:	ed87 5b14 	vstr	d5, [r7, #80]	@ 0x50
 8002d58:	ed87 6b16 	vstr	d6, [r7, #88]	@ 0x58
 8002d5c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
	bno055_vector_t magne = bno055_getVectorMagnetometer();
 8002d60:	f7fe fd69 	bl	8001836 <bno055_getVectorMagnetometer>
 8002d64:	eeb0 4a40 	vmov.f32	s8, s0
 8002d68:	eef0 4a60 	vmov.f32	s9, s1
 8002d6c:	eeb0 5a41 	vmov.f32	s10, s2
 8002d70:	eef0 5a61 	vmov.f32	s11, s3
 8002d74:	eeb0 6a42 	vmov.f32	s12, s4
 8002d78:	eef0 6a62 	vmov.f32	s13, s5
 8002d7c:	eeb0 7a43 	vmov.f32	s14, s6
 8002d80:	eef0 7a63 	vmov.f32	s15, s7
 8002d84:	ed87 4b0a 	vstr	d4, [r7, #40]	@ 0x28
 8002d88:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 8002d8c:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 8002d90:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	bno055_vector_t quat = bno055_getVectorQuaternion();
 8002d94:	f7fe fdd5 	bl	8001942 <bno055_getVectorQuaternion>
 8002d98:	eeb0 4a40 	vmov.f32	s8, s0
 8002d9c:	eef0 4a60 	vmov.f32	s9, s1
 8002da0:	eeb0 5a41 	vmov.f32	s10, s2
 8002da4:	eef0 5a61 	vmov.f32	s11, s3
 8002da8:	eeb0 6a42 	vmov.f32	s12, s4
 8002dac:	eef0 6a62 	vmov.f32	s13, s5
 8002db0:	eeb0 7a43 	vmov.f32	s14, s6
 8002db4:	eef0 7a63 	vmov.f32	s15, s7
 8002db8:	ed87 4b02 	vstr	d4, [r7, #8]
 8002dbc:	ed87 5b04 	vstr	d5, [r7, #16]
 8002dc0:	ed87 6b06 	vstr	d6, [r7, #24]
 8002dc4:	ed87 7b08 	vstr	d7, [r7, #32]
	dataTX.accel_x = accel.x;
 8002dc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd ff12 	bl	8000bf8 <__aeabi_d2f>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002dd8:	6293      	str	r3, [r2, #40]	@ 0x28
	dataTX.accel_y = accel.y;
 8002dda:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd ff09 	bl	8000bf8 <__aeabi_d2f>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a53      	ldr	r2, [pc, #332]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
	dataTX.accel_z = accel.z;
 8002dec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd ff00 	bl	8000bf8 <__aeabi_d2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
	dataTX.angle_x = angle.x;
 8002dfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd fef7 	bl	8000bf8 <__aeabi_d2f>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e0e:	6353      	str	r3, [r2, #52]	@ 0x34
	dataTX.angle_y = angle.y;
 8002e10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd feee 	bl	8000bf8 <__aeabi_d2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4a46      	ldr	r2, [pc, #280]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e20:	6393      	str	r3, [r2, #56]	@ 0x38
	dataTX.angle_z = angle.z;
 8002e22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fee5 	bl	8000bf8 <__aeabi_d2f>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e32:	63d3      	str	r3, [r2, #60]	@ 0x3c
	dataTX.magne_x = magne.x;
 8002e34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fedc 	bl	8000bf8 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4a3d      	ldr	r2, [pc, #244]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e44:	61d3      	str	r3, [r2, #28]
	dataTX.magne_y = magne.y;
 8002e46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fed3 	bl	8000bf8 <__aeabi_d2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4a38      	ldr	r2, [pc, #224]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e56:	6213      	str	r3, [r2, #32]
	dataTX.magne_z = magne.z;
 8002e58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd feca 	bl	8000bf8 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a34      	ldr	r2, [pc, #208]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e68:	6253      	str	r3, [r2, #36]	@ 0x24
	dataTX.quaternion_x = quat.x;
 8002e6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fec1 	bl	8000bf8 <__aeabi_d2f>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a2f      	ldr	r2, [pc, #188]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e7a:	60d3      	str	r3, [r2, #12]
	dataTX.quaternion_y = quat.y;
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd feb8 	bl	8000bf8 <__aeabi_d2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e8c:	6113      	str	r3, [r2, #16]
	dataTX.quaternion_z = quat.z;
 8002e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd feaf 	bl	8000bf8 <__aeabi_d2f>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002e9e:	6153      	str	r3, [r2, #20]
	dataTX.quaternion_w = quat.w;
 8002ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7fd fea6 	bl	8000bf8 <__aeabi_d2f>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <TransmitTelemetry+0x268>)
 8002eb0:	6193      	str	r3, [r2, #24]
	//printf("%2.4f, %2.4f, %2.4f, %2.4f, %2.4f, %2.4f, %2.4f, %2.4f, %2.4f, %2.4f\r\n", dataTX.accel_x, dataTX.accel_y, dataTX.accel_z, dataTX.angle_x, dataTX.angle_y, dataTX.angle_z, dataTX.quaternion_x, dataTX.quaternion_y, dataTX.quaternion_z, dataTX.quaternion_w);
	printf("%+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f, %+2.4f\r\n", accel.x, accel.y, accel.z, angle.x, angle.y, angle.z, magne.x, magne.y, magne.z, tempRPM * RPM_2_m_s);
 8002eb2:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8002eb6:	ed87 7b00 	vstr	d7, [r7]
 8002eba:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	@ 0x78
 8002ebe:	ed97 8b20 	vldr	d8, [r7, #128]	@ 0x80
 8002ec2:	ed97 9b14 	vldr	d9, [r7, #80]	@ 0x50
 8002ec6:	ed97 ab16 	vldr	d10, [r7, #88]	@ 0x58
 8002eca:	ed97 bb18 	vldr	d11, [r7, #96]	@ 0x60
 8002ece:	ed97 cb0c 	vldr	d12, [r7, #48]	@ 0x30
 8002ed2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ed6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002eda:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <TransmitTelemetry+0x26c>)
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <TransmitTelemetry+0x270>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	ee17 0a90 	vmov	r0, s15
 8002eee:	f7fd fb33 	bl	8000558 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002efa:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8002efe:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8002f02:	ed8d cb0a 	vstr	d12, [sp, #40]	@ 0x28
 8002f06:	ed8d bb08 	vstr	d11, [sp, #32]
 8002f0a:	ed8d ab06 	vstr	d10, [sp, #24]
 8002f0e:	ed8d 9b04 	vstr	d9, [sp, #16]
 8002f12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002f16:	e9cd ab00 	strd	sl, fp, [sp]
 8002f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f1e:	4809      	ldr	r0, [pc, #36]	@ (8002f44 <TransmitTelemetry+0x274>)
 8002f20:	f007 fd66 	bl	800a9f0 <iprintf>
}
 8002f24:	bf00      	nop
 8002f26:	3788      	adds	r7, #136	@ 0x88
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	ecbd 8b0a 	vpop	{d8-d12}
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	20000500 	.word	0x20000500
 8002f38:	200004bc 	.word	0x200004bc
 8002f3c:	20000618 	.word	0x20000618
 8002f40:	20000010 	.word	0x20000010
 8002f44:	0800d994 	.word	0x0800d994

08002f48 <ProceduraCalibrazione>:

//-------------------------------------------------------------
//CALIBRAZIONE TEMPORIZZATA
void ProceduraCalibrazione(){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0

	if(counter_cal_ESC < 5){
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800308c <ProceduraCalibrazione+0x144>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	dc04      	bgt.n	8002f5e <ProceduraCalibrazione+0x16>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2102      	movs	r1, #2
 8002f58:	484d      	ldr	r0, [pc, #308]	@ (8003090 <ProceduraCalibrazione+0x148>)
 8002f5a:	f001 fedd 	bl	8004d18 <HAL_GPIO_WritePin>
	}
	if(counter_cal_ESC <= 300){
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800308c <ProceduraCalibrazione+0x144>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002f66:	dc13      	bgt.n	8002f90 <ProceduraCalibrazione+0x48>
		if(!(counter_cal_ESC % 15)){
 8002f68:	4b48      	ldr	r3, [pc, #288]	@ (800308c <ProceduraCalibrazione+0x144>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b49      	ldr	r3, [pc, #292]	@ (8003094 <ProceduraCalibrazione+0x14c>)
 8002f6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002f72:	4413      	add	r3, r2
 8002f74:	10d9      	asrs	r1, r3, #3
 8002f76:	17d3      	asrs	r3, r2, #31
 8002f78:	1ac9      	subs	r1, r1, r3
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a5b      	subs	r3, r3, r1
 8002f80:	1ad1      	subs	r1, r2, r3
 8002f82:	2900      	cmp	r1, #0
 8002f84:	d17f      	bne.n	8003086 <ProceduraCalibrazione+0x13e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002f86:	2120      	movs	r1, #32
 8002f88:	4843      	ldr	r0, [pc, #268]	@ (8003098 <ProceduraCalibrazione+0x150>)
 8002f8a:	f001 fede 	bl	8004d4a <HAL_GPIO_TogglePin>
		}
	}
	else if (counter_cal_ESC <= 1300){
		flag_button = 0;
	}
}
 8002f8e:	e07a      	b.n	8003086 <ProceduraCalibrazione+0x13e>
	else if(counter_cal_ESC <= 600){
 8002f90:	4b3e      	ldr	r3, [pc, #248]	@ (800308c <ProceduraCalibrazione+0x144>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002f98:	dc18      	bgt.n	8002fcc <ProceduraCalibrazione+0x84>
		duty = NEUTRAL_PWM;
 8002f9a:	4b40      	ldr	r3, [pc, #256]	@ (800309c <ProceduraCalibrazione+0x154>)
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800309c <ProceduraCalibrazione+0x154>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fad6 	bl	8000558 <__aeabi_f2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	ec43 2b10 	vmov	d0, r2, r3
 8002fb4:	f7fe f81e 	bl	8000ff4 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2120      	movs	r1, #32
 8002fbc:	4836      	ldr	r0, [pc, #216]	@ (8003098 <ProceduraCalibrazione+0x150>)
 8002fbe:	f001 feab 	bl	8004d18 <HAL_GPIO_WritePin>
		servo_motor(-20);
 8002fc2:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8002fc6:	f000 f893 	bl	80030f0 <servo_motor>
}
 8002fca:	e05c      	b.n	8003086 <ProceduraCalibrazione+0x13e>
	else if(counter_cal_ESC <= 900){
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800308c <ProceduraCalibrazione+0x144>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002fd4:	dc17      	bgt.n	8003006 <ProceduraCalibrazione+0xbe>
		duty = MAX_PWM;
 8002fd6:	4b31      	ldr	r3, [pc, #196]	@ (800309c <ProceduraCalibrazione+0x154>)
 8002fd8:	4a31      	ldr	r2, [pc, #196]	@ (80030a0 <ProceduraCalibrazione+0x158>)
 8002fda:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <ProceduraCalibrazione+0x154>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fab9 	bl	8000558 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	ec43 2b10 	vmov	d0, r2, r3
 8002fee:	f7fe f801 	bl	8000ff4 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	4828      	ldr	r0, [pc, #160]	@ (8003098 <ProceduraCalibrazione+0x150>)
 8002ff8:	f001 fe8e 	bl	8004d18 <HAL_GPIO_WritePin>
		servo_motor(0);
 8002ffc:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80030a4 <ProceduraCalibrazione+0x15c>
 8003000:	f000 f876 	bl	80030f0 <servo_motor>
}
 8003004:	e03f      	b.n	8003086 <ProceduraCalibrazione+0x13e>
	else if(counter_cal_ESC <= 1100){
 8003006:	4b21      	ldr	r3, [pc, #132]	@ (800308c <ProceduraCalibrazione+0x144>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f240 424c 	movw	r2, #1100	@ 0x44c
 800300e:	4293      	cmp	r3, r2
 8003010:	dc17      	bgt.n	8003042 <ProceduraCalibrazione+0xfa>
		duty = MIN_PWM;
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <ProceduraCalibrazione+0x154>)
 8003014:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <ProceduraCalibrazione+0x160>)
 8003016:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 8003018:	4b20      	ldr	r3, [pc, #128]	@ (800309c <ProceduraCalibrazione+0x154>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa9b 	bl	8000558 <__aeabi_f2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	ec43 2b10 	vmov	d0, r2, r3
 800302a:	f7fd ffe3 	bl	8000ff4 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2120      	movs	r1, #32
 8003032:	4819      	ldr	r0, [pc, #100]	@ (8003098 <ProceduraCalibrazione+0x150>)
 8003034:	f001 fe70 	bl	8004d18 <HAL_GPIO_WritePin>
		servo_motor(20);
 8003038:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800303c:	f000 f858 	bl	80030f0 <servo_motor>
}
 8003040:	e021      	b.n	8003086 <ProceduraCalibrazione+0x13e>
	else if(counter_cal_ESC <= 1200){
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <ProceduraCalibrazione+0x144>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800304a:	dc13      	bgt.n	8003074 <ProceduraCalibrazione+0x12c>
		if(!(counter_cal_ESC % 15)){
 800304c:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <ProceduraCalibrazione+0x144>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <ProceduraCalibrazione+0x14c>)
 8003052:	fb83 1302 	smull	r1, r3, r3, r2
 8003056:	4413      	add	r3, r2
 8003058:	10d9      	asrs	r1, r3, #3
 800305a:	17d3      	asrs	r3, r2, #31
 800305c:	1ac9      	subs	r1, r1, r3
 800305e:	460b      	mov	r3, r1
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a5b      	subs	r3, r3, r1
 8003064:	1ad1      	subs	r1, r2, r3
 8003066:	2900      	cmp	r1, #0
 8003068:	d10d      	bne.n	8003086 <ProceduraCalibrazione+0x13e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800306a:	2120      	movs	r1, #32
 800306c:	480a      	ldr	r0, [pc, #40]	@ (8003098 <ProceduraCalibrazione+0x150>)
 800306e:	f001 fe6c 	bl	8004d4a <HAL_GPIO_TogglePin>
}
 8003072:	e008      	b.n	8003086 <ProceduraCalibrazione+0x13e>
	else if (counter_cal_ESC <= 1300){
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <ProceduraCalibrazione+0x144>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f240 5214 	movw	r2, #1300	@ 0x514
 800307c:	4293      	cmp	r3, r2
 800307e:	dc02      	bgt.n	8003086 <ProceduraCalibrazione+0x13e>
		flag_button = 0;
 8003080:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <ProceduraCalibrazione+0x164>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000610 	.word	0x20000610
 8003090:	40021000 	.word	0x40021000
 8003094:	88888889 	.word	0x88888889
 8003098:	40020000 	.word	0x40020000
 800309c:	20000614 	.word	0x20000614
 80030a0:	40266666 	.word	0x40266666
 80030a4:	00000000 	.word	0x00000000
 80030a8:	c0266666 	.word	0xc0266666
 80030ac:	200005f8 	.word	0x200005f8

080030b0 <resetBNO055>:

void resetBNO055(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ba:	4809      	ldr	r0, [pc, #36]	@ (80030e0 <resetBNO055+0x30>)
 80030bc:	f001 fe2c 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 80030c0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80030c4:	f000 fcd8 	bl	8003a78 <HAL_Delay>
	HAL_GPIO_WritePin(IMU_RESET_GPIO_Port, IMU_RESET_Pin, GPIO_PIN_SET);
 80030c8:	2201      	movs	r2, #1
 80030ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ce:	4804      	ldr	r0, [pc, #16]	@ (80030e0 <resetBNO055+0x30>)
 80030d0:	f001 fe22 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 80030d4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80030d8:	f000 fcce 	bl	8003a78 <HAL_Delay>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40020800 	.word	0x40020800

080030e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <Error_Handler+0x8>

080030f0 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <servo_motor+0xb8>)
 80030fc:	617b      	str	r3, [r7, #20]
	  float ccr;
	  float conv_angolo;

	  if(angolo < MIN_ANGOLO)
 80030fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003102:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80031ac <servo_motor+0xbc>
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d502      	bpl.n	8003116 <servo_motor+0x26>

		   angolo = MIN_ANGOLO;
 8003110:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <servo_motor+0xc0>)
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e00a      	b.n	800312c <servo_motor+0x3c>

	  else if (angolo > MAX_ANGOLO)
 8003116:	edd7 7a01 	vldr	s15, [r7, #4]
 800311a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80031b4 <servo_motor+0xc4>
 800311e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	dd01      	ble.n	800312c <servo_motor+0x3c>

		   angolo = MAX_ANGOLO;
 8003128:	4b23      	ldr	r3, [pc, #140]	@ (80031b8 <servo_motor+0xc8>)
 800312a:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + DRITTO;
 800312c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003130:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80031bc <servo_motor+0xcc>
 8003134:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003138:	edc7 7a04 	vstr	s15, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 800313c:	6938      	ldr	r0, [r7, #16]
 800313e:	f7fd fa0b 	bl	8000558 <__aeabi_f2d>
 8003142:	a317      	add	r3, pc, #92	@ (adr r3, 80031a0 <servo_motor+0xb0>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fa5e 	bl	8000608 <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <servo_motor+0xd0>)
 800315a:	f7fd f89f 	bl	800029c <__adddf3>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4614      	mov	r4, r2
 8003164:	461d      	mov	r5, r3
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7fd f9f6 	bl	8000558 <__aeabi_f2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fb72 	bl	800085c <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fd3a 	bl	8000bf8 <__aeabi_d2f>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <servo_motor+0xd4>)
 800318a:	edd7 7a03 	vldr	s15, [r7, #12]
 800318e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003192:	ee17 2a90 	vmov	r2, s15
 8003196:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003198:	bf00      	nop
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bdb0      	pop	{r4, r5, r7, pc}
 80031a0:	f544bb1b 	.word	0xf544bb1b
 80031a4:	3f86c0d6 	.word	0x3f86c0d6
 80031a8:	3ca3d70a 	.word	0x3ca3d70a
 80031ac:	c2380000 	.word	0xc2380000
 80031b0:	c2380000 	.word	0xc2380000
 80031b4:	42380000 	.word	0x42380000
 80031b8:	42380000 	.word	0x42380000
 80031bc:	42b40000 	.word	0x42b40000
 80031c0:	3fe00000 	.word	0x3fe00000
 80031c4:	40010000 	.word	0x40010000

080031c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <HAL_MspInit+0x4c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003214 <HAL_MspInit+0x4c>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <HAL_MspInit+0x4c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_MspInit+0x4c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	4a08      	ldr	r2, [pc, #32]	@ (8003214 <HAL_MspInit+0x4c>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_MspInit+0x4c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003206:	2007      	movs	r0, #7
 8003208:	f000 ffa2 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800

08003218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_ADC_MspInit+0x7c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d127      	bne.n	800328a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003248:	6453      	str	r3, [r2, #68]	@ 0x44
 800324a:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	4a0e      	ldr	r2, [pc, #56]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	@ 0x30
 8003266:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_ADC_MspInit+0x80>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003272:	2302      	movs	r3, #2
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003276:	2303      	movs	r3, #3
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4805      	ldr	r0, [pc, #20]	@ (800329c <HAL_ADC_MspInit+0x84>)
 8003286:	f001 fbab 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	@ 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40012000 	.word	0x40012000
 8003298:	40023800 	.word	0x40023800
 800329c:	40020800 	.word	0x40020800

080032a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a19      	ldr	r2, [pc, #100]	@ (8003324 <HAL_I2C_MspInit+0x84>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12b      	bne.n	800331a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 80032de:	23c0      	movs	r3, #192	@ 0xc0
 80032e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e2:	2312      	movs	r3, #18
 80032e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ee:	2304      	movs	r3, #4
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4619      	mov	r1, r3
 80032f8:	480c      	ldr	r0, [pc, #48]	@ (800332c <HAL_I2C_MspInit+0x8c>)
 80032fa:	f001 fb71 	bl	80049e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 8003308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800330c:	6413      	str	r3, [r2, #64]	@ 0x40
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_I2C_MspInit+0x88>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40005400 	.word	0x40005400
 8003328:	40023800 	.word	0x40023800
 800332c:	40020400 	.word	0x40020400

08003330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2a      	ldr	r2, [pc, #168]	@ (80033e8 <HAL_TIM_Base_MspInit+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d11e      	bne.n	8003380 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	4b29      	ldr	r3, [pc, #164]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	4a28      	ldr	r2, [pc, #160]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6453      	str	r3, [r2, #68]	@ 0x44
 8003352:	4b26      	ldr	r3, [pc, #152]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2100      	movs	r1, #0
 8003362:	2018      	movs	r0, #24
 8003364:	f000 feff 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003368:	2018      	movs	r0, #24
 800336a:	f000 ff18 	bl	800419e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	201a      	movs	r0, #26
 8003374:	f000 fef7 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003378:	201a      	movs	r0, #26
 800337a:	f000 ff10 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800337e:	e02e      	b.n	80033de <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1a      	ldr	r2, [pc, #104]	@ (80033f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a16      	ldr	r2, [pc, #88]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 8003394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	e01a      	b.n	80033de <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a11      	ldr	r2, [pc, #68]	@ (80033f4 <HAL_TIM_Base_MspInit+0xc4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d115      	bne.n	80033de <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	4a0c      	ldr	r2, [pc, #48]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_TIM_Base_MspInit+0xbc>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	201a      	movs	r0, #26
 80033d4:	f000 fec7 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80033d8:	201a      	movs	r0, #26
 80033da:	f000 fee0 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800

080033f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d12b      	bne.n	8003472 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	4b17      	ldr	r3, [pc, #92]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6413      	str	r3, [r2, #64]	@ 0x40
 800342a:	4b14      	ldr	r3, [pc, #80]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4a0f      	ldr	r2, [pc, #60]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6313      	str	r3, [r2, #48]	@ 0x30
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_TIM_Encoder_MspInit+0x84>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8003452:	2303      	movs	r3, #3
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003462:	2301      	movs	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	4804      	ldr	r0, [pc, #16]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x88>)
 800346e:	f001 fab7 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	@ 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40020000 	.word	0x40020000

08003484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a25      	ldr	r2, [pc, #148]	@ (8003538 <HAL_TIM_MspPostInit+0xb4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d11f      	bne.n	80034e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a23      	ldr	r2, [pc, #140]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b21      	ldr	r3, [pc, #132]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80034c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4818      	ldr	r0, [pc, #96]	@ (8003540 <HAL_TIM_MspPostInit+0xbc>)
 80034e0:	f001 fa7e 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80034e4:	e023      	b.n	800352e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_TIM_MspPostInit+0xc0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d11e      	bne.n	800352e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	4a10      	ldr	r2, [pc, #64]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 80034fa:	f043 0302 	orr.w	r3, r3, #2
 80034fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003500:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_TIM_MspPostInit+0xb8>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 800350c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800351e:	2303      	movs	r3, #3
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	4619      	mov	r1, r3
 8003528:	4807      	ldr	r0, [pc, #28]	@ (8003548 <HAL_TIM_MspPostInit+0xc4>)
 800352a:	f001 fa59 	bl	80049e0 <HAL_GPIO_Init>
}
 800352e:	bf00      	nop
 8003530:	3728      	adds	r7, #40	@ 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000
 8003544:	40014400 	.word	0x40014400
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	@ 0x30
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4d      	ldr	r2, [pc, #308]	@ (80036a0 <HAL_UART_MspInit+0x154>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12c      	bne.n	80035c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	4a4b      	ldr	r2, [pc, #300]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357c:	6413      	str	r3, [r2, #64]	@ 0x40
 800357e:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	4a44      	ldr	r2, [pc, #272]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6313      	str	r3, [r2, #48]	@ 0x30
 800359a:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 80035a6:	230c      	movs	r3, #12
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b2:	2303      	movs	r3, #3
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035b6:	2307      	movs	r3, #7
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	4619      	mov	r1, r3
 80035c0:	4839      	ldr	r0, [pc, #228]	@ (80036a8 <HAL_UART_MspInit+0x15c>)
 80035c2:	f001 fa0d 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035c6:	e066      	b.n	8003696 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART6)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a37      	ldr	r2, [pc, #220]	@ (80036ac <HAL_UART_MspInit+0x160>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d161      	bne.n	8003696 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	4a32      	ldr	r2, [pc, #200]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 80035dc:	f043 0320 	orr.w	r3, r3, #32
 80035e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e2:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b2c      	ldr	r3, [pc, #176]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	4a2b      	ldr	r2, [pc, #172]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <HAL_UART_MspInit+0x158>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800360a:	23c0      	movs	r3, #192	@ 0xc0
 800360c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800361a:	2308      	movs	r3, #8
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	4822      	ldr	r0, [pc, #136]	@ (80036b0 <HAL_UART_MspInit+0x164>)
 8003626:	f001 f9db 	bl	80049e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800362a:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800362c:	4a22      	ldr	r2, [pc, #136]	@ (80036b8 <HAL_UART_MspInit+0x16c>)
 800362e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003630:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003632:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003636:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003638:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800363e:	4b1d      	ldr	r3, [pc, #116]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003644:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003652:	4b18      	ldr	r3, [pc, #96]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003666:	2200      	movs	r2, #0
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800366a:	4812      	ldr	r0, [pc, #72]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800366c:	f000 fdb6 	bl	80041dc <HAL_DMA_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8003676:	f7ff fd35 	bl	80030e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003680:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <HAL_UART_MspInit+0x168>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	2047      	movs	r0, #71	@ 0x47
 800368c:	f000 fd6b 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003690:	2047      	movs	r0, #71	@ 0x47
 8003692:	f000 fd84 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3730      	adds	r7, #48	@ 0x30
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004400 	.word	0x40004400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	2000044c 	.word	0x2000044c
 80036b8:	40026428 	.word	0x40026428

080036bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <NMI_Handler+0x4>

080036c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <HardFault_Handler+0x4>

080036cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <MemManage_Handler+0x4>

080036d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <BusFault_Handler+0x4>

080036dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <UsageFault_Handler+0x4>

080036e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003712:	f000 f991 	bl	8003a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}

0800371a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(External_button_Pin);
 800371e:	2004      	movs	r0, #4
 8003720:	f001 fb2e 	bl	8004d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}

08003728 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800372c:	4802      	ldr	r0, [pc, #8]	@ (8003738 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800372e:	f003 fa77 	bl	8006c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200002a4 	.word	0x200002a4

0800373c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003740:	4803      	ldr	r0, [pc, #12]	@ (8003750 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003742:	f003 fa6d 	bl	8006c20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003746:	4803      	ldr	r0, [pc, #12]	@ (8003754 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003748:	f003 fa6a 	bl	8006c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800374c:	bf00      	nop
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200002a4 	.word	0x200002a4
 8003754:	2000037c 	.word	0x2000037c

08003758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800375c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003760:	f001 fb0e 	bl	8004d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <DMA2_Stream1_IRQHandler+0x10>)
 800376e:	f000 fecd 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000044c 	.word	0x2000044c

0800377c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <USART6_IRQHandler+0x10>)
 8003782:	f004 f9eb 	bl	8007b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000408 	.word	0x20000408

08003790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_kill>:

int _kill(int pid, int sig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037aa:	f007 fb75 	bl	800ae98 <__errno>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2216      	movs	r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
  return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_exit>:

void _exit (int status)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffe7 	bl	80037a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <_exit+0x12>

080037d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e00a      	b.n	80037fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037e8:	f3af 8000 	nop.w
 80037ec:	4601      	mov	r1, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	60ba      	str	r2, [r7, #8]
 80037f4:	b2ca      	uxtb	r2, r1
 80037f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbf0      	blt.n	80037e8 <_read+0x12>
  }

  return len;
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e009      	b.n	8003836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	60ba      	str	r2, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f93e 	bl	8002aac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	dbf1      	blt.n	8003822 <_write+0x12>
  }
  return len;
 800383e:	687b      	ldr	r3, [r7, #4]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_close>:

int _close(int file)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003870:	605a      	str	r2, [r3, #4]
  return 0;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_isatty>:

int _isatty(int file)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003888:	2301      	movs	r3, #1
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	@ (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	@ (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f007 fada 	bl	800ae98 <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20018000 	.word	0x20018000
 8003910:	00000400 	.word	0x00000400
 8003914:	200006b8 	.word	0x200006b8
 8003918:	20000810 	.word	0x20000810

0800391c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <SystemInit+0x20>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	4a05      	ldr	r2, [pc, #20]	@ (800393c <SystemInit+0x20>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800392c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003944:	480d      	ldr	r0, [pc, #52]	@ (800397c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003946:	490e      	ldr	r1, [pc, #56]	@ (8003980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003948:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800394c:	e002      	b.n	8003954 <LoopCopyDataInit>

0800394e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003952:	3304      	adds	r3, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003958:	d3f9      	bcc.n	800394e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800395a:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800395c:	4c0b      	ldr	r4, [pc, #44]	@ (800398c <LoopFillZerobss+0x26>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003960:	e001      	b.n	8003966 <LoopFillZerobss>

08003962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003964:	3204      	adds	r2, #4

08003966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003968:	d3fb      	bcc.n	8003962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800396a:	f7ff ffd7 	bl	800391c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800396e:	f007 fa99 	bl	800aea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003972:	f7fe f955 	bl	8001c20 <main>
  bx  lr    
 8003976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003978:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800397c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003980:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003984:	0800dea4 	.word	0x0800dea4
  ldr r2, =_sbss
 8003988:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800398c:	2000080c 	.word	0x2000080c

08003990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003990:	e7fe      	b.n	8003990 <ADC_IRQHandler>
	...

08003994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003998:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_Init+0x40>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	@ (80039d4 <HAL_Init+0x40>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b0:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <HAL_Init+0x40>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 fbc7 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f808 	bl	80039d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c8:	f7ff fbfe 	bl	80031c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_InitTick+0x54>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <HAL_InitTick+0x58>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fbe3 	bl	80041c2 <HAL_SYSTICK_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00e      	b.n	8003a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d80a      	bhi.n	8003a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	f000 fba7 	bl	8004166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a18:	4a06      	ldr	r2, [pc, #24]	@ (8003a34 <HAL_InitTick+0x5c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000014 	.word	0x20000014
 8003a30:	2000001c 	.word	0x2000001c
 8003a34:	20000018 	.word	0x20000018

08003a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_IncTick+0x20>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_IncTick+0x24>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <HAL_IncTick+0x24>)
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000001c 	.word	0x2000001c
 8003a5c:	200006bc 	.word	0x200006bc

08003a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return uwTick;
 8003a64:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <HAL_GetTick+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	200006bc 	.word	0x200006bc

08003a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff ffee 	bl	8003a60 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d005      	beq.n	8003a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <HAL_Delay+0x44>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a9e:	bf00      	nop
 8003aa0:	f7ff ffde 	bl	8003a60 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d8f7      	bhi.n	8003aa0 <HAL_Delay+0x28>
  {
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2000001c 	.word	0x2000001c

08003ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e033      	b.n	8003b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fb9a 	bl	8003218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b06:	f023 0302 	bic.w	r3, r3, #2
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f93a 	bl	8003d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b2e:	e001      	b.n	8003b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e105      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x228>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	d925      	bls.n	8003bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	3b1e      	subs	r3, #30
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43da      	mvns	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	400a      	ands	r2, r1
 8003b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4618      	mov	r0, r3
 8003bac:	4603      	mov	r3, r0
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4403      	add	r3, r0
 8003bb2:	3b1e      	subs	r3, #30
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	e022      	b.n	8003c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6919      	ldr	r1, [r3, #16]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	400a      	ands	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4403      	add	r3, r0
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d824      	bhi.n	8003c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b05      	subs	r3, #5
 8003c20:	221f      	movs	r2, #31
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	3b05      	subs	r3, #5
 8003c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c56:	e04c      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d824      	bhi.n	8003caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b23      	subs	r3, #35	@ 0x23
 8003c72:	221f      	movs	r2, #31
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	400a      	ands	r2, r1
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	3b23      	subs	r3, #35	@ 0x23
 8003c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca8:	e023      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	3b41      	subs	r3, #65	@ 0x41
 8003cbc:	221f      	movs	r2, #31
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	400a      	ands	r2, r1
 8003cca:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3b41      	subs	r3, #65	@ 0x41
 8003ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	@ (8003d7c <HAL_ADC_ConfigChannel+0x234>)
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_ADC_ConfigChannel+0x238>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d109      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x1cc>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b12      	cmp	r3, #18
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_ADC_ConfigChannel+0x238>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d123      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x21e>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d003      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x1e6>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b11      	cmp	r3, #17
 8003d2c:	d11b      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d111      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_ADC_ConfigChannel+0x23c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a10      	ldr	r2, [pc, #64]	@ (8003d88 <HAL_ADC_ConfigChannel+0x240>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0c9a      	lsrs	r2, r3, #18
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d58:	e002      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f9      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40012300 	.word	0x40012300
 8003d80:	40012000 	.word	0x40012000
 8003d84:	20000014 	.word	0x20000014
 8003d88:	431bde83 	.word	0x431bde83

08003d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d94:	4b79      	ldr	r3, [pc, #484]	@ (8003f7c <ADC_Init+0x1f0>)
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	4a58      	ldr	r2, [pc, #352]	@ (8003f80 <ADC_Init+0x1f4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d022      	beq.n	8003e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6899      	ldr	r1, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	e00f      	b.n	8003e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0202 	bic.w	r2, r2, #2
 8003e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7e1b      	ldrb	r3, [r3, #24]
 8003ea4:	005a      	lsls	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01b      	beq.n	8003ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	035a      	lsls	r2, r3, #13
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e007      	b.n	8003f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	051a      	lsls	r2, r3, #20
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6899      	ldr	r1, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f42:	025a      	lsls	r2, r3, #9
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	029a      	lsls	r2, r3, #10
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012300 	.word	0x40012300
 8003f80:	0f000001 	.word	0x0f000001

08003f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f94:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	@ (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0307 	and.w	r3, r3, #7
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db0b      	blt.n	8004012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4907      	ldr	r1, [pc, #28]	@ (8004020 <__NVIC_EnableIRQ+0x38>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2001      	movs	r0, #1
 800400a:	fa00 f202 	lsl.w	r2, r0, r2
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db0a      	blt.n	800404e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	490c      	ldr	r1, [pc, #48]	@ (8004070 <__NVIC_SetPriority+0x4c>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	440b      	add	r3, r1
 8004048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800404c:	e00a      	b.n	8004064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4908      	ldr	r1, [pc, #32]	@ (8004074 <__NVIC_SetPriority+0x50>)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3b04      	subs	r3, #4
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	440b      	add	r3, r1
 8004062:	761a      	strb	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	@ 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf28      	it	cs
 8004096:	2304      	movcs	r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3304      	adds	r3, #4
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d902      	bls.n	80040a8 <NVIC_EncodePriority+0x30>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3b03      	subs	r3, #3
 80040a6:	e000      	b.n	80040aa <NVIC_EncodePriority+0x32>
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c0:	f04f 31ff 	mov.w	r1, #4294967295
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	4313      	orrs	r3, r2
         );
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	@ 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040e4:	f3bf 8f4f 	dsb	sy
}
 80040e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <__NVIC_SystemReset+0x24>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80040f2:	4904      	ldr	r1, [pc, #16]	@ (8004104 <__NVIC_SystemReset+0x24>)
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <__NVIC_SystemReset+0x28>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040fa:	f3bf 8f4f 	dsb	sy
}
 80040fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <__NVIC_SystemReset+0x20>
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	05fa0004 	.word	0x05fa0004

0800410c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800411c:	d301      	bcc.n	8004122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004122:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <SysTick_Config+0x40>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800412a:	210f      	movs	r1, #15
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f7ff ff78 	bl	8004024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <SysTick_Config+0x40>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800413a:	4b04      	ldr	r3, [pc, #16]	@ (800414c <SysTick_Config+0x40>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff13 	bl	8003f84 <__NVIC_SetPriorityGrouping>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004178:	f7ff ff28 	bl	8003fcc <__NVIC_GetPriorityGrouping>
 800417c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff ff78 	bl	8004078 <NVIC_EncodePriority>
 8004188:	4602      	mov	r2, r0
 800418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff47 	bl	8004024 <__NVIC_SetPriority>
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff1b 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80041be:	f7ff ff8f 	bl	80040e0 <__NVIC_SystemReset>

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff9e 	bl	800410c <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7ff fc3a 	bl	8003a60 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e099      	b.n	800432c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004218:	e00f      	b.n	800423a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800421a:	f7ff fc21 	bl	8003a60 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b05      	cmp	r3, #5
 8004226:	d908      	bls.n	800423a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e078      	b.n	800432c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e8      	bne.n	800421a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4b38      	ldr	r3, [pc, #224]	@ (8004334 <HAL_DMA_Init+0x158>)
 8004254:	4013      	ands	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	4313      	orrs	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d117      	bne.n	80042fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb01 	bl	80048e8 <DMA_CheckFifoParam>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	@ 0x40
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80042fa:	2301      	movs	r3, #1
 80042fc:	e016      	b.n	800432c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fab8 	bl	800487c <DMA_CalcBaseAndBitshift>
 800430c:	4603      	mov	r3, r0
 800430e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004314:	223f      	movs	r2, #63	@ 0x3f
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f010803f 	.word	0xf010803f

08004338 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_DMA_Start_IT+0x26>
 800435a:	2302      	movs	r3, #2
 800435c:	e040      	b.n	80043e0 <HAL_DMA_Start_IT+0xa8>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d12f      	bne.n	80043d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa4a 	bl	8004820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	223f      	movs	r2, #63	@ 0x3f
 8004392:	409a      	lsls	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0216 	orr.w	r2, r2, #22
 80043a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f6:	f7ff fb33 	bl	8003a60 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d008      	beq.n	800441a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e052      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0216 	bic.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_DMA_Abort+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	e013      	b.n	8004494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446c:	f7ff faf8 	bl	8003a60 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d90c      	bls.n	8004494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2203      	movs	r2, #3
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e015      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	223f      	movs	r2, #63	@ 0x3f
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00c      	b.n	8004500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004518:	4b8e      	ldr	r3, [pc, #568]	@ (8004754 <HAL_DMA_IRQHandler+0x248>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a8e      	ldr	r2, [pc, #568]	@ (8004758 <HAL_DMA_IRQHandler+0x24c>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	2208      	movs	r2, #8
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01a      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	2208      	movs	r2, #8
 8004566:	409a      	lsls	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	f043 0202 	orr.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	2204      	movs	r2, #4
 80045d2:	409a      	lsls	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	2210      	movs	r2, #16
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d043      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03c      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	2210      	movs	r2, #16
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d024      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	e01f      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
 800464c:	e016      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0208 	bic.w	r2, r2, #8
 800466a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	2220      	movs	r2, #32
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 808f 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8087 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a2:	2220      	movs	r2, #32
 80046a4:	409a      	lsls	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d136      	bne.n	8004724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x1da>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	223f      	movs	r2, #63	@ 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d07e      	beq.n	8004818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
        }
        return;
 8004722:	e079      	b.n	8004818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	2b00      	cmp	r3, #0
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	e02c      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
 8004752:	bf00      	nop
 8004754:	20000014 	.word	0x20000014
 8004758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
 800476c:	e01e      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10f      	bne.n	800479c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0210 	bic.w	r2, r2, #16
 800478a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d032      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2205      	movs	r2, #5
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d307      	bcc.n	80047f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <HAL_DMA_IRQHandler+0x2cc>
 80047f2:	e000      	b.n	80047f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004818:	bf00      	nop
    }
  }
}
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800483c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d108      	bne.n	8004860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800485e:	e007      	b.n	8004870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3b10      	subs	r3, #16
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <DMA_CalcBaseAndBitshift+0x64>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004896:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d909      	bls.n	80048be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80048bc:	e007      	b.n	80048ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	aaaaaaab 	.word	0xaaaaaaab
 80048e4:	0800da00 	.word	0x0800da00

080048e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11f      	bne.n	8004942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d856      	bhi.n	80049b6 <DMA_CheckFifoParam+0xce>
 8004908:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <DMA_CheckFifoParam+0x28>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004921 	.word	0x08004921
 8004914:	08004933 	.word	0x08004933
 8004918:	08004921 	.word	0x08004921
 800491c:	080049b7 	.word	0x080049b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d046      	beq.n	80049ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e043      	b.n	80049ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800493a:	d140      	bne.n	80049be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004940:	e03d      	b.n	80049be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494a:	d121      	bne.n	8004990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d837      	bhi.n	80049c2 <DMA_CheckFifoParam+0xda>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <DMA_CheckFifoParam+0x70>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	0800496f 	.word	0x0800496f
 8004960:	08004969 	.word	0x08004969
 8004964:	08004981 	.word	0x08004981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e030      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d025      	beq.n	80049c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e022      	b.n	80049c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004988:	d11f      	bne.n	80049ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800498e:	e01c      	b.n	80049ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d903      	bls.n	800499e <DMA_CheckFifoParam+0xb6>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d003      	beq.n	80049a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800499c:	e018      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      break;
 80049a2:	e015      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e00b      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049b6:	bf00      	nop
 80049b8:	e00a      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ba:	bf00      	nop
 80049bc:	e008      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049be:	bf00      	nop
 80049c0:	e006      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c2:	bf00      	nop
 80049c4:	e004      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
    }
  } 
  
  return status; 
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	@ 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e159      	b.n	8004cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049fc:	2201      	movs	r2, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f040 8148 	bne.w	8004caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d005      	beq.n	8004a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d130      	bne.n	8004a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 0201 	and.w	r2, r3, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d017      	beq.n	8004ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d123      	bne.n	8004b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3208      	adds	r2, #8
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	220f      	movs	r2, #15
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	08da      	lsrs	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3208      	adds	r2, #8
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a2 	beq.w	8004caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	4b57      	ldr	r3, [pc, #348]	@ (8004cc8 <HAL_GPIO_Init+0x2e8>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	4a56      	ldr	r2, [pc, #344]	@ (8004cc8 <HAL_GPIO_Init+0x2e8>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b76:	4b54      	ldr	r3, [pc, #336]	@ (8004cc8 <HAL_GPIO_Init+0x2e8>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b82:	4a52      	ldr	r2, [pc, #328]	@ (8004ccc <HAL_GPIO_Init+0x2ec>)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3302      	adds	r3, #2
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	220f      	movs	r2, #15
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a49      	ldr	r2, [pc, #292]	@ (8004cd0 <HAL_GPIO_Init+0x2f0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d019      	beq.n	8004be2 <HAL_GPIO_Init+0x202>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a48      	ldr	r2, [pc, #288]	@ (8004cd4 <HAL_GPIO_Init+0x2f4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_GPIO_Init+0x1fe>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a47      	ldr	r2, [pc, #284]	@ (8004cd8 <HAL_GPIO_Init+0x2f8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00d      	beq.n	8004bda <HAL_GPIO_Init+0x1fa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a46      	ldr	r2, [pc, #280]	@ (8004cdc <HAL_GPIO_Init+0x2fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <HAL_GPIO_Init+0x1f6>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a45      	ldr	r2, [pc, #276]	@ (8004ce0 <HAL_GPIO_Init+0x300>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_GPIO_Init+0x1f2>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	e008      	b.n	8004be4 <HAL_GPIO_Init+0x204>
 8004bd2:	2307      	movs	r3, #7
 8004bd4:	e006      	b.n	8004be4 <HAL_GPIO_Init+0x204>
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e004      	b.n	8004be4 <HAL_GPIO_Init+0x204>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e002      	b.n	8004be4 <HAL_GPIO_Init+0x204>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_GPIO_Init+0x204>
 8004be2:	2300      	movs	r3, #0
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	f002 0203 	and.w	r2, r2, #3
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	4093      	lsls	r3, r2
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bf4:	4935      	ldr	r1, [pc, #212]	@ (8004ccc <HAL_GPIO_Init+0x2ec>)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c02:	4b38      	ldr	r3, [pc, #224]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c26:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c50:	4a24      	ldr	r2, [pc, #144]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c56:	4b23      	ldr	r3, [pc, #140]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c80:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce4 <HAL_GPIO_Init+0x304>)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3301      	adds	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b0f      	cmp	r3, #15
 8004cb4:	f67f aea2 	bls.w	80049fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3724      	adds	r7, #36	@ 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40020800 	.word	0x40020800
 8004cdc:	40020c00 	.word	0x40020c00
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40013c00 	.word	0x40013c00

08004ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	e001      	b.n	8004d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	807b      	strh	r3, [r7, #2]
 8004d24:	4613      	mov	r3, r2
 8004d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d28:	787b      	ldrb	r3, [r7, #1]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d34:	e003      	b.n	8004d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	041a      	lsls	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	619a      	str	r2, [r3, #24]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d5c:	887a      	ldrh	r2, [r7, #2]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4013      	ands	r3, r2
 8004d62:	041a      	lsls	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43d9      	mvns	r1, r3
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	619a      	str	r2, [r3, #24]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d96:	4a05      	ldr	r2, [pc, #20]	@ (8004dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fea0 	bl	8002ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40013c00 	.word	0x40013c00

08004db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e12b      	b.n	800501a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe fa62 	bl	80032a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e14:	f001 fbec 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4a81      	ldr	r2, [pc, #516]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d807      	bhi.n	8004e34 <HAL_I2C_Init+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a80      	ldr	r2, [pc, #512]	@ (8005028 <HAL_I2C_Init+0x278>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bf94      	ite	ls
 8004e2c:	2301      	movls	r3, #1
 8004e2e:	2300      	movhi	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e006      	b.n	8004e42 <HAL_I2C_Init+0x92>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a7d      	ldr	r2, [pc, #500]	@ (800502c <HAL_I2C_Init+0x27c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bf94      	ite	ls
 8004e3c:	2301      	movls	r3, #1
 8004e3e:	2300      	movhi	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0e7      	b.n	800501a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a78      	ldr	r2, [pc, #480]	@ (8005030 <HAL_I2C_Init+0x280>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0c9b      	lsrs	r3, r3, #18
 8004e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a6a      	ldr	r2, [pc, #424]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <HAL_I2C_Init+0xd4>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	e009      	b.n	8004e98 <HAL_I2C_Init+0xe8>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	4a69      	ldr	r2, [pc, #420]	@ (8005034 <HAL_I2C_Init+0x284>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	3301      	adds	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	495c      	ldr	r1, [pc, #368]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d819      	bhi.n	8004eec <HAL_I2C_Init+0x13c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e59      	subs	r1, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ecc:	400b      	ands	r3, r1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_I2C_Init+0x138>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1e59      	subs	r1, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee6:	e051      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e04f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d111      	bne.n	8004f18 <HAL_I2C_Init+0x168>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1e58      	subs	r0, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	440b      	add	r3, r1
 8004f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f06:	3301      	adds	r3, #1
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e012      	b.n	8004f3e <HAL_I2C_Init+0x18e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	0099      	lsls	r1, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Init+0x196>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e022      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10e      	bne.n	8004f6c <HAL_I2C_Init+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1e58      	subs	r0, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	440b      	add	r3, r1
 8004f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6a:	e00f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e58      	subs	r0, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	0099      	lsls	r1, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	6809      	ldr	r1, [r1, #0]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6911      	ldr	r1, [r2, #16]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	000186a0 	.word	0x000186a0
 8005028:	001e847f 	.word	0x001e847f
 800502c:	003d08ff 	.word	0x003d08ff
 8005030:	431bde83 	.word	0x431bde83
 8005034:	10624dd3 	.word	0x10624dd3

08005038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	460b      	mov	r3, r1
 8005046:	817b      	strh	r3, [r7, #10]
 8005048:	4613      	mov	r3, r2
 800504a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800504c:	f7fe fd08 	bl	8003a60 <HAL_GetTick>
 8005050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b20      	cmp	r3, #32
 800505c:	f040 80e0 	bne.w	8005220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2319      	movs	r3, #25
 8005066:	2201      	movs	r2, #1
 8005068:	4970      	ldr	r1, [pc, #448]	@ (800522c <HAL_I2C_Master_Transmit+0x1f4>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fc72 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
 8005078:	e0d3      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_I2C_Master_Transmit+0x50>
 8005084:	2302      	movs	r3, #2
 8005086:	e0cc      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d007      	beq.n	80050ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2221      	movs	r2, #33	@ 0x21
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2210      	movs	r2, #16
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	893a      	ldrh	r2, [r7, #8]
 80050de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a50      	ldr	r2, [pc, #320]	@ (8005230 <HAL_I2C_Master_Transmit+0x1f8>)
 80050ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050f0:	8979      	ldrh	r1, [r7, #10]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fadc 	bl	80056b4 <I2C_MasterRequestWrite>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e08d      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800511c:	e066      	b.n	80051ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	6a39      	ldr	r1, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fcec 	bl	8005b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	2b04      	cmp	r3, #4
 8005134:	d107      	bne.n	8005146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e06b      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_I2C_Master_Transmit+0x188>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d017      	beq.n	80051c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	6a39      	ldr	r1, [r7, #32]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fcdc 	bl	8005b82 <I2C_WaitOnBTFFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d107      	bne.n	80051e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e01a      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d194      	bne.n	800511e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e000      	b.n	8005222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	00100002 	.word	0x00100002
 8005230:	ffff0000 	.word	0xffff0000

08005234 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	@ 0x30
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	461a      	mov	r2, r3
 8005240:	460b      	mov	r3, r1
 8005242:	817b      	strh	r3, [r7, #10]
 8005244:	4613      	mov	r3, r2
 8005246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005248:	f7fe fc0a 	bl	8003a60 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b20      	cmp	r3, #32
 8005258:	f040 820b 	bne.w	8005672 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2319      	movs	r3, #25
 8005262:	2201      	movs	r2, #1
 8005264:	497c      	ldr	r1, [pc, #496]	@ (8005458 <HAL_I2C_Master_Receive+0x224>)
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fb74 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
 8005274:	e1fe      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_I2C_Master_Receive+0x50>
 8005280:	2302      	movs	r3, #2
 8005282:	e1f7      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d007      	beq.n	80052aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2222      	movs	r2, #34	@ 0x22
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2210      	movs	r2, #16
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	893a      	ldrh	r2, [r7, #8]
 80052da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a5c      	ldr	r2, [pc, #368]	@ (800545c <HAL_I2C_Master_Receive+0x228>)
 80052ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fa60 	bl	80057b8 <I2C_MasterRequestRead>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e1b8      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d113      	bne.n	8005332 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	623b      	str	r3, [r7, #32]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e18c      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	2b01      	cmp	r3, #1
 8005338:	d11b      	bne.n	8005372 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e16c      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005376:	2b02      	cmp	r3, #2
 8005378:	d11b      	bne.n	80053b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005388:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	e14c      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053d8:	e138      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053de:	2b03      	cmp	r3, #3
 80053e0:	f200 80f1 	bhi.w	80055c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d123      	bne.n	8005434 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fc07 	bl	8005c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e139      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005432:	e10b      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005438:	2b02      	cmp	r3, #2
 800543a:	d14e      	bne.n	80054da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2200      	movs	r2, #0
 8005444:	4906      	ldr	r1, [pc, #24]	@ (8005460 <HAL_I2C_Master_Receive+0x22c>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa84 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e10e      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
 8005456:	bf00      	nop
 8005458:	00100002 	.word	0x00100002
 800545c:	ffff0000 	.word	0xffff0000
 8005460:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054d8:	e0b8      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	4966      	ldr	r1, [pc, #408]	@ (800567c <HAL_I2C_Master_Receive+0x448>)
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fa35 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0bf      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	494f      	ldr	r1, [pc, #316]	@ (800567c <HAL_I2C_Master_Receive+0x448>)
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fa07 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e091      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055c4:	e042      	b.n	800564c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fb1a 	bl	8005c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e04c      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d118      	bne.n	800564c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	f47f aec2 	bne.w	80053da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3728      	adds	r7, #40	@ 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	00010004 	.word	0x00010004

08005680 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568e:	b2db      	uxtb	r3, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d006      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d003      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056dc:	d108      	bne.n	80056f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e00b      	b.n	8005708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	2b12      	cmp	r3, #18
 80056f6:	d107      	bne.n	8005708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f91d 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572e:	d103      	bne.n	8005738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e035      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005744:	d108      	bne.n	8005758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	e01b      	b.n	8005790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005758:	897b      	ldrh	r3, [r7, #10]
 800575a:	11db      	asrs	r3, r3, #7
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0306 	and.w	r3, r3, #6
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f063 030f 	orn	r3, r3, #15
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	490e      	ldr	r1, [pc, #56]	@ (80057b0 <I2C_MasterRequestWrite+0xfc>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f943 	bl	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e010      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4907      	ldr	r1, [pc, #28]	@ (80057b4 <I2C_MasterRequestWrite+0x100>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f933 	bl	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010008 	.word	0x00010008
 80057b4:	00010002 	.word	0x00010002

080057b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	460b      	mov	r3, r1
 80057c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d006      	beq.n	80057f2 <I2C_MasterRequestRead+0x3a>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d003      	beq.n	80057f2 <I2C_MasterRequestRead+0x3a>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057f0:	d108      	bne.n	8005804 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e00b      	b.n	800581c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	2b11      	cmp	r3, #17
 800580a:	d107      	bne.n	800581c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800581a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f893 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005842:	d103      	bne.n	800584c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e079      	b.n	8005944 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005858:	d108      	bne.n	800586c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	611a      	str	r2, [r3, #16]
 800586a:	e05f      	b.n	800592c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800586c:	897b      	ldrh	r3, [r7, #10]
 800586e:	11db      	asrs	r3, r3, #7
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f063 030f 	orn	r3, r3, #15
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4930      	ldr	r1, [pc, #192]	@ (800594c <I2C_MasterRequestRead+0x194>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8b9 	bl	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e054      	b.n	8005944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4929      	ldr	r1, [pc, #164]	@ (8005950 <I2C_MasterRequestRead+0x198>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8a9 	bl	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e044      	b.n	8005944 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f831 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005906:	d103      	bne.n	8005910 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e017      	b.n	8005944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	11db      	asrs	r3, r3, #7
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 0306 	and.w	r3, r3, #6
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f063 030e 	orn	r3, r3, #14
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4907      	ldr	r1, [pc, #28]	@ (8005950 <I2C_MasterRequestRead+0x198>)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f865 	bl	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	00010008 	.word	0x00010008
 8005950:	00010002 	.word	0x00010002

08005954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005964:	e025      	b.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d021      	beq.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fe f877 	bl	8003a60 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d116      	bne.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e023      	b.n	80059fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10d      	bne.n	80059d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	43da      	mvns	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	e00c      	b.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	43da      	mvns	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d0b6      	beq.n	8005966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a10:	e051      	b.n	8005ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a20:	d123      	bne.n	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e046      	b.n	8005af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d021      	beq.n	8005ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fd fff5 	bl	8003a60 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d116      	bne.n	8005ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e020      	b.n	8005af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10c      	bne.n	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	2301      	movne	r3, #1
 8005ad4:	2300      	moveq	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	e00b      	b.n	8005af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	43da      	mvns	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d18d      	bne.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b0c:	e02d      	b.n	8005b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f8ce 	bl	8005cb0 <I2C_IsAcknowledgeFailed>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e02d      	b.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d021      	beq.n	8005b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b26:	f7fd ff9b 	bl	8003a60 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d302      	bcc.n	8005b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d116      	bne.n	8005b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e007      	b.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b74:	2b80      	cmp	r3, #128	@ 0x80
 8005b76:	d1ca      	bne.n	8005b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b8e:	e02d      	b.n	8005bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f88d 	bl	8005cb0 <I2C_IsAcknowledgeFailed>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e02d      	b.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d021      	beq.n	8005bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	f7fd ff5a 	bl	8003a60 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d116      	bne.n	8005bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	f043 0220 	orr.w	r2, r3, #32
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e007      	b.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d1ca      	bne.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c10:	e042      	b.n	8005c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d119      	bne.n	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0210 	mvn.w	r2, #16
 8005c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e029      	b.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c54:	f7fd ff04 	bl	8003a60 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d116      	bne.n	8005c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e007      	b.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d1b5      	bne.n	8005c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc6:	d11b      	bne.n	8005d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	f043 0204 	orr.w	r2, r3, #4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e267      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d075      	beq.n	8005e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d2e:	4b88      	ldr	r3, [pc, #544]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d00c      	beq.n	8005d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3a:	4b85      	ldr	r3, [pc, #532]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d112      	bne.n	8005d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d46:	4b82      	ldr	r3, [pc, #520]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	4b7e      	ldr	r3, [pc, #504]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05b      	beq.n	8005e18 <HAL_RCC_OscConfig+0x108>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d157      	bne.n	8005e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e242      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x74>
 8005d76:	4b76      	ldr	r3, [pc, #472]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a75      	ldr	r2, [pc, #468]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e01d      	b.n	8005dc0 <HAL_RCC_OscConfig+0xb0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x98>
 8005d8e:	4b70      	ldr	r3, [pc, #448]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a6f      	ldr	r2, [pc, #444]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6c      	ldr	r2, [pc, #432]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e00b      	b.n	8005dc0 <HAL_RCC_OscConfig+0xb0>
 8005da8:	4b69      	ldr	r3, [pc, #420]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a68      	ldr	r2, [pc, #416]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b66      	ldr	r3, [pc, #408]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a65      	ldr	r2, [pc, #404]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fe4a 	bl	8003a60 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fd fe46 	bl	8003a60 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	@ 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e207      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xc0>
 8005dee:	e014      	b.n	8005e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fd fe36 	bl	8003a60 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fd fe32 	bl	8003a60 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	@ 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1f3      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	4b51      	ldr	r3, [pc, #324]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0xe8>
 8005e16:	e000      	b.n	8005e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d063      	beq.n	8005eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e26:	4b4a      	ldr	r3, [pc, #296]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e32:	4b47      	ldr	r3, [pc, #284]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d11c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3e:	4b44      	ldr	r3, [pc, #272]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d116      	bne.n	8005e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4a:	4b41      	ldr	r3, [pc, #260]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_RCC_OscConfig+0x152>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d001      	beq.n	8005e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e1c7      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e62:	4b3b      	ldr	r3, [pc, #236]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4937      	ldr	r1, [pc, #220]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	e03a      	b.n	8005eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e80:	4b34      	ldr	r3, [pc, #208]	@ (8005f54 <HAL_RCC_OscConfig+0x244>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e86:	f7fd fdeb 	bl	8003a60 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8e:	f7fd fde7 	bl	8003a60 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e1a8      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eac:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4925      	ldr	r1, [pc, #148]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
 8005ec0:	e015      	b.n	8005eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec2:	4b24      	ldr	r3, [pc, #144]	@ (8005f54 <HAL_RCC_OscConfig+0x244>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fdca 	bl	8003a60 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fd fdc6 	bl	8003a60 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e187      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d036      	beq.n	8005f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f02:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <HAL_RCC_OscConfig+0x248>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fd fdaa 	bl	8003a60 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f10:	f7fd fda6 	bl	8003a60 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e167      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f22:	4b0b      	ldr	r3, [pc, #44]	@ (8005f50 <HAL_RCC_OscConfig+0x240>)
 8005f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x200>
 8005f2e:	e01b      	b.n	8005f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f30:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <HAL_RCC_OscConfig+0x248>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f36:	f7fd fd93 	bl	8003a60 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	e00e      	b.n	8005f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3e:	f7fd fd8f 	bl	8003a60 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d907      	bls.n	8005f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e150      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
 8005f50:	40023800 	.word	0x40023800
 8005f54:	42470000 	.word	0x42470000
 8005f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f5c:	4b88      	ldr	r3, [pc, #544]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1ea      	bne.n	8005f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8097 	beq.w	80060a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f7a:	4b81      	ldr	r3, [pc, #516]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f96:	4b7a      	ldr	r3, [pc, #488]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa6:	4b77      	ldr	r3, [pc, #476]	@ (8006184 <HAL_RCC_OscConfig+0x474>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d118      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb2:	4b74      	ldr	r3, [pc, #464]	@ (8006184 <HAL_RCC_OscConfig+0x474>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a73      	ldr	r2, [pc, #460]	@ (8006184 <HAL_RCC_OscConfig+0x474>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fbe:	f7fd fd4f 	bl	8003a60 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc6:	f7fd fd4b 	bl	8003a60 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e10c      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006184 <HAL_RCC_OscConfig+0x474>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d106      	bne.n	8005ffa <HAL_RCC_OscConfig+0x2ea>
 8005fec:	4b64      	ldr	r3, [pc, #400]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff0:	4a63      	ldr	r2, [pc, #396]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff8:	e01c      	b.n	8006034 <HAL_RCC_OscConfig+0x324>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d10c      	bne.n	800601c <HAL_RCC_OscConfig+0x30c>
 8006002:	4b5f      	ldr	r3, [pc, #380]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006006:	4a5e      	ldr	r2, [pc, #376]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006008:	f043 0304 	orr.w	r3, r3, #4
 800600c:	6713      	str	r3, [r2, #112]	@ 0x70
 800600e:	4b5c      	ldr	r3, [pc, #368]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006012:	4a5b      	ldr	r2, [pc, #364]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	6713      	str	r3, [r2, #112]	@ 0x70
 800601a:	e00b      	b.n	8006034 <HAL_RCC_OscConfig+0x324>
 800601c:	4b58      	ldr	r3, [pc, #352]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	4a57      	ldr	r2, [pc, #348]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006022:	f023 0301 	bic.w	r3, r3, #1
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	4b55      	ldr	r3, [pc, #340]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602c:	4a54      	ldr	r2, [pc, #336]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800602e:	f023 0304 	bic.w	r3, r3, #4
 8006032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d015      	beq.n	8006068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603c:	f7fd fd10 	bl	8003a60 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006042:	e00a      	b.n	800605a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fd fd0c 	bl	8003a60 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0cb      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605a:	4b49      	ldr	r3, [pc, #292]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0ee      	beq.n	8006044 <HAL_RCC_OscConfig+0x334>
 8006066:	e014      	b.n	8006092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006068:	f7fd fcfa 	bl	8003a60 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7fd fcf6 	bl	8003a60 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0b5      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006086:	4b3e      	ldr	r3, [pc, #248]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1ee      	bne.n	8006070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d105      	bne.n	80060a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006098:	4b39      	ldr	r3, [pc, #228]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	4a38      	ldr	r2, [pc, #224]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800609e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80a1 	beq.w	80061f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ae:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d05c      	beq.n	8006174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d141      	bne.n	8006146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <HAL_RCC_OscConfig+0x478>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fd fcca 	bl	8003a60 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d0:	f7fd fcc6 	bl	8003a60 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e087      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e2:	4b27      	ldr	r3, [pc, #156]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	3b01      	subs	r3, #1
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	491b      	ldr	r1, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006114:	4313      	orrs	r3, r2
 8006116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <HAL_RCC_OscConfig+0x478>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611e:	f7fd fc9f 	bl	8003a60 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006126:	f7fd fc9b 	bl	8003a60 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e05c      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f0      	beq.n	8006126 <HAL_RCC_OscConfig+0x416>
 8006144:	e054      	b.n	80061f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006146:	4b10      	ldr	r3, [pc, #64]	@ (8006188 <HAL_RCC_OscConfig+0x478>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614c:	f7fd fc88 	bl	8003a60 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006154:	f7fd fc84 	bl	8003a60 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e045      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <HAL_RCC_OscConfig+0x470>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x444>
 8006172:	e03d      	b.n	80061f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e038      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
 8006180:	40023800 	.word	0x40023800
 8006184:	40007000 	.word	0x40007000
 8006188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800618c:	4b1b      	ldr	r3, [pc, #108]	@ (80061fc <HAL_RCC_OscConfig+0x4ec>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d028      	beq.n	80061ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d121      	bne.n	80061ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d11a      	bne.n	80061ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d111      	bne.n	80061ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	3b01      	subs	r3, #1
 80061d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d107      	bne.n	80061ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d001      	beq.n	80061f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40023800 	.word	0x40023800

08006200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0cc      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006214:	4b68      	ldr	r3, [pc, #416]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d90c      	bls.n	800623c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b65      	ldr	r3, [pc, #404]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b63      	ldr	r3, [pc, #396]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d001      	beq.n	800623c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0b8      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d020      	beq.n	800628a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006254:	4b59      	ldr	r3, [pc, #356]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4a58      	ldr	r2, [pc, #352]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800625e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800626c:	4b53      	ldr	r3, [pc, #332]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4a52      	ldr	r2, [pc, #328]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006278:	4b50      	ldr	r3, [pc, #320]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	494d      	ldr	r1, [pc, #308]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	4313      	orrs	r3, r2
 8006288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d044      	beq.n	8006320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629e:	4b47      	ldr	r3, [pc, #284]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d119      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e07f      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d003      	beq.n	80062be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062be:	4b3f      	ldr	r3, [pc, #252]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e06f      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ce:	4b3b      	ldr	r3, [pc, #236]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e067      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062de:	4b37      	ldr	r3, [pc, #220]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f023 0203 	bic.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	4934      	ldr	r1, [pc, #208]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062f0:	f7fd fbb6 	bl	8003a60 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f6:	e00a      	b.n	800630e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f8:	f7fd fbb2 	bl	8003a60 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e04f      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	4b2b      	ldr	r3, [pc, #172]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 020c 	and.w	r2, r3, #12
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	429a      	cmp	r2, r3
 800631e:	d1eb      	bne.n	80062f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006320:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d20c      	bcs.n	8006348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b22      	ldr	r3, [pc, #136]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006336:	4b20      	ldr	r3, [pc, #128]	@ (80063b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d001      	beq.n	8006348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e032      	b.n	80063ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006354:	4b19      	ldr	r3, [pc, #100]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4916      	ldr	r1, [pc, #88]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	4313      	orrs	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	490e      	ldr	r1, [pc, #56]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006386:	f000 f821 	bl	80063cc <HAL_RCC_GetSysClockFreq>
 800638a:	4602      	mov	r2, r0
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	490a      	ldr	r1, [pc, #40]	@ (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006398:	5ccb      	ldrb	r3, [r1, r3]
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80063a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063a2:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <HAL_RCC_ClockConfig+0x1c8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd fb16 	bl	80039d8 <HAL_InitTick>

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40023c00 	.word	0x40023c00
 80063bc:	40023800 	.word	0x40023800
 80063c0:	0800d9e8 	.word	0x0800d9e8
 80063c4:	20000014 	.word	0x20000014
 80063c8:	20000018 	.word	0x20000018

080063cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b094      	sub	sp, #80	@ 0x50
 80063d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d8:	2300      	movs	r3, #0
 80063da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063dc:	2300      	movs	r3, #0
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063e4:	4b79      	ldr	r3, [pc, #484]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d00d      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0x40>
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	f200 80e1 	bhi.w	80065b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0x34>
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0x3a>
 80063fe:	e0db      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006400:	4b73      	ldr	r3, [pc, #460]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006402:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006404:	e0db      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006406:	4b73      	ldr	r3, [pc, #460]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800640a:	e0d8      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800640c:	4b6f      	ldr	r3, [pc, #444]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006414:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006416:	4b6d      	ldr	r3, [pc, #436]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d063      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006422:	4b6a      	ldr	r3, [pc, #424]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	099b      	lsrs	r3, r3, #6
 8006428:	2200      	movs	r2, #0
 800642a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800642c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006434:	633b      	str	r3, [r7, #48]	@ 0x30
 8006436:	2300      	movs	r3, #0
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
 800643a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800643e:	4622      	mov	r2, r4
 8006440:	462b      	mov	r3, r5
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	0159      	lsls	r1, r3, #5
 800644c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006450:	0150      	lsls	r0, r2, #5
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4621      	mov	r1, r4
 8006458:	1a51      	subs	r1, r2, r1
 800645a:	6139      	str	r1, [r7, #16]
 800645c:	4629      	mov	r1, r5
 800645e:	eb63 0301 	sbc.w	r3, r3, r1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006470:	4659      	mov	r1, fp
 8006472:	018b      	lsls	r3, r1, #6
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800647a:	4651      	mov	r1, sl
 800647c:	018a      	lsls	r2, r1, #6
 800647e:	4651      	mov	r1, sl
 8006480:	ebb2 0801 	subs.w	r8, r2, r1
 8006484:	4659      	mov	r1, fp
 8006486:	eb63 0901 	sbc.w	r9, r3, r1
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800649a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649e:	4690      	mov	r8, r2
 80064a0:	4699      	mov	r9, r3
 80064a2:	4623      	mov	r3, r4
 80064a4:	eb18 0303 	adds.w	r3, r8, r3
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	462b      	mov	r3, r5
 80064ac:	eb49 0303 	adc.w	r3, r9, r3
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064be:	4629      	mov	r1, r5
 80064c0:	024b      	lsls	r3, r1, #9
 80064c2:	4621      	mov	r1, r4
 80064c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064c8:	4621      	mov	r1, r4
 80064ca:	024a      	lsls	r2, r1, #9
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064d2:	2200      	movs	r2, #0
 80064d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064dc:	f7fa fbdc 	bl	8000c98 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4613      	mov	r3, r2
 80064e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e8:	e058      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4b38      	ldr	r3, [pc, #224]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	2200      	movs	r2, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	4611      	mov	r1, r2
 80064f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064fa:	623b      	str	r3, [r7, #32]
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	f04f 0000 	mov.w	r0, #0
 800650c:	f04f 0100 	mov.w	r1, #0
 8006510:	0159      	lsls	r1, r3, #5
 8006512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006516:	0150      	lsls	r0, r2, #5
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4641      	mov	r1, r8
 800651e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006522:	4649      	mov	r1, r9
 8006524:	eb63 0b01 	sbc.w	fp, r3, r1
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800653c:	ebb2 040a 	subs.w	r4, r2, sl
 8006540:	eb63 050b 	sbc.w	r5, r3, fp
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	00eb      	lsls	r3, r5, #3
 800654e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006552:	00e2      	lsls	r2, r4, #3
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	4643      	mov	r3, r8
 800655a:	18e3      	adds	r3, r4, r3
 800655c:	603b      	str	r3, [r7, #0]
 800655e:	464b      	mov	r3, r9
 8006560:	eb45 0303 	adc.w	r3, r5, r3
 8006564:	607b      	str	r3, [r7, #4]
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006572:	4629      	mov	r1, r5
 8006574:	028b      	lsls	r3, r1, #10
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800657c:	4621      	mov	r1, r4
 800657e:	028a      	lsls	r2, r1, #10
 8006580:	4610      	mov	r0, r2
 8006582:	4619      	mov	r1, r3
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	2200      	movs	r2, #0
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	61fa      	str	r2, [r7, #28]
 800658c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006590:	f7fa fb82 	bl	8000c98 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800659c:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x200>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	3301      	adds	r3, #1
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80065ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065b6:	e002      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b8:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3750      	adds	r7, #80	@ 0x50
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ca:	bf00      	nop
 80065cc:	40023800 	.word	0x40023800
 80065d0:	00f42400 	.word	0x00f42400
 80065d4:	007a1200 	.word	0x007a1200

080065d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065dc:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000014 	.word	0x20000014

080065f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065f4:	f7ff fff0 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	@ (8006610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	0a9b      	lsrs	r3, r3, #10
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4903      	ldr	r1, [pc, #12]	@ (8006614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40023800 	.word	0x40023800
 8006614:	0800d9f8 	.word	0x0800d9f8

08006618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800661c:	f7ff ffdc 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0b5b      	lsrs	r3, r3, #13
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4903      	ldr	r1, [pc, #12]	@ (800663c <HAL_RCC_GetPCLK2Freq+0x24>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40023800 	.word	0x40023800
 800663c:	0800d9f8 	.word	0x0800d9f8

08006640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e041      	b.n	80066d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fc fe62 	bl	8003330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f000 fd88 	bl	8007194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e044      	b.n	8006782 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1e      	ldr	r2, [pc, #120]	@ (8006790 <HAL_TIM_Base_Start_IT+0xb0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x6c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006722:	d013      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x6c>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1a      	ldr	r2, [pc, #104]	@ (8006794 <HAL_TIM_Base_Start_IT+0xb4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x6c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <HAL_TIM_Base_Start_IT+0xb8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x6c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a17      	ldr	r2, [pc, #92]	@ (800679c <HAL_TIM_Base_Start_IT+0xbc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x6c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d111      	bne.n	8006770 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b06      	cmp	r3, #6
 800675c:	d010      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676e:	e007      	b.n	8006780 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40010000 	.word	0x40010000
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40014000 	.word	0x40014000

080067a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e041      	b.n	800683a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f839 	bl	8006842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f000 fcd6 	bl	8007194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_TIM_PWM_Start+0x24>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	e022      	b.n	80068c2 <HAL_TIM_PWM_Start+0x6a>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b04      	cmp	r3, #4
 8006880:	d109      	bne.n	8006896 <HAL_TIM_PWM_Start+0x3e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	bf14      	ite	ne
 800688e:	2301      	movne	r3, #1
 8006890:	2300      	moveq	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	e015      	b.n	80068c2 <HAL_TIM_PWM_Start+0x6a>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d109      	bne.n	80068b0 <HAL_TIM_PWM_Start+0x58>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e008      	b.n	80068c2 <HAL_TIM_PWM_Start+0x6a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e068      	b.n	800699c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <HAL_TIM_PWM_Start+0x82>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068d8:	e013      	b.n	8006902 <HAL_TIM_PWM_Start+0xaa>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d104      	bne.n	80068ea <HAL_TIM_PWM_Start+0x92>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e8:	e00b      	b.n	8006902 <HAL_TIM_PWM_Start+0xaa>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_PWM_Start+0xa2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068f8:	e003      	b.n	8006902 <HAL_TIM_PWM_Start+0xaa>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2201      	movs	r2, #1
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fee8 	bl	80076e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a23      	ldr	r2, [pc, #140]	@ (80069a4 <HAL_TIM_PWM_Start+0x14c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d107      	bne.n	800692a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1d      	ldr	r2, [pc, #116]	@ (80069a4 <HAL_TIM_PWM_Start+0x14c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d018      	beq.n	8006966 <HAL_TIM_PWM_Start+0x10e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693c:	d013      	beq.n	8006966 <HAL_TIM_PWM_Start+0x10e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a19      	ldr	r2, [pc, #100]	@ (80069a8 <HAL_TIM_PWM_Start+0x150>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00e      	beq.n	8006966 <HAL_TIM_PWM_Start+0x10e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a17      	ldr	r2, [pc, #92]	@ (80069ac <HAL_TIM_PWM_Start+0x154>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_TIM_PWM_Start+0x10e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a16      	ldr	r2, [pc, #88]	@ (80069b0 <HAL_TIM_PWM_Start+0x158>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d004      	beq.n	8006966 <HAL_TIM_PWM_Start+0x10e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <HAL_TIM_PWM_Start+0x15c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d111      	bne.n	800698a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b06      	cmp	r3, #6
 8006976:	d010      	beq.n	800699a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	e007      	b.n	800699a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	40014000 	.word	0x40014000

080069b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e097      	b.n	8006afc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fc fd09 	bl	80033f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f000 fbc1 	bl	8007194 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006a58:	f023 030c 	bic.w	r3, r3, #12
 8006a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	4313      	orrs	r3, r2
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	011a      	lsls	r2, r3, #4
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	031b      	lsls	r3, r3, #12
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d102      	bne.n	8006b40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b3a:	7b7b      	ldrb	r3, [r7, #13]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e069      	b.n	8006c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b54:	e031      	b.n	8006bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d110      	bne.n	8006b7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d102      	bne.n	8006b68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b62:	7b3b      	ldrb	r3, [r7, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d001      	beq.n	8006b6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e055      	b.n	8006c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b7c:	e01d      	b.n	8006bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d108      	bne.n	8006b96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d105      	bne.n	8006b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d102      	bne.n	8006b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b90:	7b3b      	ldrb	r3, [r7, #12]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d001      	beq.n	8006b9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e03e      	b.n	8006c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_TIM_Encoder_Start+0xc4>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d008      	beq.n	8006bd8 <HAL_TIM_Encoder_Start+0xd4>
 8006bc6:	e00f      	b.n	8006be8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd85 	bl	80076e0 <TIM_CCxChannelCmd>
      break;
 8006bd6:	e016      	b.n	8006c06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	2104      	movs	r1, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fd7d 	bl	80076e0 <TIM_CCxChannelCmd>
      break;
 8006be6:	e00e      	b.n	8006c06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fd75 	bl	80076e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fd6e 	bl	80076e0 <TIM_CCxChannelCmd>
      break;
 8006c04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d122      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0202 	mvn.w	r2, #2
 8006c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa77 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa69 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa7a 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0204 	mvn.w	r2, #4
 8006ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa4d 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa3f 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa50 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d122      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d11b      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0208 	mvn.w	r2, #8
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa23 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa15 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa26 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f9f9 	bl	8007156 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9eb 	bl	8007142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9fc 	bl	800716a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0201 	mvn.w	r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb fe26 	bl	80029f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dae:	2b80      	cmp	r3, #128	@ 0x80
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbc:	2b80      	cmp	r3, #128	@ 0x80
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fd78 	bl	80078c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b40      	cmp	r3, #64	@ 0x40
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9c1 	bl	800717e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d10e      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d107      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0220 	mvn.w	r2, #32
 8006e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fd42 	bl	80078ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e0ae      	b.n	8006fac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	f200 809f 	bhi.w	8006f9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e99 	.word	0x08006e99
 8006e68:	08006f9d 	.word	0x08006f9d
 8006e6c:	08006f9d 	.word	0x08006f9d
 8006e70:	08006f9d 	.word	0x08006f9d
 8006e74:	08006ed9 	.word	0x08006ed9
 8006e78:	08006f9d 	.word	0x08006f9d
 8006e7c:	08006f9d 	.word	0x08006f9d
 8006e80:	08006f9d 	.word	0x08006f9d
 8006e84:	08006f1b 	.word	0x08006f1b
 8006e88:	08006f9d 	.word	0x08006f9d
 8006e8c:	08006f9d 	.word	0x08006f9d
 8006e90:	08006f9d 	.word	0x08006f9d
 8006e94:	08006f5b 	.word	0x08006f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 f9f8 	bl	8007294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0208 	orr.w	r2, r2, #8
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	619a      	str	r2, [r3, #24]
      break;
 8006ed6:	e064      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa3e 	bl	8007360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	619a      	str	r2, [r3, #24]
      break;
 8006f18:	e043      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fa89 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0208 	orr.w	r2, r2, #8
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0204 	bic.w	r2, r2, #4
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
      break;
 8006f58:	e023      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fad3 	bl	800750c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
      break;
 8006f9a:	e002      	b.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0b4      	b.n	800713a <HAL_TIM_ConfigClockSource+0x186>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007008:	d03e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0xd4>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700e:	f200 8087 	bhi.w	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007016:	f000 8086 	beq.w	8007126 <HAL_TIM_ConfigClockSource+0x172>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d87f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b70      	cmp	r3, #112	@ 0x70
 8007022:	d01a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xa6>
 8007024:	2b70      	cmp	r3, #112	@ 0x70
 8007026:	d87b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b60      	cmp	r3, #96	@ 0x60
 800702a:	d050      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x11a>
 800702c:	2b60      	cmp	r3, #96	@ 0x60
 800702e:	d877      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b50      	cmp	r3, #80	@ 0x50
 8007032:	d03c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xfa>
 8007034:	2b50      	cmp	r3, #80	@ 0x50
 8007036:	d873      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	d058      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x13a>
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d86f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b30      	cmp	r3, #48	@ 0x30
 8007042:	d064      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d86b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d060      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d867      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d05a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15a>
 8007058:	e062      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6899      	ldr	r1, [r3, #8]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f000 fb19 	bl	80076a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800707c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	609a      	str	r2, [r3, #8]
      break;
 8007086:	e04f      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f000 fb02 	bl	80076a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070aa:	609a      	str	r2, [r3, #8]
      break;
 80070ac:	e03c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 fa76 	bl	80075ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2150      	movs	r1, #80	@ 0x50
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 facf 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 80070cc:	e02c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 fa95 	bl	800760a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2160      	movs	r1, #96	@ 0x60
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fabf 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 80070ec:	e01c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fa56 	bl	80075ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	@ 0x40
 8007106:	4618      	mov	r0, r3
 8007108:	f000 faaf 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 800710c:	e00c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f000 faa6 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 800711e:	e003      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	e000      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a34      	ldr	r2, [pc, #208]	@ (8007278 <TIM_Base_SetConfig+0xe4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00f      	beq.n	80071cc <TIM_Base_SetConfig+0x38>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b2:	d00b      	beq.n	80071cc <TIM_Base_SetConfig+0x38>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a31      	ldr	r2, [pc, #196]	@ (800727c <TIM_Base_SetConfig+0xe8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_Base_SetConfig+0x38>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a30      	ldr	r2, [pc, #192]	@ (8007280 <TIM_Base_SetConfig+0xec>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_Base_SetConfig+0x38>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007284 <TIM_Base_SetConfig+0xf0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d108      	bne.n	80071de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a25      	ldr	r2, [pc, #148]	@ (8007278 <TIM_Base_SetConfig+0xe4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01b      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ec:	d017      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a22      	ldr	r2, [pc, #136]	@ (800727c <TIM_Base_SetConfig+0xe8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a21      	ldr	r2, [pc, #132]	@ (8007280 <TIM_Base_SetConfig+0xec>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a20      	ldr	r2, [pc, #128]	@ (8007284 <TIM_Base_SetConfig+0xf0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <TIM_Base_SetConfig+0xf4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1e      	ldr	r2, [pc, #120]	@ (800728c <TIM_Base_SetConfig+0xf8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_Base_SetConfig+0x8a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <TIM_Base_SetConfig+0xfc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a08      	ldr	r2, [pc, #32]	@ (8007278 <TIM_Base_SetConfig+0xe4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d103      	bne.n	8007264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	615a      	str	r2, [r3, #20]
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800

08007294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0302 	bic.w	r3, r3, #2
 80072dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1c      	ldr	r2, [pc, #112]	@ (800735c <TIM_OC1_SetConfig+0xc8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10c      	bne.n	800730a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0308 	bic.w	r3, r3, #8
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a13      	ldr	r2, [pc, #76]	@ (800735c <TIM_OC1_SetConfig+0xc8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d111      	bne.n	8007336 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40010000 	.word	0x40010000

08007360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0210 	bic.w	r2, r3, #16
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0320 	bic.w	r3, r3, #32
 80073aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007434 <TIM_OC2_SetConfig+0xd4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10d      	bne.n	80073dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <TIM_OC2_SetConfig+0xd4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d113      	bne.n	800740c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010000 	.word	0x40010000

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <TIM_OC3_SetConfig+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d10d      	bne.n	80074b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800749c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a14      	ldr	r2, [pc, #80]	@ (8007508 <TIM_OC3_SetConfig+0xd0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d113      	bne.n	80074e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	40010000 	.word	0x40010000

0800750c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a10      	ldr	r2, [pc, #64]	@ (80075a8 <TIM_OC4_SetConfig+0x9c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d109      	bne.n	8007580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	019b      	lsls	r3, r3, #6
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000

080075ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f023 030a 	bic.w	r3, r3, #10
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800760a:	b480      	push	{r7}
 800760c:	b087      	sub	sp, #28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f023 0210 	bic.w	r2, r3, #16
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	031b      	lsls	r3, r3, #12
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	f043 0307 	orr.w	r3, r3, #7
 800768c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	021a      	lsls	r2, r3, #8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	609a      	str	r2, [r3, #8]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2201      	movs	r2, #1
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	43db      	mvns	r3, r3
 8007702:	401a      	ands	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007740:	2302      	movs	r3, #2
 8007742:	e050      	b.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1c      	ldr	r2, [pc, #112]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007790:	d013      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a18      	ldr	r2, [pc, #96]	@ (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a15      	ldr	r2, [pc, #84]	@ (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a13      	ldr	r2, [pc, #76]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10c      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40014000 	.word	0x40014000

08007808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007820:	2302      	movs	r3, #2
 8007822:	e03d      	b.n	80078a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e03f      	b.n	8007966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fb fe26 	bl	800354c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2224      	movs	r2, #36	@ 0x24
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 ff9b 	bl	8008854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800792c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800793c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800794c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b08a      	sub	sp, #40	@ 0x28
 8007972:	af02      	add	r7, sp, #8
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b20      	cmp	r3, #32
 800798c:	d17c      	bne.n	8007a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_UART_Transmit+0x2c>
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e075      	b.n	8007a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Transmit+0x3e>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e06e      	b.n	8007a8a <HAL_UART_Transmit+0x11c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2221      	movs	r2, #33	@ 0x21
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c2:	f7fc f84d 	bl	8003a60 <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079dc:	d108      	bne.n	80079f0 <HAL_UART_Transmit+0x82>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	e003      	b.n	80079f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007a00:	e02a      	b.n	8007a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2180      	movs	r1, #128	@ 0x80
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fc53 	bl	80082b8 <UART_WaitOnFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e036      	b.n	8007a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3302      	adds	r3, #2
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e007      	b.n	8007a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	781a      	ldrb	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1cf      	bne.n	8007a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2140      	movs	r1, #64	@ 0x40
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fc23 	bl	80082b8 <UART_WaitOnFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e006      	b.n	8007a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b08c      	sub	sp, #48	@ 0x30
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d152      	bne.n	8007b52 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e04b      	b.n	8007b54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e044      	b.n	8007b54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	461a      	mov	r2, r3
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fc58 	bl	8008394 <UART_Start_Receive_DMA>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007aea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d12c      	bne.n	8007b4c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d125      	bne.n	8007b46 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f043 0310 	orr.w	r3, r3, #16
 8007b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b30:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b32:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6a39      	ldr	r1, [r7, #32]
 8007b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e5      	bne.n	8007b10 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007b44:	e002      	b.n	8007b4c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b50:	e000      	b.n	8007b54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3730      	adds	r7, #48	@ 0x30
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b0ba      	sub	sp, #232	@ 0xe8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10f      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x66>
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fd8f 	bl	80086de <UART_Receive_IT>
      return;
 8007bc0:	e256      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80de 	beq.w	8007d88 <HAL_UART_IRQHandler+0x22c>
 8007bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80d1 	beq.w	8007d88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00b      	beq.n	8007c0a <HAL_UART_IRQHandler+0xae>
 8007bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <HAL_UART_IRQHandler+0xd2>
 8007c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	f043 0202 	orr.w	r2, r3, #2
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_UART_IRQHandler+0xf6>
 8007c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	f043 0204 	orr.w	r2, r3, #4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <HAL_UART_IRQHandler+0x126>
 8007c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7a:	f043 0208 	orr.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 81ed 	beq.w	8008066 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_UART_IRQHandler+0x14e>
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd1a 	bl	80086de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb4:	2b40      	cmp	r3, #64	@ 0x40
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x17a>
 8007cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04f      	beq.n	8007d76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fc22 	bl	8008520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce6:	2b40      	cmp	r3, #64	@ 0x40
 8007ce8:	d141      	bne.n	8007d6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1d9      	bne.n	8007cea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d013      	beq.n	8007d66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	4a7d      	ldr	r2, [pc, #500]	@ (8007f38 <HAL_UART_IRQHandler+0x3dc>)
 8007d44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fc fbbc 	bl	80044c8 <HAL_DMA_Abort_IT>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d016      	beq.n	8007d84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	e00e      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f9a4 	bl	80080b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	e00a      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9a0 	bl	80080b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d74:	e006      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f99c 	bl	80080b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007d82:	e170      	b.n	8008066 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	bf00      	nop
    return;
 8007d86:	e16e      	b.n	8008066 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	f040 814a 	bne.w	8008026 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8143 	beq.w	8008026 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 813c 	beq.w	8008026 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dce:	2b40      	cmp	r3, #64	@ 0x40
 8007dd0:	f040 80b4 	bne.w	8007f3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8140 	beq.w	800806a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007df2:	429a      	cmp	r2, r3
 8007df4:	f080 8139 	bcs.w	800806a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0a:	f000 8088 	beq.w	8007f1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1d9      	bne.n	8007e0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e1      	bne.n	8007e5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007eba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ec0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e3      	bne.n	8007e96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e3      	bne.n	8007edc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fc fa65 	bl	80043e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fa fe34 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f34:	e099      	b.n	800806a <HAL_UART_IRQHandler+0x50e>
 8007f36:	bf00      	nop
 8007f38:	080085e7 	.word	0x080085e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 808b 	beq.w	800806e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8086 	beq.w	800806e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f86:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0310 	bic.w	r3, r3, #16
 8007ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008004:	61fa      	str	r2, [r7, #28]
 8008006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e3      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fa fdbc 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008024:	e023      	b.n	800806e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_UART_IRQHandler+0x4ea>
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fae5 	bl	800860e <UART_Transmit_IT>
    return;
 8008044:	e014      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800804a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00e      	beq.n	8008070 <HAL_UART_IRQHandler+0x514>
 8008052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb25 	bl	80086ae <UART_EndTransmit_IT>
    return;
 8008064:	e004      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
    return;
 8008066:	bf00      	nop
 8008068:	e002      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
      return;
 800806a:	bf00      	nop
 800806c:	e000      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
      return;
 800806e:	bf00      	nop
  }
}
 8008070:	37e8      	adds	r7, #232	@ 0xe8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop

08008078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b09c      	sub	sp, #112	@ 0x70
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d172      	bne.n	80081ca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80080e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080e6:	2200      	movs	r2, #0
 80080e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	330c      	adds	r3, #12
 80080f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800810a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800810c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e5      	bne.n	80080ea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3314      	adds	r3, #20
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800812e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	667b      	str	r3, [r7, #100]	@ 0x64
 8008136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800813e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800814c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e5      	bne.n	800811e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3314      	adds	r3, #20
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	623b      	str	r3, [r7, #32]
   return(result);
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008168:	663b      	str	r3, [r7, #96]	@ 0x60
 800816a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3314      	adds	r3, #20
 8008170:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008172:	633a      	str	r2, [r7, #48]	@ 0x30
 8008174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e5      	bne.n	8008152 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008188:	2220      	movs	r2, #32
 800818a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008192:	2b01      	cmp	r3, #1
 8008194:	d119      	bne.n	80081ca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f023 0310 	bic.w	r3, r3, #16
 80081ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	330c      	adds	r3, #12
 80081b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80081b6:	61fa      	str	r2, [r7, #28]
 80081b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	69b9      	ldr	r1, [r7, #24]
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	617b      	str	r3, [r7, #20]
   return(result);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e5      	bne.n	8008196 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d106      	bne.n	80081e0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081d6:	4619      	mov	r1, r3
 80081d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081da:	f7fa fcdf 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081de:	e002      	b.n	80081e6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80081e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081e2:	f7ff ff53 	bl	800808c <HAL_UART_RxCpltCallback>
}
 80081e6:	bf00      	nop
 80081e8:	3770      	adds	r7, #112	@ 0x70
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008200:	2b01      	cmp	r3, #1
 8008202:	d108      	bne.n	8008216 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	b29b      	uxth	r3, r3
 800820c:	4619      	mov	r1, r3
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7fa fcc4 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008214:	e002      	b.n	800821c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff ff42 	bl	80080a0 <HAL_UART_RxHalfCpltCallback>
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008240:	2b80      	cmp	r3, #128	@ 0x80
 8008242:	bf0c      	ite	eq
 8008244:	2301      	moveq	r3, #1
 8008246:	2300      	movne	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b21      	cmp	r3, #33	@ 0x21
 8008256:	d108      	bne.n	800826a <UART_DMAError+0x46>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008264:	68b8      	ldr	r0, [r7, #8]
 8008266:	f000 f933 	bl	80084d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b22      	cmp	r3, #34	@ 0x22
 800828a:	d108      	bne.n	800829e <UART_DMAError+0x7a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008298:	68b8      	ldr	r0, [r7, #8]
 800829a:	f000 f941 	bl	8008520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a2:	f043 0210 	orr.w	r2, r3, #16
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082aa:	68b8      	ldr	r0, [r7, #8]
 80082ac:	f7ff ff02 	bl	80080b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b090      	sub	sp, #64	@ 0x40
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c8:	e050      	b.n	800836c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d0:	d04c      	beq.n	800836c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d8:	f7fb fbc2 	bl	8003a60 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d241      	bcs.n	800836c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008308:	637a      	str	r2, [r7, #52]	@ 0x34
 800830a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800830e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e5      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	613b      	str	r3, [r7, #16]
   return(result);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3314      	adds	r3, #20
 800833a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800833c:	623a      	str	r2, [r7, #32]
 800833e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	6a3a      	ldr	r2, [r7, #32]
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	61bb      	str	r3, [r7, #24]
   return(result);
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e5      	bne.n	800831c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e00f      	b.n	800838c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4013      	ands	r3, r2
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	461a      	mov	r2, r3
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	429a      	cmp	r2, r3
 8008388:	d09f      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3740      	adds	r7, #64	@ 0x40
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b098      	sub	sp, #96	@ 0x60
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	4613      	mov	r3, r2
 80083a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2222      	movs	r2, #34	@ 0x22
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	4a40      	ldr	r2, [pc, #256]	@ (80084c4 <UART_Start_Receive_DMA+0x130>)
 80083c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	4a3f      	ldr	r2, [pc, #252]	@ (80084c8 <UART_Start_Receive_DMA+0x134>)
 80083ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	4a3e      	ldr	r2, [pc, #248]	@ (80084cc <UART_Start_Receive_DMA+0x138>)
 80083d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	2200      	movs	r2, #0
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	f7fb ffa0 	bl	8004338 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d019      	beq.n	8008452 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	330c      	adds	r3, #12
 8008424:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800842e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008434:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	330c      	adds	r3, #12
 800843c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800843e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008440:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800844c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e5      	bne.n	800841e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3314      	adds	r3, #20
 8008458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	f043 0301 	orr.w	r3, r3, #1
 8008468:	657b      	str	r3, [r7, #84]	@ 0x54
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3314      	adds	r3, #20
 8008470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008472:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	617b      	str	r3, [r7, #20]
   return(result);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800849c:	653b      	str	r3, [r7, #80]	@ 0x50
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80084a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6a39      	ldr	r1, [r7, #32]
 80084ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e5      	bne.n	8008486 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3760      	adds	r7, #96	@ 0x60
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	080080c9 	.word	0x080080c9
 80084c8:	080081ef 	.word	0x080081ef
 80084cc:	08008225 	.word	0x08008225

080084d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	@ 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	61ba      	str	r2, [r7, #24]
 80084fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	613b      	str	r3, [r7, #16]
   return(result);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e5      	bne.n	80084d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008514:	bf00      	nop
 8008516:	3724      	adds	r7, #36	@ 0x24
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b095      	sub	sp, #84	@ 0x54
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800853e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008548:	643a      	str	r2, [r7, #64]	@ 0x40
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800854e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	61fb      	str	r3, [r7, #28]
   return(result);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800857c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e5      	bne.n	800855c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	2b01      	cmp	r3, #1
 8008596:	d119      	bne.n	80085cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	330c      	adds	r3, #12
 800859e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f023 0310 	bic.w	r3, r3, #16
 80085ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b8:	61ba      	str	r2, [r7, #24]
 80085ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	613b      	str	r3, [r7, #16]
   return(result);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e5      	bne.n	8008598 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80085da:	bf00      	nop
 80085dc:	3754      	adds	r7, #84	@ 0x54
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fd57 	bl	80080b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800860e:	b480      	push	{r7}
 8008610:	b085      	sub	sp, #20
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b21      	cmp	r3, #33	@ 0x21
 8008620:	d13e      	bne.n	80086a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800862a:	d114      	bne.n	8008656 <UART_Transmit_IT+0x48>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d110      	bne.n	8008656 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	1c9a      	adds	r2, r3, #2
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	621a      	str	r2, [r3, #32]
 8008654:	e008      	b.n	8008668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	1c59      	adds	r1, r3, #1
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6211      	str	r1, [r2, #32]
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29b      	uxth	r3, r3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	4619      	mov	r1, r3
 8008676:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10f      	bne.n	800869c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800868a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800869a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	e000      	b.n	80086a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086a0:	2302      	movs	r3, #2
  }
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fcd2 	bl	8008078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b08c      	sub	sp, #48	@ 0x30
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b22      	cmp	r3, #34	@ 0x22
 80086f0:	f040 80ab 	bne.w	800884a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086fc:	d117      	bne.n	800872e <UART_Receive_IT+0x50>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d113      	bne.n	800872e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871c:	b29a      	uxth	r2, r3
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008726:	1c9a      	adds	r2, r3, #2
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	629a      	str	r2, [r3, #40]	@ 0x28
 800872c:	e026      	b.n	800877c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008740:	d007      	beq.n	8008752 <UART_Receive_IT+0x74>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <UART_Receive_IT+0x82>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	b2da      	uxtb	r2, r3
 800875a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e008      	b.n	8008772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800876c:	b2da      	uxtb	r2, r3
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29b      	uxth	r3, r3
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4619      	mov	r1, r3
 800878a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800878c:	2b00      	cmp	r3, #0
 800878e:	d15a      	bne.n	8008846 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0220 	bic.w	r2, r2, #32
 800879e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695a      	ldr	r2, [r3, #20]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d135      	bne.n	800883c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	613b      	str	r3, [r7, #16]
   return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f023 0310 	bic.w	r3, r3, #16
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f6:	623a      	str	r2, [r7, #32]
 80087f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	69f9      	ldr	r1, [r7, #28]
 80087fc:	6a3a      	ldr	r2, [r7, #32]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	61bb      	str	r3, [r7, #24]
   return(result);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e5      	bne.n	80087d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b10      	cmp	r3, #16
 8008816:	d10a      	bne.n	800882e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fa f9b1 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
 800883a:	e002      	b.n	8008842 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fc25 	bl	800808c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	e002      	b.n	800884c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e000      	b.n	800884c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800884a:	2302      	movs	r3, #2
  }
}
 800884c:	4618      	mov	r0, r3
 800884e:	3730      	adds	r7, #48	@ 0x30
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008858:	b0c0      	sub	sp, #256	@ 0x100
 800885a:	af00      	add	r7, sp, #0
 800885c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	68d9      	ldr	r1, [r3, #12]
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	ea40 0301 	orr.w	r3, r0, r1
 800887c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	431a      	orrs	r2, r3
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	431a      	orrs	r2, r3
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088ac:	f021 010c 	bic.w	r1, r1, #12
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088ba:	430b      	orrs	r3, r1
 80088bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ce:	6999      	ldr	r1, [r3, #24]
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	ea40 0301 	orr.w	r3, r0, r1
 80088da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b8f      	ldr	r3, [pc, #572]	@ (8008b20 <UART_SetConfig+0x2cc>)
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d005      	beq.n	80088f4 <UART_SetConfig+0xa0>
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008b24 <UART_SetConfig+0x2d0>)
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d104      	bne.n	80088fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088f4:	f7fd fe90 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 80088f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80088fc:	e003      	b.n	8008906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088fe:	f7fd fe77 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8008902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008910:	f040 810c 	bne.w	8008b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008918:	2200      	movs	r2, #0
 800891a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800891e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	1891      	adds	r1, r2, r2
 800892c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800892e:	415b      	adcs	r3, r3
 8008930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008936:	4621      	mov	r1, r4
 8008938:	eb12 0801 	adds.w	r8, r2, r1
 800893c:	4629      	mov	r1, r5
 800893e:	eb43 0901 	adc.w	r9, r3, r1
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800894e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008956:	4690      	mov	r8, r2
 8008958:	4699      	mov	r9, r3
 800895a:	4623      	mov	r3, r4
 800895c:	eb18 0303 	adds.w	r3, r8, r3
 8008960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008964:	462b      	mov	r3, r5
 8008966:	eb49 0303 	adc.w	r3, r9, r3
 800896a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800897a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800897e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008982:	460b      	mov	r3, r1
 8008984:	18db      	adds	r3, r3, r3
 8008986:	653b      	str	r3, [r7, #80]	@ 0x50
 8008988:	4613      	mov	r3, r2
 800898a:	eb42 0303 	adc.w	r3, r2, r3
 800898e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008998:	f7f8 f97e 	bl	8000c98 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4b61      	ldr	r3, [pc, #388]	@ (8008b28 <UART_SetConfig+0x2d4>)
 80089a2:	fba3 2302 	umull	r2, r3, r3, r2
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	011c      	lsls	r4, r3, #4
 80089aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	1891      	adds	r1, r2, r2
 80089c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089c4:	415b      	adcs	r3, r3
 80089c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089cc:	4641      	mov	r1, r8
 80089ce:	eb12 0a01 	adds.w	sl, r2, r1
 80089d2:	4649      	mov	r1, r9
 80089d4:	eb43 0b01 	adc.w	fp, r3, r1
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089ec:	4692      	mov	sl, r2
 80089ee:	469b      	mov	fp, r3
 80089f0:	4643      	mov	r3, r8
 80089f2:	eb1a 0303 	adds.w	r3, sl, r3
 80089f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089fa:	464b      	mov	r3, r9
 80089fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	18db      	adds	r3, r3, r3
 8008a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a1e:	4613      	mov	r3, r2
 8008a20:	eb42 0303 	adc.w	r3, r2, r3
 8008a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a2e:	f7f8 f933 	bl	8000c98 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	4b3b      	ldr	r3, [pc, #236]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	2264      	movs	r2, #100	@ 0x64
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	1acb      	subs	r3, r1, r3
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a4e:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008a50:	fba3 2302 	umull	r2, r3, r3, r2
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a5c:	441c      	add	r4, r3
 8008a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a70:	4642      	mov	r2, r8
 8008a72:	464b      	mov	r3, r9
 8008a74:	1891      	adds	r1, r2, r2
 8008a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a80:	4641      	mov	r1, r8
 8008a82:	1851      	adds	r1, r2, r1
 8008a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a86:	4649      	mov	r1, r9
 8008a88:	414b      	adcs	r3, r1
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a98:	4659      	mov	r1, fp
 8008a9a:	00cb      	lsls	r3, r1, #3
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa2:	4651      	mov	r1, sl
 8008aa4:	00ca      	lsls	r2, r1, #3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4642      	mov	r2, r8
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ab4:	464b      	mov	r3, r9
 8008ab6:	460a      	mov	r2, r1
 8008ab8:	eb42 0303 	adc.w	r3, r2, r3
 8008abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	18db      	adds	r3, r3, r3
 8008ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ada:	4613      	mov	r3, r2
 8008adc:	eb42 0303 	adc.w	r3, r2, r3
 8008ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008aea:	f7f8 f8d5 	bl	8000c98 <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008af4:	fba3 1302 	umull	r1, r3, r3, r2
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	2164      	movs	r1, #100	@ 0x64
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	3332      	adds	r3, #50	@ 0x32
 8008b06:	4a08      	ldr	r2, [pc, #32]	@ (8008b28 <UART_SetConfig+0x2d4>)
 8008b08:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	f003 0207 	and.w	r2, r3, #7
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4422      	add	r2, r4
 8008b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b1c:	e106      	b.n	8008d2c <UART_SetConfig+0x4d8>
 8008b1e:	bf00      	nop
 8008b20:	40011000 	.word	0x40011000
 8008b24:	40011400 	.word	0x40011400
 8008b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	1891      	adds	r1, r2, r2
 8008b44:	6239      	str	r1, [r7, #32]
 8008b46:	415b      	adcs	r3, r3
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b4e:	4641      	mov	r1, r8
 8008b50:	1854      	adds	r4, r2, r1
 8008b52:	4649      	mov	r1, r9
 8008b54:	eb43 0501 	adc.w	r5, r3, r1
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	00eb      	lsls	r3, r5, #3
 8008b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b66:	00e2      	lsls	r2, r4, #3
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	4643      	mov	r3, r8
 8008b6e:	18e3      	adds	r3, r4, r3
 8008b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b74:	464b      	mov	r3, r9
 8008b76:	eb45 0303 	adc.w	r3, r5, r3
 8008b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	008b      	lsls	r3, r1, #2
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	008a      	lsls	r2, r1, #2
 8008ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bac:	f7f8 f874 	bl	8000c98 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4b60      	ldr	r3, [pc, #384]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	011c      	lsls	r4, r3, #4
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	1891      	adds	r1, r2, r2
 8008bd6:	61b9      	str	r1, [r7, #24]
 8008bd8:	415b      	adcs	r3, r3
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008be0:	4641      	mov	r1, r8
 8008be2:	1851      	adds	r1, r2, r1
 8008be4:	6139      	str	r1, [r7, #16]
 8008be6:	4649      	mov	r1, r9
 8008be8:	414b      	adcs	r3, r1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	00cb      	lsls	r3, r1, #3
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c02:	4651      	mov	r1, sl
 8008c04:	00ca      	lsls	r2, r1, #3
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c14:	464b      	mov	r3, r9
 8008c16:	460a      	mov	r2, r1
 8008c18:	eb42 0303 	adc.w	r3, r2, r3
 8008c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c38:	4649      	mov	r1, r9
 8008c3a:	008b      	lsls	r3, r1, #2
 8008c3c:	4641      	mov	r1, r8
 8008c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c42:	4641      	mov	r1, r8
 8008c44:	008a      	lsls	r2, r1, #2
 8008c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c4a:	f7f8 f825 	bl	8000c98 <__aeabi_uldivmod>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	4b38      	ldr	r3, [pc, #224]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008c56:	fba3 2301 	umull	r2, r3, r3, r1
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2264      	movs	r2, #100	@ 0x64
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	1acb      	subs	r3, r1, r3
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	3332      	adds	r3, #50	@ 0x32
 8008c68:	4a33      	ldr	r2, [pc, #204]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c74:	441c      	add	r4, r3
 8008c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	1891      	adds	r1, r2, r2
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	415b      	adcs	r3, r3
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c94:	4641      	mov	r1, r8
 8008c96:	1851      	adds	r1, r2, r1
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	414b      	adcs	r3, r1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cac:	4659      	mov	r1, fp
 8008cae:	00cb      	lsls	r3, r1, #3
 8008cb0:	4651      	mov	r1, sl
 8008cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cb6:	4651      	mov	r1, sl
 8008cb8:	00ca      	lsls	r2, r1, #3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	460a      	mov	r2, r1
 8008cca:	eb42 0303 	adc.w	r3, r2, r3
 8008cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ce8:	4649      	mov	r1, r9
 8008cea:	008b      	lsls	r3, r1, #2
 8008cec:	4641      	mov	r1, r8
 8008cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cf2:	4641      	mov	r1, r8
 8008cf4:	008a      	lsls	r2, r1, #2
 8008cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cfa:	f7f7 ffcd 	bl	8000c98 <__aeabi_uldivmod>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4b0d      	ldr	r3, [pc, #52]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008d04:	fba3 1302 	umull	r1, r3, r3, r2
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	2164      	movs	r1, #100	@ 0x64
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	3332      	adds	r3, #50	@ 0x32
 8008d16:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <UART_SetConfig+0x4e4>)
 8008d18:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	f003 020f 	and.w	r2, r3, #15
 8008d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4422      	add	r2, r4
 8008d2a:	609a      	str	r2, [r3, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d32:	46bd      	mov	sp, r7
 8008d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d38:	51eb851f 	.word	0x51eb851f

08008d3c <malloc>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	@ (8008d48 <malloc+0xc>)
 8008d3e:	4601      	mov	r1, r0
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f000 b82d 	b.w	8008da0 <_malloc_r>
 8008d46:	bf00      	nop
 8008d48:	20000198 	.word	0x20000198

08008d4c <free>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	@ (8008d58 <free+0xc>)
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f002 bf55 	b.w	800bc00 <_free_r>
 8008d56:	bf00      	nop
 8008d58:	20000198 	.word	0x20000198

08008d5c <sbrk_aligned>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d9c <sbrk_aligned+0x40>)
 8008d60:	460c      	mov	r4, r1
 8008d62:	6831      	ldr	r1, [r6, #0]
 8008d64:	4605      	mov	r5, r0
 8008d66:	b911      	cbnz	r1, 8008d6e <sbrk_aligned+0x12>
 8008d68:	f002 f874 	bl	800ae54 <_sbrk_r>
 8008d6c:	6030      	str	r0, [r6, #0]
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	f002 f86f 	bl	800ae54 <_sbrk_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d103      	bne.n	8008d82 <sbrk_aligned+0x26>
 8008d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d7e:	4620      	mov	r0, r4
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	1cc4      	adds	r4, r0, #3
 8008d84:	f024 0403 	bic.w	r4, r4, #3
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d0f8      	beq.n	8008d7e <sbrk_aligned+0x22>
 8008d8c:	1a21      	subs	r1, r4, r0
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f002 f860 	bl	800ae54 <_sbrk_r>
 8008d94:	3001      	adds	r0, #1
 8008d96:	d1f2      	bne.n	8008d7e <sbrk_aligned+0x22>
 8008d98:	e7ef      	b.n	8008d7a <sbrk_aligned+0x1e>
 8008d9a:	bf00      	nop
 8008d9c:	200006c0 	.word	0x200006c0

08008da0 <_malloc_r>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	1ccd      	adds	r5, r1, #3
 8008da6:	f025 0503 	bic.w	r5, r5, #3
 8008daa:	3508      	adds	r5, #8
 8008dac:	2d0c      	cmp	r5, #12
 8008dae:	bf38      	it	cc
 8008db0:	250c      	movcc	r5, #12
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	4606      	mov	r6, r0
 8008db6:	db01      	blt.n	8008dbc <_malloc_r+0x1c>
 8008db8:	42a9      	cmp	r1, r5
 8008dba:	d904      	bls.n	8008dc6 <_malloc_r+0x26>
 8008dbc:	230c      	movs	r3, #12
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e9c <_malloc_r+0xfc>
 8008dca:	f000 f869 	bl	8008ea0 <__malloc_lock>
 8008dce:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd2:	461c      	mov	r4, r3
 8008dd4:	bb44      	cbnz	r4, 8008e28 <_malloc_r+0x88>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff ffbf 	bl	8008d5c <sbrk_aligned>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	4604      	mov	r4, r0
 8008de2:	d158      	bne.n	8008e96 <_malloc_r+0xf6>
 8008de4:	f8d8 4000 	ldr.w	r4, [r8]
 8008de8:	4627      	mov	r7, r4
 8008dea:	2f00      	cmp	r7, #0
 8008dec:	d143      	bne.n	8008e76 <_malloc_r+0xd6>
 8008dee:	2c00      	cmp	r4, #0
 8008df0:	d04b      	beq.n	8008e8a <_malloc_r+0xea>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	4639      	mov	r1, r7
 8008df6:	4630      	mov	r0, r6
 8008df8:	eb04 0903 	add.w	r9, r4, r3
 8008dfc:	f002 f82a 	bl	800ae54 <_sbrk_r>
 8008e00:	4581      	cmp	r9, r0
 8008e02:	d142      	bne.n	8008e8a <_malloc_r+0xea>
 8008e04:	6821      	ldr	r1, [r4, #0]
 8008e06:	1a6d      	subs	r5, r5, r1
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ffa6 	bl	8008d5c <sbrk_aligned>
 8008e10:	3001      	adds	r0, #1
 8008e12:	d03a      	beq.n	8008e8a <_malloc_r+0xea>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	442b      	add	r3, r5
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	bb62      	cbnz	r2, 8008e7c <_malloc_r+0xdc>
 8008e22:	f8c8 7000 	str.w	r7, [r8]
 8008e26:	e00f      	b.n	8008e48 <_malloc_r+0xa8>
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	1b52      	subs	r2, r2, r5
 8008e2c:	d420      	bmi.n	8008e70 <_malloc_r+0xd0>
 8008e2e:	2a0b      	cmp	r2, #11
 8008e30:	d917      	bls.n	8008e62 <_malloc_r+0xc2>
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	6025      	str	r5, [r4, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	6059      	strne	r1, [r3, #4]
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	bf08      	it	eq
 8008e40:	f8c8 1000 	streq.w	r1, [r8]
 8008e44:	5162      	str	r2, [r4, r5]
 8008e46:	604b      	str	r3, [r1, #4]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f000 f82f 	bl	8008eac <__malloc_unlock>
 8008e4e:	f104 000b 	add.w	r0, r4, #11
 8008e52:	1d23      	adds	r3, r4, #4
 8008e54:	f020 0007 	bic.w	r0, r0, #7
 8008e58:	1ac2      	subs	r2, r0, r3
 8008e5a:	bf1c      	itt	ne
 8008e5c:	1a1b      	subne	r3, r3, r0
 8008e5e:	50a3      	strne	r3, [r4, r2]
 8008e60:	e7af      	b.n	8008dc2 <_malloc_r+0x22>
 8008e62:	6862      	ldr	r2, [r4, #4]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	bf0c      	ite	eq
 8008e68:	f8c8 2000 	streq.w	r2, [r8]
 8008e6c:	605a      	strne	r2, [r3, #4]
 8008e6e:	e7eb      	b.n	8008e48 <_malloc_r+0xa8>
 8008e70:	4623      	mov	r3, r4
 8008e72:	6864      	ldr	r4, [r4, #4]
 8008e74:	e7ae      	b.n	8008dd4 <_malloc_r+0x34>
 8008e76:	463c      	mov	r4, r7
 8008e78:	687f      	ldr	r7, [r7, #4]
 8008e7a:	e7b6      	b.n	8008dea <_malloc_r+0x4a>
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d1fb      	bne.n	8008e7c <_malloc_r+0xdc>
 8008e84:	2300      	movs	r3, #0
 8008e86:	6053      	str	r3, [r2, #4]
 8008e88:	e7de      	b.n	8008e48 <_malloc_r+0xa8>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	6033      	str	r3, [r6, #0]
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f000 f80c 	bl	8008eac <__malloc_unlock>
 8008e94:	e794      	b.n	8008dc0 <_malloc_r+0x20>
 8008e96:	6005      	str	r5, [r0, #0]
 8008e98:	e7d6      	b.n	8008e48 <_malloc_r+0xa8>
 8008e9a:	bf00      	nop
 8008e9c:	200006c4 	.word	0x200006c4

08008ea0 <__malloc_lock>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	@ (8008ea8 <__malloc_lock+0x8>)
 8008ea2:	f002 b824 	b.w	800aeee <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20000808 	.word	0x20000808

08008eac <__malloc_unlock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	@ (8008eb4 <__malloc_unlock+0x8>)
 8008eae:	f002 b81f 	b.w	800aef0 <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20000808 	.word	0x20000808

08008eb8 <sulp>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	ec45 4b10 	vmov	d0, r4, r5
 8008ec2:	4616      	mov	r6, r2
 8008ec4:	f003 fda6 	bl	800ca14 <__ulp>
 8008ec8:	ec51 0b10 	vmov	r0, r1, d0
 8008ecc:	b17e      	cbz	r6, 8008eee <sulp+0x36>
 8008ece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ed2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dd09      	ble.n	8008eee <sulp+0x36>
 8008eda:	051b      	lsls	r3, r3, #20
 8008edc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008ee0:	2400      	movs	r4, #0
 8008ee2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	462b      	mov	r3, r5
 8008eea:	f7f7 fb8d 	bl	8000608 <__aeabi_dmul>
 8008eee:	ec41 0b10 	vmov	d0, r0, r1
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	0000      	movs	r0, r0
	...

08008ef8 <_strtod_l>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	b09f      	sub	sp, #124	@ 0x7c
 8008efe:	460c      	mov	r4, r1
 8008f00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f02:	2200      	movs	r2, #0
 8008f04:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f06:	9005      	str	r0, [sp, #20]
 8008f08:	f04f 0a00 	mov.w	sl, #0
 8008f0c:	f04f 0b00 	mov.w	fp, #0
 8008f10:	460a      	mov	r2, r1
 8008f12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f14:	7811      	ldrb	r1, [r2, #0]
 8008f16:	292b      	cmp	r1, #43	@ 0x2b
 8008f18:	d04a      	beq.n	8008fb0 <_strtod_l+0xb8>
 8008f1a:	d838      	bhi.n	8008f8e <_strtod_l+0x96>
 8008f1c:	290d      	cmp	r1, #13
 8008f1e:	d832      	bhi.n	8008f86 <_strtod_l+0x8e>
 8008f20:	2908      	cmp	r1, #8
 8008f22:	d832      	bhi.n	8008f8a <_strtod_l+0x92>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d03b      	beq.n	8008fa0 <_strtod_l+0xa8>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f2e:	782a      	ldrb	r2, [r5, #0]
 8008f30:	2a30      	cmp	r2, #48	@ 0x30
 8008f32:	f040 80b3 	bne.w	800909c <_strtod_l+0x1a4>
 8008f36:	786a      	ldrb	r2, [r5, #1]
 8008f38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f3c:	2a58      	cmp	r2, #88	@ 0x58
 8008f3e:	d16e      	bne.n	800901e <_strtod_l+0x126>
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	ab1a      	add	r3, sp, #104	@ 0x68
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4a8e      	ldr	r2, [pc, #568]	@ (8009184 <_strtod_l+0x28c>)
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f50:	a919      	add	r1, sp, #100	@ 0x64
 8008f52:	f002 ff07 	bl	800bd64 <__gethex>
 8008f56:	f010 060f 	ands.w	r6, r0, #15
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	d005      	beq.n	8008f6a <_strtod_l+0x72>
 8008f5e:	2e06      	cmp	r6, #6
 8008f60:	d128      	bne.n	8008fb4 <_strtod_l+0xbc>
 8008f62:	3501      	adds	r5, #1
 8008f64:	2300      	movs	r3, #0
 8008f66:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 858e 	bne.w	8009a8e <_strtod_l+0xb96>
 8008f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f74:	b1cb      	cbz	r3, 8008faa <_strtod_l+0xb2>
 8008f76:	4652      	mov	r2, sl
 8008f78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008f7c:	ec43 2b10 	vmov	d0, r2, r3
 8008f80:	b01f      	add	sp, #124	@ 0x7c
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	2920      	cmp	r1, #32
 8008f88:	d1ce      	bne.n	8008f28 <_strtod_l+0x30>
 8008f8a:	3201      	adds	r2, #1
 8008f8c:	e7c1      	b.n	8008f12 <_strtod_l+0x1a>
 8008f8e:	292d      	cmp	r1, #45	@ 0x2d
 8008f90:	d1ca      	bne.n	8008f28 <_strtod_l+0x30>
 8008f92:	2101      	movs	r1, #1
 8008f94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f96:	1c51      	adds	r1, r2, #1
 8008f98:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f9a:	7852      	ldrb	r2, [r2, #1]
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d1c5      	bne.n	8008f2c <_strtod_l+0x34>
 8008fa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 8570 	bne.w	8009a8a <_strtod_l+0xb92>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	e7e5      	b.n	8008f7c <_strtod_l+0x84>
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	e7ef      	b.n	8008f94 <_strtod_l+0x9c>
 8008fb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fb6:	b13a      	cbz	r2, 8008fc8 <_strtod_l+0xd0>
 8008fb8:	2135      	movs	r1, #53	@ 0x35
 8008fba:	a81c      	add	r0, sp, #112	@ 0x70
 8008fbc:	f003 fe24 	bl	800cc08 <__copybits>
 8008fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fc2:	9805      	ldr	r0, [sp, #20]
 8008fc4:	f003 f9f2 	bl	800c3ac <_Bfree>
 8008fc8:	3e01      	subs	r6, #1
 8008fca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008fcc:	2e04      	cmp	r6, #4
 8008fce:	d806      	bhi.n	8008fde <_strtod_l+0xe6>
 8008fd0:	e8df f006 	tbb	[pc, r6]
 8008fd4:	201d0314 	.word	0x201d0314
 8008fd8:	14          	.byte	0x14
 8008fd9:	00          	.byte	0x00
 8008fda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008fde:	05e1      	lsls	r1, r4, #23
 8008fe0:	bf48      	it	mi
 8008fe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fea:	0d1b      	lsrs	r3, r3, #20
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1bb      	bne.n	8008f6a <_strtod_l+0x72>
 8008ff2:	f001 ff51 	bl	800ae98 <__errno>
 8008ff6:	2322      	movs	r3, #34	@ 0x22
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	e7b6      	b.n	8008f6a <_strtod_l+0x72>
 8008ffc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009000:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009004:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009008:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800900c:	e7e7      	b.n	8008fde <_strtod_l+0xe6>
 800900e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800918c <_strtod_l+0x294>
 8009012:	e7e4      	b.n	8008fde <_strtod_l+0xe6>
 8009014:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009018:	f04f 3aff 	mov.w	sl, #4294967295
 800901c:	e7df      	b.n	8008fde <_strtod_l+0xe6>
 800901e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	9219      	str	r2, [sp, #100]	@ 0x64
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b30      	cmp	r3, #48	@ 0x30
 8009028:	d0f9      	beq.n	800901e <_strtod_l+0x126>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d09d      	beq.n	8008f6a <_strtod_l+0x72>
 800902e:	2301      	movs	r3, #1
 8009030:	9309      	str	r3, [sp, #36]	@ 0x24
 8009032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009034:	930c      	str	r3, [sp, #48]	@ 0x30
 8009036:	2300      	movs	r3, #0
 8009038:	9308      	str	r3, [sp, #32]
 800903a:	930a      	str	r3, [sp, #40]	@ 0x28
 800903c:	461f      	mov	r7, r3
 800903e:	220a      	movs	r2, #10
 8009040:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009042:	7805      	ldrb	r5, [r0, #0]
 8009044:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009048:	b2d9      	uxtb	r1, r3
 800904a:	2909      	cmp	r1, #9
 800904c:	d928      	bls.n	80090a0 <_strtod_l+0x1a8>
 800904e:	494e      	ldr	r1, [pc, #312]	@ (8009188 <_strtod_l+0x290>)
 8009050:	2201      	movs	r2, #1
 8009052:	f001 fe58 	bl	800ad06 <strncmp>
 8009056:	2800      	cmp	r0, #0
 8009058:	d032      	beq.n	80090c0 <_strtod_l+0x1c8>
 800905a:	2000      	movs	r0, #0
 800905c:	462a      	mov	r2, r5
 800905e:	4681      	mov	r9, r0
 8009060:	463d      	mov	r5, r7
 8009062:	4603      	mov	r3, r0
 8009064:	2a65      	cmp	r2, #101	@ 0x65
 8009066:	d001      	beq.n	800906c <_strtod_l+0x174>
 8009068:	2a45      	cmp	r2, #69	@ 0x45
 800906a:	d114      	bne.n	8009096 <_strtod_l+0x19e>
 800906c:	b91d      	cbnz	r5, 8009076 <_strtod_l+0x17e>
 800906e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009070:	4302      	orrs	r2, r0
 8009072:	d095      	beq.n	8008fa0 <_strtod_l+0xa8>
 8009074:	2500      	movs	r5, #0
 8009076:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009078:	1c62      	adds	r2, r4, #1
 800907a:	9219      	str	r2, [sp, #100]	@ 0x64
 800907c:	7862      	ldrb	r2, [r4, #1]
 800907e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009080:	d077      	beq.n	8009172 <_strtod_l+0x27a>
 8009082:	2a2d      	cmp	r2, #45	@ 0x2d
 8009084:	d07b      	beq.n	800917e <_strtod_l+0x286>
 8009086:	f04f 0c00 	mov.w	ip, #0
 800908a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800908e:	2909      	cmp	r1, #9
 8009090:	f240 8082 	bls.w	8009198 <_strtod_l+0x2a0>
 8009094:	9419      	str	r4, [sp, #100]	@ 0x64
 8009096:	f04f 0800 	mov.w	r8, #0
 800909a:	e0a2      	b.n	80091e2 <_strtod_l+0x2ea>
 800909c:	2300      	movs	r3, #0
 800909e:	e7c7      	b.n	8009030 <_strtod_l+0x138>
 80090a0:	2f08      	cmp	r7, #8
 80090a2:	bfd5      	itete	le
 80090a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80090a6:	9908      	ldrgt	r1, [sp, #32]
 80090a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80090ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090b0:	f100 0001 	add.w	r0, r0, #1
 80090b4:	bfd4      	ite	le
 80090b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80090b8:	9308      	strgt	r3, [sp, #32]
 80090ba:	3701      	adds	r7, #1
 80090bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80090be:	e7bf      	b.n	8009040 <_strtod_l+0x148>
 80090c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80090c6:	785a      	ldrb	r2, [r3, #1]
 80090c8:	b37f      	cbz	r7, 800912a <_strtod_l+0x232>
 80090ca:	4681      	mov	r9, r0
 80090cc:	463d      	mov	r5, r7
 80090ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80090d2:	2b09      	cmp	r3, #9
 80090d4:	d912      	bls.n	80090fc <_strtod_l+0x204>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e7c4      	b.n	8009064 <_strtod_l+0x16c>
 80090da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	9219      	str	r2, [sp, #100]	@ 0x64
 80090e0:	785a      	ldrb	r2, [r3, #1]
 80090e2:	3001      	adds	r0, #1
 80090e4:	2a30      	cmp	r2, #48	@ 0x30
 80090e6:	d0f8      	beq.n	80090da <_strtod_l+0x1e2>
 80090e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	f200 84d3 	bhi.w	8009a98 <_strtod_l+0xba0>
 80090f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090f6:	4681      	mov	r9, r0
 80090f8:	2000      	movs	r0, #0
 80090fa:	4605      	mov	r5, r0
 80090fc:	3a30      	subs	r2, #48	@ 0x30
 80090fe:	f100 0301 	add.w	r3, r0, #1
 8009102:	d02a      	beq.n	800915a <_strtod_l+0x262>
 8009104:	4499      	add	r9, r3
 8009106:	eb00 0c05 	add.w	ip, r0, r5
 800910a:	462b      	mov	r3, r5
 800910c:	210a      	movs	r1, #10
 800910e:	4563      	cmp	r3, ip
 8009110:	d10d      	bne.n	800912e <_strtod_l+0x236>
 8009112:	1c69      	adds	r1, r5, #1
 8009114:	4401      	add	r1, r0
 8009116:	4428      	add	r0, r5
 8009118:	2808      	cmp	r0, #8
 800911a:	dc16      	bgt.n	800914a <_strtod_l+0x252>
 800911c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800911e:	230a      	movs	r3, #10
 8009120:	fb03 2300 	mla	r3, r3, r0, r2
 8009124:	930a      	str	r3, [sp, #40]	@ 0x28
 8009126:	2300      	movs	r3, #0
 8009128:	e018      	b.n	800915c <_strtod_l+0x264>
 800912a:	4638      	mov	r0, r7
 800912c:	e7da      	b.n	80090e4 <_strtod_l+0x1ec>
 800912e:	2b08      	cmp	r3, #8
 8009130:	f103 0301 	add.w	r3, r3, #1
 8009134:	dc03      	bgt.n	800913e <_strtod_l+0x246>
 8009136:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009138:	434e      	muls	r6, r1
 800913a:	960a      	str	r6, [sp, #40]	@ 0x28
 800913c:	e7e7      	b.n	800910e <_strtod_l+0x216>
 800913e:	2b10      	cmp	r3, #16
 8009140:	bfde      	ittt	le
 8009142:	9e08      	ldrle	r6, [sp, #32]
 8009144:	434e      	mulle	r6, r1
 8009146:	9608      	strle	r6, [sp, #32]
 8009148:	e7e1      	b.n	800910e <_strtod_l+0x216>
 800914a:	280f      	cmp	r0, #15
 800914c:	dceb      	bgt.n	8009126 <_strtod_l+0x22e>
 800914e:	9808      	ldr	r0, [sp, #32]
 8009150:	230a      	movs	r3, #10
 8009152:	fb03 2300 	mla	r3, r3, r0, r2
 8009156:	9308      	str	r3, [sp, #32]
 8009158:	e7e5      	b.n	8009126 <_strtod_l+0x22e>
 800915a:	4629      	mov	r1, r5
 800915c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800915e:	1c50      	adds	r0, r2, #1
 8009160:	9019      	str	r0, [sp, #100]	@ 0x64
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	4618      	mov	r0, r3
 8009166:	460d      	mov	r5, r1
 8009168:	e7b1      	b.n	80090ce <_strtod_l+0x1d6>
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	2301      	movs	r3, #1
 8009170:	e77d      	b.n	800906e <_strtod_l+0x176>
 8009172:	f04f 0c00 	mov.w	ip, #0
 8009176:	1ca2      	adds	r2, r4, #2
 8009178:	9219      	str	r2, [sp, #100]	@ 0x64
 800917a:	78a2      	ldrb	r2, [r4, #2]
 800917c:	e785      	b.n	800908a <_strtod_l+0x192>
 800917e:	f04f 0c01 	mov.w	ip, #1
 8009182:	e7f8      	b.n	8009176 <_strtod_l+0x27e>
 8009184:	0800da20 	.word	0x0800da20
 8009188:	0800da08 	.word	0x0800da08
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009192:	1c51      	adds	r1, r2, #1
 8009194:	9119      	str	r1, [sp, #100]	@ 0x64
 8009196:	7852      	ldrb	r2, [r2, #1]
 8009198:	2a30      	cmp	r2, #48	@ 0x30
 800919a:	d0f9      	beq.n	8009190 <_strtod_l+0x298>
 800919c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80091a0:	2908      	cmp	r1, #8
 80091a2:	f63f af78 	bhi.w	8009096 <_strtod_l+0x19e>
 80091a6:	3a30      	subs	r2, #48	@ 0x30
 80091a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80091aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80091ae:	f04f 080a 	mov.w	r8, #10
 80091b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091b4:	1c56      	adds	r6, r2, #1
 80091b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80091b8:	7852      	ldrb	r2, [r2, #1]
 80091ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80091be:	f1be 0f09 	cmp.w	lr, #9
 80091c2:	d939      	bls.n	8009238 <_strtod_l+0x340>
 80091c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091c6:	1a76      	subs	r6, r6, r1
 80091c8:	2e08      	cmp	r6, #8
 80091ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80091ce:	dc03      	bgt.n	80091d8 <_strtod_l+0x2e0>
 80091d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091d2:	4588      	cmp	r8, r1
 80091d4:	bfa8      	it	ge
 80091d6:	4688      	movge	r8, r1
 80091d8:	f1bc 0f00 	cmp.w	ip, #0
 80091dc:	d001      	beq.n	80091e2 <_strtod_l+0x2ea>
 80091de:	f1c8 0800 	rsb	r8, r8, #0
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	d14e      	bne.n	8009284 <_strtod_l+0x38c>
 80091e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091e8:	4308      	orrs	r0, r1
 80091ea:	f47f aebe 	bne.w	8008f6a <_strtod_l+0x72>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f aed6 	bne.w	8008fa0 <_strtod_l+0xa8>
 80091f4:	2a69      	cmp	r2, #105	@ 0x69
 80091f6:	d028      	beq.n	800924a <_strtod_l+0x352>
 80091f8:	dc25      	bgt.n	8009246 <_strtod_l+0x34e>
 80091fa:	2a49      	cmp	r2, #73	@ 0x49
 80091fc:	d025      	beq.n	800924a <_strtod_l+0x352>
 80091fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8009200:	f47f aece 	bne.w	8008fa0 <_strtod_l+0xa8>
 8009204:	499b      	ldr	r1, [pc, #620]	@ (8009474 <_strtod_l+0x57c>)
 8009206:	a819      	add	r0, sp, #100	@ 0x64
 8009208:	f002 ffce 	bl	800c1a8 <__match>
 800920c:	2800      	cmp	r0, #0
 800920e:	f43f aec7 	beq.w	8008fa0 <_strtod_l+0xa8>
 8009212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b28      	cmp	r3, #40	@ 0x28
 8009218:	d12e      	bne.n	8009278 <_strtod_l+0x380>
 800921a:	4997      	ldr	r1, [pc, #604]	@ (8009478 <_strtod_l+0x580>)
 800921c:	aa1c      	add	r2, sp, #112	@ 0x70
 800921e:	a819      	add	r0, sp, #100	@ 0x64
 8009220:	f002 ffd6 	bl	800c1d0 <__hexnan>
 8009224:	2805      	cmp	r0, #5
 8009226:	d127      	bne.n	8009278 <_strtod_l+0x380>
 8009228:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800922a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800922e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009232:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009236:	e698      	b.n	8008f6a <_strtod_l+0x72>
 8009238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800923a:	fb08 2101 	mla	r1, r8, r1, r2
 800923e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009242:	920e      	str	r2, [sp, #56]	@ 0x38
 8009244:	e7b5      	b.n	80091b2 <_strtod_l+0x2ba>
 8009246:	2a6e      	cmp	r2, #110	@ 0x6e
 8009248:	e7da      	b.n	8009200 <_strtod_l+0x308>
 800924a:	498c      	ldr	r1, [pc, #560]	@ (800947c <_strtod_l+0x584>)
 800924c:	a819      	add	r0, sp, #100	@ 0x64
 800924e:	f002 ffab 	bl	800c1a8 <__match>
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aea4 	beq.w	8008fa0 <_strtod_l+0xa8>
 8009258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800925a:	4989      	ldr	r1, [pc, #548]	@ (8009480 <_strtod_l+0x588>)
 800925c:	3b01      	subs	r3, #1
 800925e:	a819      	add	r0, sp, #100	@ 0x64
 8009260:	9319      	str	r3, [sp, #100]	@ 0x64
 8009262:	f002 ffa1 	bl	800c1a8 <__match>
 8009266:	b910      	cbnz	r0, 800926e <_strtod_l+0x376>
 8009268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800926a:	3301      	adds	r3, #1
 800926c:	9319      	str	r3, [sp, #100]	@ 0x64
 800926e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009490 <_strtod_l+0x598>
 8009272:	f04f 0a00 	mov.w	sl, #0
 8009276:	e678      	b.n	8008f6a <_strtod_l+0x72>
 8009278:	4882      	ldr	r0, [pc, #520]	@ (8009484 <_strtod_l+0x58c>)
 800927a:	f001 fe49 	bl	800af10 <nan>
 800927e:	ec5b ab10 	vmov	sl, fp, d0
 8009282:	e672      	b.n	8008f6a <_strtod_l+0x72>
 8009284:	eba8 0309 	sub.w	r3, r8, r9
 8009288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800928a:	9309      	str	r3, [sp, #36]	@ 0x24
 800928c:	2f00      	cmp	r7, #0
 800928e:	bf08      	it	eq
 8009290:	462f      	moveq	r7, r5
 8009292:	2d10      	cmp	r5, #16
 8009294:	462c      	mov	r4, r5
 8009296:	bfa8      	it	ge
 8009298:	2410      	movge	r4, #16
 800929a:	f7f7 f93b 	bl	8000514 <__aeabi_ui2d>
 800929e:	2d09      	cmp	r5, #9
 80092a0:	4682      	mov	sl, r0
 80092a2:	468b      	mov	fp, r1
 80092a4:	dc13      	bgt.n	80092ce <_strtod_l+0x3d6>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f43f ae5e 	beq.w	8008f6a <_strtod_l+0x72>
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	dd78      	ble.n	80093a4 <_strtod_l+0x4ac>
 80092b2:	2b16      	cmp	r3, #22
 80092b4:	dc5f      	bgt.n	8009376 <_strtod_l+0x47e>
 80092b6:	4974      	ldr	r1, [pc, #464]	@ (8009488 <_strtod_l+0x590>)
 80092b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	e64d      	b.n	8008f6a <_strtod_l+0x72>
 80092ce:	4b6e      	ldr	r3, [pc, #440]	@ (8009488 <_strtod_l+0x590>)
 80092d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80092d8:	f7f7 f996 	bl	8000608 <__aeabi_dmul>
 80092dc:	4682      	mov	sl, r0
 80092de:	9808      	ldr	r0, [sp, #32]
 80092e0:	468b      	mov	fp, r1
 80092e2:	f7f7 f917 	bl	8000514 <__aeabi_ui2d>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4650      	mov	r0, sl
 80092ec:	4659      	mov	r1, fp
 80092ee:	f7f6 ffd5 	bl	800029c <__adddf3>
 80092f2:	2d0f      	cmp	r5, #15
 80092f4:	4682      	mov	sl, r0
 80092f6:	468b      	mov	fp, r1
 80092f8:	ddd5      	ble.n	80092a6 <_strtod_l+0x3ae>
 80092fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fc:	1b2c      	subs	r4, r5, r4
 80092fe:	441c      	add	r4, r3
 8009300:	2c00      	cmp	r4, #0
 8009302:	f340 8096 	ble.w	8009432 <_strtod_l+0x53a>
 8009306:	f014 030f 	ands.w	r3, r4, #15
 800930a:	d00a      	beq.n	8009322 <_strtod_l+0x42a>
 800930c:	495e      	ldr	r1, [pc, #376]	@ (8009488 <_strtod_l+0x590>)
 800930e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931a:	f7f7 f975 	bl	8000608 <__aeabi_dmul>
 800931e:	4682      	mov	sl, r0
 8009320:	468b      	mov	fp, r1
 8009322:	f034 040f 	bics.w	r4, r4, #15
 8009326:	d073      	beq.n	8009410 <_strtod_l+0x518>
 8009328:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800932c:	dd48      	ble.n	80093c0 <_strtod_l+0x4c8>
 800932e:	2400      	movs	r4, #0
 8009330:	46a0      	mov	r8, r4
 8009332:	940a      	str	r4, [sp, #40]	@ 0x28
 8009334:	46a1      	mov	r9, r4
 8009336:	9a05      	ldr	r2, [sp, #20]
 8009338:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009490 <_strtod_l+0x598>
 800933c:	2322      	movs	r3, #34	@ 0x22
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	f43f ae0f 	beq.w	8008f6a <_strtod_l+0x72>
 800934c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800934e:	9805      	ldr	r0, [sp, #20]
 8009350:	f003 f82c 	bl	800c3ac <_Bfree>
 8009354:	9805      	ldr	r0, [sp, #20]
 8009356:	4649      	mov	r1, r9
 8009358:	f003 f828 	bl	800c3ac <_Bfree>
 800935c:	9805      	ldr	r0, [sp, #20]
 800935e:	4641      	mov	r1, r8
 8009360:	f003 f824 	bl	800c3ac <_Bfree>
 8009364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009366:	9805      	ldr	r0, [sp, #20]
 8009368:	f003 f820 	bl	800c3ac <_Bfree>
 800936c:	9805      	ldr	r0, [sp, #20]
 800936e:	4621      	mov	r1, r4
 8009370:	f003 f81c 	bl	800c3ac <_Bfree>
 8009374:	e5f9      	b.n	8008f6a <_strtod_l+0x72>
 8009376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009378:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800937c:	4293      	cmp	r3, r2
 800937e:	dbbc      	blt.n	80092fa <_strtod_l+0x402>
 8009380:	4c41      	ldr	r4, [pc, #260]	@ (8009488 <_strtod_l+0x590>)
 8009382:	f1c5 050f 	rsb	r5, r5, #15
 8009386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009392:	f7f7 f939 	bl	8000608 <__aeabi_dmul>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	1b5d      	subs	r5, r3, r5
 800939a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800939e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093a2:	e78f      	b.n	80092c4 <_strtod_l+0x3cc>
 80093a4:	3316      	adds	r3, #22
 80093a6:	dba8      	blt.n	80092fa <_strtod_l+0x402>
 80093a8:	4b37      	ldr	r3, [pc, #220]	@ (8009488 <_strtod_l+0x590>)
 80093aa:	eba9 0808 	sub.w	r8, r9, r8
 80093ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80093b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80093b6:	4650      	mov	r0, sl
 80093b8:	4659      	mov	r1, fp
 80093ba:	f7f7 fa4f 	bl	800085c <__aeabi_ddiv>
 80093be:	e783      	b.n	80092c8 <_strtod_l+0x3d0>
 80093c0:	4b32      	ldr	r3, [pc, #200]	@ (800948c <_strtod_l+0x594>)
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	2300      	movs	r3, #0
 80093c6:	1124      	asrs	r4, r4, #4
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	461e      	mov	r6, r3
 80093ce:	2c01      	cmp	r4, #1
 80093d0:	dc21      	bgt.n	8009416 <_strtod_l+0x51e>
 80093d2:	b10b      	cbz	r3, 80093d8 <_strtod_l+0x4e0>
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	492c      	ldr	r1, [pc, #176]	@ (800948c <_strtod_l+0x594>)
 80093da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80093de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80093e2:	4652      	mov	r2, sl
 80093e4:	465b      	mov	r3, fp
 80093e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ea:	f7f7 f90d 	bl	8000608 <__aeabi_dmul>
 80093ee:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <_strtod_l+0x598>)
 80093f0:	460a      	mov	r2, r1
 80093f2:	400b      	ands	r3, r1
 80093f4:	4927      	ldr	r1, [pc, #156]	@ (8009494 <_strtod_l+0x59c>)
 80093f6:	428b      	cmp	r3, r1
 80093f8:	4682      	mov	sl, r0
 80093fa:	d898      	bhi.n	800932e <_strtod_l+0x436>
 80093fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009400:	428b      	cmp	r3, r1
 8009402:	bf86      	itte	hi
 8009404:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009498 <_strtod_l+0x5a0>
 8009408:	f04f 3aff 	movhi.w	sl, #4294967295
 800940c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009410:	2300      	movs	r3, #0
 8009412:	9308      	str	r3, [sp, #32]
 8009414:	e07a      	b.n	800950c <_strtod_l+0x614>
 8009416:	07e2      	lsls	r2, r4, #31
 8009418:	d505      	bpl.n	8009426 <_strtod_l+0x52e>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8f2 	bl	8000608 <__aeabi_dmul>
 8009424:	2301      	movs	r3, #1
 8009426:	9a08      	ldr	r2, [sp, #32]
 8009428:	3208      	adds	r2, #8
 800942a:	3601      	adds	r6, #1
 800942c:	1064      	asrs	r4, r4, #1
 800942e:	9208      	str	r2, [sp, #32]
 8009430:	e7cd      	b.n	80093ce <_strtod_l+0x4d6>
 8009432:	d0ed      	beq.n	8009410 <_strtod_l+0x518>
 8009434:	4264      	negs	r4, r4
 8009436:	f014 020f 	ands.w	r2, r4, #15
 800943a:	d00a      	beq.n	8009452 <_strtod_l+0x55a>
 800943c:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <_strtod_l+0x590>)
 800943e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f7 fa07 	bl	800085c <__aeabi_ddiv>
 800944e:	4682      	mov	sl, r0
 8009450:	468b      	mov	fp, r1
 8009452:	1124      	asrs	r4, r4, #4
 8009454:	d0dc      	beq.n	8009410 <_strtod_l+0x518>
 8009456:	2c1f      	cmp	r4, #31
 8009458:	dd20      	ble.n	800949c <_strtod_l+0x5a4>
 800945a:	2400      	movs	r4, #0
 800945c:	46a0      	mov	r8, r4
 800945e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009460:	46a1      	mov	r9, r4
 8009462:	9a05      	ldr	r2, [sp, #20]
 8009464:	2322      	movs	r3, #34	@ 0x22
 8009466:	f04f 0a00 	mov.w	sl, #0
 800946a:	f04f 0b00 	mov.w	fp, #0
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e768      	b.n	8009344 <_strtod_l+0x44c>
 8009472:	bf00      	nop
 8009474:	0800da6d 	.word	0x0800da6d
 8009478:	0800da0c 	.word	0x0800da0c
 800947c:	0800da65 	.word	0x0800da65
 8009480:	0800db51 	.word	0x0800db51
 8009484:	0800db4d 	.word	0x0800db4d
 8009488:	0800dcb8 	.word	0x0800dcb8
 800948c:	0800dc90 	.word	0x0800dc90
 8009490:	7ff00000 	.word	0x7ff00000
 8009494:	7ca00000 	.word	0x7ca00000
 8009498:	7fefffff 	.word	0x7fefffff
 800949c:	f014 0310 	ands.w	r3, r4, #16
 80094a0:	bf18      	it	ne
 80094a2:	236a      	movne	r3, #106	@ 0x6a
 80094a4:	4ea9      	ldr	r6, [pc, #676]	@ (800974c <_strtod_l+0x854>)
 80094a6:	9308      	str	r3, [sp, #32]
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	2300      	movs	r3, #0
 80094ae:	07e2      	lsls	r2, r4, #31
 80094b0:	d504      	bpl.n	80094bc <_strtod_l+0x5c4>
 80094b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094b6:	f7f7 f8a7 	bl	8000608 <__aeabi_dmul>
 80094ba:	2301      	movs	r3, #1
 80094bc:	1064      	asrs	r4, r4, #1
 80094be:	f106 0608 	add.w	r6, r6, #8
 80094c2:	d1f4      	bne.n	80094ae <_strtod_l+0x5b6>
 80094c4:	b10b      	cbz	r3, 80094ca <_strtod_l+0x5d2>
 80094c6:	4682      	mov	sl, r0
 80094c8:	468b      	mov	fp, r1
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	b1b3      	cbz	r3, 80094fc <_strtod_l+0x604>
 80094ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80094d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	4659      	mov	r1, fp
 80094da:	dd0f      	ble.n	80094fc <_strtod_l+0x604>
 80094dc:	2b1f      	cmp	r3, #31
 80094de:	dd55      	ble.n	800958c <_strtod_l+0x694>
 80094e0:	2b34      	cmp	r3, #52	@ 0x34
 80094e2:	bfde      	ittt	le
 80094e4:	f04f 33ff 	movle.w	r3, #4294967295
 80094e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80094ec:	4093      	lslle	r3, r2
 80094ee:	f04f 0a00 	mov.w	sl, #0
 80094f2:	bfcc      	ite	gt
 80094f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80094f8:	ea03 0b01 	andle.w	fp, r3, r1
 80094fc:	2200      	movs	r2, #0
 80094fe:	2300      	movs	r3, #0
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	f7f7 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1a6      	bne.n	800945a <_strtod_l+0x562>
 800950c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	462b      	mov	r3, r5
 8009516:	463a      	mov	r2, r7
 8009518:	f002 ffb0 	bl	800c47c <__s2b>
 800951c:	900a      	str	r0, [sp, #40]	@ 0x28
 800951e:	2800      	cmp	r0, #0
 8009520:	f43f af05 	beq.w	800932e <_strtod_l+0x436>
 8009524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009526:	2a00      	cmp	r2, #0
 8009528:	eba9 0308 	sub.w	r3, r9, r8
 800952c:	bfa8      	it	ge
 800952e:	2300      	movge	r3, #0
 8009530:	9312      	str	r3, [sp, #72]	@ 0x48
 8009532:	2400      	movs	r4, #0
 8009534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009538:	9316      	str	r3, [sp, #88]	@ 0x58
 800953a:	46a0      	mov	r8, r4
 800953c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953e:	9805      	ldr	r0, [sp, #20]
 8009540:	6859      	ldr	r1, [r3, #4]
 8009542:	f002 fef3 	bl	800c32c <_Balloc>
 8009546:	4681      	mov	r9, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f aef4 	beq.w	8009336 <_strtod_l+0x43e>
 800954e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	3202      	adds	r2, #2
 8009554:	f103 010c 	add.w	r1, r3, #12
 8009558:	0092      	lsls	r2, r2, #2
 800955a:	300c      	adds	r0, #12
 800955c:	f001 fcc9 	bl	800aef2 <memcpy>
 8009560:	ec4b ab10 	vmov	d0, sl, fp
 8009564:	9805      	ldr	r0, [sp, #20]
 8009566:	aa1c      	add	r2, sp, #112	@ 0x70
 8009568:	a91b      	add	r1, sp, #108	@ 0x6c
 800956a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800956e:	f003 fac1 	bl	800caf4 <__d2b>
 8009572:	901a      	str	r0, [sp, #104]	@ 0x68
 8009574:	2800      	cmp	r0, #0
 8009576:	f43f aede 	beq.w	8009336 <_strtod_l+0x43e>
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	2101      	movs	r1, #1
 800957e:	f003 f813 	bl	800c5a8 <__i2b>
 8009582:	4680      	mov	r8, r0
 8009584:	b948      	cbnz	r0, 800959a <_strtod_l+0x6a2>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	e6d4      	b.n	8009336 <_strtod_l+0x43e>
 800958c:	f04f 32ff 	mov.w	r2, #4294967295
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	ea03 0a0a 	and.w	sl, r3, sl
 8009598:	e7b0      	b.n	80094fc <_strtod_l+0x604>
 800959a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800959c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800959e:	2d00      	cmp	r5, #0
 80095a0:	bfab      	itete	ge
 80095a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80095a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80095a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80095a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80095aa:	bfac      	ite	ge
 80095ac:	18ef      	addge	r7, r5, r3
 80095ae:	1b5e      	sublt	r6, r3, r5
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	1aed      	subs	r5, r5, r3
 80095b4:	4415      	add	r5, r2
 80095b6:	4b66      	ldr	r3, [pc, #408]	@ (8009750 <_strtod_l+0x858>)
 80095b8:	3d01      	subs	r5, #1
 80095ba:	429d      	cmp	r5, r3
 80095bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095c0:	da50      	bge.n	8009664 <_strtod_l+0x76c>
 80095c2:	1b5b      	subs	r3, r3, r5
 80095c4:	2b1f      	cmp	r3, #31
 80095c6:	eba2 0203 	sub.w	r2, r2, r3
 80095ca:	f04f 0101 	mov.w	r1, #1
 80095ce:	dc3d      	bgt.n	800964c <_strtod_l+0x754>
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d6:	2300      	movs	r3, #0
 80095d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095da:	18bd      	adds	r5, r7, r2
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	42af      	cmp	r7, r5
 80095e0:	4416      	add	r6, r2
 80095e2:	441e      	add	r6, r3
 80095e4:	463b      	mov	r3, r7
 80095e6:	bfa8      	it	ge
 80095e8:	462b      	movge	r3, r5
 80095ea:	42b3      	cmp	r3, r6
 80095ec:	bfa8      	it	ge
 80095ee:	4633      	movge	r3, r6
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfc2      	ittt	gt
 80095f4:	1aed      	subgt	r5, r5, r3
 80095f6:	1af6      	subgt	r6, r6, r3
 80095f8:	1aff      	subgt	r7, r7, r3
 80095fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd16      	ble.n	800962e <_strtod_l+0x736>
 8009600:	4641      	mov	r1, r8
 8009602:	9805      	ldr	r0, [sp, #20]
 8009604:	461a      	mov	r2, r3
 8009606:	f003 f88f 	bl	800c728 <__pow5mult>
 800960a:	4680      	mov	r8, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d0ba      	beq.n	8009586 <_strtod_l+0x68e>
 8009610:	4601      	mov	r1, r0
 8009612:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009614:	9805      	ldr	r0, [sp, #20]
 8009616:	f002 ffdd 	bl	800c5d4 <__multiply>
 800961a:	900e      	str	r0, [sp, #56]	@ 0x38
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f ae8a 	beq.w	8009336 <_strtod_l+0x43e>
 8009622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009624:	9805      	ldr	r0, [sp, #20]
 8009626:	f002 fec1 	bl	800c3ac <_Bfree>
 800962a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800962c:	931a      	str	r3, [sp, #104]	@ 0x68
 800962e:	2d00      	cmp	r5, #0
 8009630:	dc1d      	bgt.n	800966e <_strtod_l+0x776>
 8009632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd23      	ble.n	8009680 <_strtod_l+0x788>
 8009638:	4649      	mov	r1, r9
 800963a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800963c:	9805      	ldr	r0, [sp, #20]
 800963e:	f003 f873 	bl	800c728 <__pow5mult>
 8009642:	4681      	mov	r9, r0
 8009644:	b9e0      	cbnz	r0, 8009680 <_strtod_l+0x788>
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	e674      	b.n	8009336 <_strtod_l+0x43e>
 800964c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009650:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009654:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009658:	35e2      	adds	r5, #226	@ 0xe2
 800965a:	fa01 f305 	lsl.w	r3, r1, r5
 800965e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009660:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009662:	e7ba      	b.n	80095da <_strtod_l+0x6e2>
 8009664:	2300      	movs	r3, #0
 8009666:	9310      	str	r3, [sp, #64]	@ 0x40
 8009668:	2301      	movs	r3, #1
 800966a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800966c:	e7b5      	b.n	80095da <_strtod_l+0x6e2>
 800966e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009670:	9805      	ldr	r0, [sp, #20]
 8009672:	462a      	mov	r2, r5
 8009674:	f003 f8b2 	bl	800c7dc <__lshift>
 8009678:	901a      	str	r0, [sp, #104]	@ 0x68
 800967a:	2800      	cmp	r0, #0
 800967c:	d1d9      	bne.n	8009632 <_strtod_l+0x73a>
 800967e:	e65a      	b.n	8009336 <_strtod_l+0x43e>
 8009680:	2e00      	cmp	r6, #0
 8009682:	dd07      	ble.n	8009694 <_strtod_l+0x79c>
 8009684:	4649      	mov	r1, r9
 8009686:	9805      	ldr	r0, [sp, #20]
 8009688:	4632      	mov	r2, r6
 800968a:	f003 f8a7 	bl	800c7dc <__lshift>
 800968e:	4681      	mov	r9, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d0d8      	beq.n	8009646 <_strtod_l+0x74e>
 8009694:	2f00      	cmp	r7, #0
 8009696:	dd08      	ble.n	80096aa <_strtod_l+0x7b2>
 8009698:	4641      	mov	r1, r8
 800969a:	9805      	ldr	r0, [sp, #20]
 800969c:	463a      	mov	r2, r7
 800969e:	f003 f89d 	bl	800c7dc <__lshift>
 80096a2:	4680      	mov	r8, r0
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f43f ae46 	beq.w	8009336 <_strtod_l+0x43e>
 80096aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	464a      	mov	r2, r9
 80096b0:	f003 f91c 	bl	800c8ec <__mdiff>
 80096b4:	4604      	mov	r4, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f ae3d 	beq.w	8009336 <_strtod_l+0x43e>
 80096bc:	68c3      	ldr	r3, [r0, #12]
 80096be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096c0:	2300      	movs	r3, #0
 80096c2:	60c3      	str	r3, [r0, #12]
 80096c4:	4641      	mov	r1, r8
 80096c6:	f003 f8f5 	bl	800c8b4 <__mcmp>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	da46      	bge.n	800975c <_strtod_l+0x864>
 80096ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d0:	ea53 030a 	orrs.w	r3, r3, sl
 80096d4:	d16c      	bne.n	80097b0 <_strtod_l+0x8b8>
 80096d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d168      	bne.n	80097b0 <_strtod_l+0x8b8>
 80096de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096e2:	0d1b      	lsrs	r3, r3, #20
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096ea:	d961      	bls.n	80097b0 <_strtod_l+0x8b8>
 80096ec:	6963      	ldr	r3, [r4, #20]
 80096ee:	b913      	cbnz	r3, 80096f6 <_strtod_l+0x7fe>
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	dd5c      	ble.n	80097b0 <_strtod_l+0x8b8>
 80096f6:	4621      	mov	r1, r4
 80096f8:	2201      	movs	r2, #1
 80096fa:	9805      	ldr	r0, [sp, #20]
 80096fc:	f003 f86e 	bl	800c7dc <__lshift>
 8009700:	4641      	mov	r1, r8
 8009702:	4604      	mov	r4, r0
 8009704:	f003 f8d6 	bl	800c8b4 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	dd51      	ble.n	80097b0 <_strtod_l+0x8b8>
 800970c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009710:	9a08      	ldr	r2, [sp, #32]
 8009712:	0d1b      	lsrs	r3, r3, #20
 8009714:	051b      	lsls	r3, r3, #20
 8009716:	2a00      	cmp	r2, #0
 8009718:	d06b      	beq.n	80097f2 <_strtod_l+0x8fa>
 800971a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800971e:	d868      	bhi.n	80097f2 <_strtod_l+0x8fa>
 8009720:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009724:	f67f ae9d 	bls.w	8009462 <_strtod_l+0x56a>
 8009728:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <_strtod_l+0x85c>)
 800972a:	4650      	mov	r0, sl
 800972c:	4659      	mov	r1, fp
 800972e:	2200      	movs	r2, #0
 8009730:	f7f6 ff6a 	bl	8000608 <__aeabi_dmul>
 8009734:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <_strtod_l+0x860>)
 8009736:	400b      	ands	r3, r1
 8009738:	4682      	mov	sl, r0
 800973a:	468b      	mov	fp, r1
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f ae05 	bne.w	800934c <_strtod_l+0x454>
 8009742:	9a05      	ldr	r2, [sp, #20]
 8009744:	2322      	movs	r3, #34	@ 0x22
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e600      	b.n	800934c <_strtod_l+0x454>
 800974a:	bf00      	nop
 800974c:	0800da38 	.word	0x0800da38
 8009750:	fffffc02 	.word	0xfffffc02
 8009754:	39500000 	.word	0x39500000
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009760:	d165      	bne.n	800982e <_strtod_l+0x936>
 8009762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009768:	b35a      	cbz	r2, 80097c2 <_strtod_l+0x8ca>
 800976a:	4a9f      	ldr	r2, [pc, #636]	@ (80099e8 <_strtod_l+0xaf0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d12b      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009770:	9b08      	ldr	r3, [sp, #32]
 8009772:	4651      	mov	r1, sl
 8009774:	b303      	cbz	r3, 80097b8 <_strtod_l+0x8c0>
 8009776:	4b9d      	ldr	r3, [pc, #628]	@ (80099ec <_strtod_l+0xaf4>)
 8009778:	465a      	mov	r2, fp
 800977a:	4013      	ands	r3, r2
 800977c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	d81b      	bhi.n	80097be <_strtod_l+0x8c6>
 8009786:	0d1b      	lsrs	r3, r3, #20
 8009788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	4299      	cmp	r1, r3
 8009792:	d119      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009794:	4b96      	ldr	r3, [pc, #600]	@ (80099f0 <_strtod_l+0xaf8>)
 8009796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009798:	429a      	cmp	r2, r3
 800979a:	d102      	bne.n	80097a2 <_strtod_l+0x8aa>
 800979c:	3101      	adds	r1, #1
 800979e:	f43f adca 	beq.w	8009336 <_strtod_l+0x43e>
 80097a2:	4b92      	ldr	r3, [pc, #584]	@ (80099ec <_strtod_l+0xaf4>)
 80097a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097a6:	401a      	ands	r2, r3
 80097a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80097ac:	f04f 0a00 	mov.w	sl, #0
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1b8      	bne.n	8009728 <_strtod_l+0x830>
 80097b6:	e5c9      	b.n	800934c <_strtod_l+0x454>
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	e7e8      	b.n	8009790 <_strtod_l+0x898>
 80097be:	4613      	mov	r3, r2
 80097c0:	e7e6      	b.n	8009790 <_strtod_l+0x898>
 80097c2:	ea53 030a 	orrs.w	r3, r3, sl
 80097c6:	d0a1      	beq.n	800970c <_strtod_l+0x814>
 80097c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097ca:	b1db      	cbz	r3, 8009804 <_strtod_l+0x90c>
 80097cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ce:	4213      	tst	r3, r2
 80097d0:	d0ee      	beq.n	80097b0 <_strtod_l+0x8b8>
 80097d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d4:	9a08      	ldr	r2, [sp, #32]
 80097d6:	4650      	mov	r0, sl
 80097d8:	4659      	mov	r1, fp
 80097da:	b1bb      	cbz	r3, 800980c <_strtod_l+0x914>
 80097dc:	f7ff fb6c 	bl	8008eb8 <sulp>
 80097e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e4:	ec53 2b10 	vmov	r2, r3, d0
 80097e8:	f7f6 fd58 	bl	800029c <__adddf3>
 80097ec:	4682      	mov	sl, r0
 80097ee:	468b      	mov	fp, r1
 80097f0:	e7de      	b.n	80097b0 <_strtod_l+0x8b8>
 80097f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80097f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097fe:	f04f 3aff 	mov.w	sl, #4294967295
 8009802:	e7d5      	b.n	80097b0 <_strtod_l+0x8b8>
 8009804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009806:	ea13 0f0a 	tst.w	r3, sl
 800980a:	e7e1      	b.n	80097d0 <_strtod_l+0x8d8>
 800980c:	f7ff fb54 	bl	8008eb8 <sulp>
 8009810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009814:	ec53 2b10 	vmov	r2, r3, d0
 8009818:	f7f6 fd3e 	bl	8000298 <__aeabi_dsub>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4682      	mov	sl, r0
 8009822:	468b      	mov	fp, r1
 8009824:	f7f7 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 8009828:	2800      	cmp	r0, #0
 800982a:	d0c1      	beq.n	80097b0 <_strtod_l+0x8b8>
 800982c:	e619      	b.n	8009462 <_strtod_l+0x56a>
 800982e:	4641      	mov	r1, r8
 8009830:	4620      	mov	r0, r4
 8009832:	f003 f9b7 	bl	800cba4 <__ratio>
 8009836:	ec57 6b10 	vmov	r6, r7, d0
 800983a:	2200      	movs	r2, #0
 800983c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f7 f95c 	bl	8000b00 <__aeabi_dcmple>
 8009848:	2800      	cmp	r0, #0
 800984a:	d06f      	beq.n	800992c <_strtod_l+0xa34>
 800984c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d17a      	bne.n	8009948 <_strtod_l+0xa50>
 8009852:	f1ba 0f00 	cmp.w	sl, #0
 8009856:	d158      	bne.n	800990a <_strtod_l+0xa12>
 8009858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800985a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800985e:	2b00      	cmp	r3, #0
 8009860:	d15a      	bne.n	8009918 <_strtod_l+0xa20>
 8009862:	4b64      	ldr	r3, [pc, #400]	@ (80099f4 <_strtod_l+0xafc>)
 8009864:	2200      	movs	r2, #0
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f93f 	bl	8000aec <__aeabi_dcmplt>
 800986e:	2800      	cmp	r0, #0
 8009870:	d159      	bne.n	8009926 <_strtod_l+0xa2e>
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	4b60      	ldr	r3, [pc, #384]	@ (80099f8 <_strtod_l+0xb00>)
 8009878:	2200      	movs	r2, #0
 800987a:	f7f6 fec5 	bl	8000608 <__aeabi_dmul>
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009886:	9606      	str	r6, [sp, #24]
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800988e:	4d57      	ldr	r5, [pc, #348]	@ (80099ec <_strtod_l+0xaf4>)
 8009890:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009896:	401d      	ands	r5, r3
 8009898:	4b58      	ldr	r3, [pc, #352]	@ (80099fc <_strtod_l+0xb04>)
 800989a:	429d      	cmp	r5, r3
 800989c:	f040 80b2 	bne.w	8009a04 <_strtod_l+0xb0c>
 80098a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80098a6:	ec4b ab10 	vmov	d0, sl, fp
 80098aa:	f003 f8b3 	bl	800ca14 <__ulp>
 80098ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098b2:	ec51 0b10 	vmov	r0, r1, d0
 80098b6:	f7f6 fea7 	bl	8000608 <__aeabi_dmul>
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	f7f6 fced 	bl	800029c <__adddf3>
 80098c2:	460b      	mov	r3, r1
 80098c4:	4949      	ldr	r1, [pc, #292]	@ (80099ec <_strtod_l+0xaf4>)
 80098c6:	4a4e      	ldr	r2, [pc, #312]	@ (8009a00 <_strtod_l+0xb08>)
 80098c8:	4019      	ands	r1, r3
 80098ca:	4291      	cmp	r1, r2
 80098cc:	4682      	mov	sl, r0
 80098ce:	d942      	bls.n	8009956 <_strtod_l+0xa5e>
 80098d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098d2:	4b47      	ldr	r3, [pc, #284]	@ (80099f0 <_strtod_l+0xaf8>)
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d103      	bne.n	80098e0 <_strtod_l+0x9e8>
 80098d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098da:	3301      	adds	r3, #1
 80098dc:	f43f ad2b 	beq.w	8009336 <_strtod_l+0x43e>
 80098e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80099f0 <_strtod_l+0xaf8>
 80098e4:	f04f 3aff 	mov.w	sl, #4294967295
 80098e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ea:	9805      	ldr	r0, [sp, #20]
 80098ec:	f002 fd5e 	bl	800c3ac <_Bfree>
 80098f0:	9805      	ldr	r0, [sp, #20]
 80098f2:	4649      	mov	r1, r9
 80098f4:	f002 fd5a 	bl	800c3ac <_Bfree>
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	4641      	mov	r1, r8
 80098fc:	f002 fd56 	bl	800c3ac <_Bfree>
 8009900:	9805      	ldr	r0, [sp, #20]
 8009902:	4621      	mov	r1, r4
 8009904:	f002 fd52 	bl	800c3ac <_Bfree>
 8009908:	e618      	b.n	800953c <_strtod_l+0x644>
 800990a:	f1ba 0f01 	cmp.w	sl, #1
 800990e:	d103      	bne.n	8009918 <_strtod_l+0xa20>
 8009910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009912:	2b00      	cmp	r3, #0
 8009914:	f43f ada5 	beq.w	8009462 <_strtod_l+0x56a>
 8009918:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80099c8 <_strtod_l+0xad0>
 800991c:	4f35      	ldr	r7, [pc, #212]	@ (80099f4 <_strtod_l+0xafc>)
 800991e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009922:	2600      	movs	r6, #0
 8009924:	e7b1      	b.n	800988a <_strtod_l+0x992>
 8009926:	4f34      	ldr	r7, [pc, #208]	@ (80099f8 <_strtod_l+0xb00>)
 8009928:	2600      	movs	r6, #0
 800992a:	e7aa      	b.n	8009882 <_strtod_l+0x98a>
 800992c:	4b32      	ldr	r3, [pc, #200]	@ (80099f8 <_strtod_l+0xb00>)
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fe68 	bl	8000608 <__aeabi_dmul>
 8009938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d09f      	beq.n	8009882 <_strtod_l+0x98a>
 8009942:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009946:	e7a0      	b.n	800988a <_strtod_l+0x992>
 8009948:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80099d0 <_strtod_l+0xad8>
 800994c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009950:	ec57 6b17 	vmov	r6, r7, d7
 8009954:	e799      	b.n	800988a <_strtod_l+0x992>
 8009956:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1c1      	bne.n	80098e8 <_strtod_l+0x9f0>
 8009964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	051b      	lsls	r3, r3, #20
 800996c:	429d      	cmp	r5, r3
 800996e:	d1bb      	bne.n	80098e8 <_strtod_l+0x9f0>
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f7 f9a8 	bl	8000cc8 <__aeabi_d2lz>
 8009978:	f7f6 fe18 	bl	80005ac <__aeabi_l2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f6 fc88 	bl	8000298 <__aeabi_dsub>
 8009988:	460b      	mov	r3, r1
 800998a:	4602      	mov	r2, r0
 800998c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009990:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	ea46 060a 	orr.w	r6, r6, sl
 800999a:	431e      	orrs	r6, r3
 800999c:	d06f      	beq.n	8009a7e <_strtod_l+0xb86>
 800999e:	a30e      	add	r3, pc, #56	@ (adr r3, 80099d8 <_strtod_l+0xae0>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f7 f8a2 	bl	8000aec <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f47f accf 	bne.w	800934c <_strtod_l+0x454>
 80099ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80099e0 <_strtod_l+0xae8>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099b8:	f7f7 f8b6 	bl	8000b28 <__aeabi_dcmpgt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d093      	beq.n	80098e8 <_strtod_l+0x9f0>
 80099c0:	e4c4      	b.n	800934c <_strtod_l+0x454>
 80099c2:	bf00      	nop
 80099c4:	f3af 8000 	nop.w
 80099c8:	00000000 	.word	0x00000000
 80099cc:	bff00000 	.word	0xbff00000
 80099d0:	00000000 	.word	0x00000000
 80099d4:	3ff00000 	.word	0x3ff00000
 80099d8:	94a03595 	.word	0x94a03595
 80099dc:	3fdfffff 	.word	0x3fdfffff
 80099e0:	35afe535 	.word	0x35afe535
 80099e4:	3fe00000 	.word	0x3fe00000
 80099e8:	000fffff 	.word	0x000fffff
 80099ec:	7ff00000 	.word	0x7ff00000
 80099f0:	7fefffff 	.word	0x7fefffff
 80099f4:	3ff00000 	.word	0x3ff00000
 80099f8:	3fe00000 	.word	0x3fe00000
 80099fc:	7fe00000 	.word	0x7fe00000
 8009a00:	7c9fffff 	.word	0x7c9fffff
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	b323      	cbz	r3, 8009a52 <_strtod_l+0xb5a>
 8009a08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a0c:	d821      	bhi.n	8009a52 <_strtod_l+0xb5a>
 8009a0e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ab0 <_strtod_l+0xbb8>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f7 f872 	bl	8000b00 <__aeabi_dcmple>
 8009a1c:	b1a0      	cbz	r0, 8009a48 <_strtod_l+0xb50>
 8009a1e:	4639      	mov	r1, r7
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7f7 f8c9 	bl	8000bb8 <__aeabi_d2uiz>
 8009a26:	2801      	cmp	r0, #1
 8009a28:	bf38      	it	cc
 8009a2a:	2001      	movcc	r0, #1
 8009a2c:	f7f6 fd72 	bl	8000514 <__aeabi_ui2d>
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	4606      	mov	r6, r0
 8009a34:	460f      	mov	r7, r1
 8009a36:	b9fb      	cbnz	r3, 8009a78 <_strtod_l+0xb80>
 8009a38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009a4e:	1b5b      	subs	r3, r3, r5
 8009a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a5a:	f002 ffdb 	bl	800ca14 <__ulp>
 8009a5e:	4650      	mov	r0, sl
 8009a60:	ec53 2b10 	vmov	r2, r3, d0
 8009a64:	4659      	mov	r1, fp
 8009a66:	f7f6 fdcf 	bl	8000608 <__aeabi_dmul>
 8009a6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a6e:	f7f6 fc15 	bl	800029c <__adddf3>
 8009a72:	4682      	mov	sl, r0
 8009a74:	468b      	mov	fp, r1
 8009a76:	e770      	b.n	800995a <_strtod_l+0xa62>
 8009a78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a7c:	e7e0      	b.n	8009a40 <_strtod_l+0xb48>
 8009a7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ab8 <_strtod_l+0xbc0>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f7 f832 	bl	8000aec <__aeabi_dcmplt>
 8009a88:	e798      	b.n	80099bc <_strtod_l+0xac4>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	f7ff ba6d 	b.w	8008f72 <_strtod_l+0x7a>
 8009a98:	2a65      	cmp	r2, #101	@ 0x65
 8009a9a:	f43f ab66 	beq.w	800916a <_strtod_l+0x272>
 8009a9e:	2a45      	cmp	r2, #69	@ 0x45
 8009aa0:	f43f ab63 	beq.w	800916a <_strtod_l+0x272>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7ff bb9e 	b.w	80091e6 <_strtod_l+0x2ee>
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w
 8009ab0:	ffc00000 	.word	0xffc00000
 8009ab4:	41dfffff 	.word	0x41dfffff
 8009ab8:	94a03595 	.word	0x94a03595
 8009abc:	3fcfffff 	.word	0x3fcfffff

08009ac0 <_strtod_r>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	@ (8009ac8 <_strtod_r+0x8>)
 8009ac2:	f7ff ba19 	b.w	8008ef8 <_strtod_l>
 8009ac6:	bf00      	nop
 8009ac8:	2000002c 	.word	0x2000002c

08009acc <strtof>:
 8009acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8009b90 <strtof+0xc4>
 8009ad4:	4b29      	ldr	r3, [pc, #164]	@ (8009b7c <strtof+0xb0>)
 8009ad6:	460a      	mov	r2, r1
 8009ad8:	ed2d 8b02 	vpush	{d8}
 8009adc:	4601      	mov	r1, r0
 8009ade:	f8d8 0000 	ldr.w	r0, [r8]
 8009ae2:	f7ff fa09 	bl	8008ef8 <_strtod_l>
 8009ae6:	ec55 4b10 	vmov	r4, r5, d0
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f7 f823 	bl	8000b3c <__aeabi_dcmpun>
 8009af6:	b190      	cbz	r0, 8009b1e <strtof+0x52>
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	4821      	ldr	r0, [pc, #132]	@ (8009b80 <strtof+0xb4>)
 8009afc:	da09      	bge.n	8009b12 <strtof+0x46>
 8009afe:	f001 fa0f 	bl	800af20 <nanf>
 8009b02:	eeb1 8a40 	vneg.f32	s16, s0
 8009b06:	eeb0 0a48 	vmov.f32	s0, s16
 8009b0a:	ecbd 8b02 	vpop	{d8}
 8009b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b12:	ecbd 8b02 	vpop	{d8}
 8009b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	f001 ba01 	b.w	800af20 <nanf>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f7 f869 	bl	8000bf8 <__aeabi_d2f>
 8009b26:	ee08 0a10 	vmov	s16, r0
 8009b2a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8009b84 <strtof+0xb8>
 8009b2e:	eeb0 7ac8 	vabs.f32	s14, s16
 8009b32:	eeb4 7a67 	vcmp.f32	s14, s15
 8009b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3a:	dd11      	ble.n	8009b60 <strtof+0x94>
 8009b3c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8009b40:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <strtof+0xbc>)
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	4620      	mov	r0, r4
 8009b48:	4639      	mov	r1, r7
 8009b4a:	f7f6 fff7 	bl	8000b3c <__aeabi_dcmpun>
 8009b4e:	b980      	cbnz	r0, 8009b72 <strtof+0xa6>
 8009b50:	4b0d      	ldr	r3, [pc, #52]	@ (8009b88 <strtof+0xbc>)
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	4620      	mov	r0, r4
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f6 ffd1 	bl	8000b00 <__aeabi_dcmple>
 8009b5e:	b940      	cbnz	r0, 8009b72 <strtof+0xa6>
 8009b60:	ee18 3a10 	vmov	r3, s16
 8009b64:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009b68:	d1cd      	bne.n	8009b06 <strtof+0x3a>
 8009b6a:	4b08      	ldr	r3, [pc, #32]	@ (8009b8c <strtof+0xc0>)
 8009b6c:	402b      	ands	r3, r5
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c9      	beq.n	8009b06 <strtof+0x3a>
 8009b72:	f8d8 3000 	ldr.w	r3, [r8]
 8009b76:	2222      	movs	r2, #34	@ 0x22
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e7c4      	b.n	8009b06 <strtof+0x3a>
 8009b7c:	2000002c 	.word	0x2000002c
 8009b80:	0800db4d 	.word	0x0800db4d
 8009b84:	7f7fffff 	.word	0x7f7fffff
 8009b88:	7fefffff 	.word	0x7fefffff
 8009b8c:	7ff00000 	.word	0x7ff00000
 8009b90:	20000198 	.word	0x20000198

08009b94 <__cvt>:
 8009b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	ec57 6b10 	vmov	r6, r7, d0
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	463b      	mov	r3, r7
 8009ba4:	bfbb      	ittet	lt
 8009ba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009baa:	461f      	movlt	r7, r3
 8009bac:	2300      	movge	r3, #0
 8009bae:	232d      	movlt	r3, #45	@ 0x2d
 8009bb0:	700b      	strb	r3, [r1, #0]
 8009bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009bb8:	4691      	mov	r9, r2
 8009bba:	f023 0820 	bic.w	r8, r3, #32
 8009bbe:	bfbc      	itt	lt
 8009bc0:	4632      	movlt	r2, r6
 8009bc2:	4616      	movlt	r6, r2
 8009bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bc8:	d005      	beq.n	8009bd6 <__cvt+0x42>
 8009bca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bce:	d100      	bne.n	8009bd2 <__cvt+0x3e>
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	2102      	movs	r1, #2
 8009bd4:	e000      	b.n	8009bd8 <__cvt+0x44>
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	ab02      	add	r3, sp, #8
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	ec47 6b10 	vmov	d0, r6, r7
 8009be4:	4653      	mov	r3, sl
 8009be6:	4622      	mov	r2, r4
 8009be8:	f001 fa46 	bl	800b078 <_dtoa_r>
 8009bec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	d119      	bne.n	8009c28 <__cvt+0x94>
 8009bf4:	f019 0f01 	tst.w	r9, #1
 8009bf8:	d00e      	beq.n	8009c18 <__cvt+0x84>
 8009bfa:	eb00 0904 	add.w	r9, r0, r4
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2300      	movs	r3, #0
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c0a:	b108      	cbz	r0, 8009c10 <__cvt+0x7c>
 8009c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c10:	2230      	movs	r2, #48	@ 0x30
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	454b      	cmp	r3, r9
 8009c16:	d31e      	bcc.n	8009c56 <__cvt+0xc2>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1c:	1b5b      	subs	r3, r3, r5
 8009c1e:	4628      	mov	r0, r5
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	b004      	add	sp, #16
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c2c:	eb00 0904 	add.w	r9, r0, r4
 8009c30:	d1e5      	bne.n	8009bfe <__cvt+0x6a>
 8009c32:	7803      	ldrb	r3, [r0, #0]
 8009c34:	2b30      	cmp	r3, #48	@ 0x30
 8009c36:	d10a      	bne.n	8009c4e <__cvt+0xba>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c44:	b918      	cbnz	r0, 8009c4e <__cvt+0xba>
 8009c46:	f1c4 0401 	rsb	r4, r4, #1
 8009c4a:	f8ca 4000 	str.w	r4, [sl]
 8009c4e:	f8da 3000 	ldr.w	r3, [sl]
 8009c52:	4499      	add	r9, r3
 8009c54:	e7d3      	b.n	8009bfe <__cvt+0x6a>
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	9103      	str	r1, [sp, #12]
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e7d9      	b.n	8009c12 <__cvt+0x7e>

08009c5e <__exponent>:
 8009c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c60:	2900      	cmp	r1, #0
 8009c62:	bfba      	itte	lt
 8009c64:	4249      	neglt	r1, r1
 8009c66:	232d      	movlt	r3, #45	@ 0x2d
 8009c68:	232b      	movge	r3, #43	@ 0x2b
 8009c6a:	2909      	cmp	r1, #9
 8009c6c:	7002      	strb	r2, [r0, #0]
 8009c6e:	7043      	strb	r3, [r0, #1]
 8009c70:	dd29      	ble.n	8009cc6 <__exponent+0x68>
 8009c72:	f10d 0307 	add.w	r3, sp, #7
 8009c76:	461d      	mov	r5, r3
 8009c78:	270a      	movs	r7, #10
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c80:	fb07 1416 	mls	r4, r7, r6, r1
 8009c84:	3430      	adds	r4, #48	@ 0x30
 8009c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	2c63      	cmp	r4, #99	@ 0x63
 8009c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c92:	4631      	mov	r1, r6
 8009c94:	dcf1      	bgt.n	8009c7a <__exponent+0x1c>
 8009c96:	3130      	adds	r1, #48	@ 0x30
 8009c98:	1e94      	subs	r4, r2, #2
 8009c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c9e:	1c41      	adds	r1, r0, #1
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	42ab      	cmp	r3, r5
 8009ca4:	d30a      	bcc.n	8009cbc <__exponent+0x5e>
 8009ca6:	f10d 0309 	add.w	r3, sp, #9
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	42ac      	cmp	r4, r5
 8009cae:	bf88      	it	hi
 8009cb0:	2300      	movhi	r3, #0
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	4403      	add	r3, r0
 8009cb6:	1a18      	subs	r0, r3, r0
 8009cb8:	b003      	add	sp, #12
 8009cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cc4:	e7ed      	b.n	8009ca2 <__exponent+0x44>
 8009cc6:	2330      	movs	r3, #48	@ 0x30
 8009cc8:	3130      	adds	r1, #48	@ 0x30
 8009cca:	7083      	strb	r3, [r0, #2]
 8009ccc:	70c1      	strb	r1, [r0, #3]
 8009cce:	1d03      	adds	r3, r0, #4
 8009cd0:	e7f1      	b.n	8009cb6 <__exponent+0x58>
	...

08009cd4 <_printf_float>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	b08d      	sub	sp, #52	@ 0x34
 8009cda:	460c      	mov	r4, r1
 8009cdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	461f      	mov	r7, r3
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	f001 f87d 	bl	800ade4 <_localeconv_r>
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7f6 fac6 	bl	8000280 <strlen>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cfc:	9005      	str	r0, [sp, #20]
 8009cfe:	3307      	adds	r3, #7
 8009d00:	f023 0307 	bic.w	r3, r3, #7
 8009d04:	f103 0208 	add.w	r2, r3, #8
 8009d08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d0c:	f8d4 b000 	ldr.w	fp, [r4]
 8009d10:	f8c8 2000 	str.w	r2, [r8]
 8009d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d1c:	9307      	str	r3, [sp, #28]
 8009d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8009f9c <_printf_float+0x2c8>)
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	f7f6 ff04 	bl	8000b3c <__aeabi_dcmpun>
 8009d34:	bb70      	cbnz	r0, 8009d94 <_printf_float+0xc0>
 8009d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d3a:	4b98      	ldr	r3, [pc, #608]	@ (8009f9c <_printf_float+0x2c8>)
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	f7f6 fede 	bl	8000b00 <__aeabi_dcmple>
 8009d44:	bb30      	cbnz	r0, 8009d94 <_printf_float+0xc0>
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fecd 	bl	8000aec <__aeabi_dcmplt>
 8009d52:	b110      	cbz	r0, 8009d5a <_printf_float+0x86>
 8009d54:	232d      	movs	r3, #45	@ 0x2d
 8009d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d5a:	4a91      	ldr	r2, [pc, #580]	@ (8009fa0 <_printf_float+0x2cc>)
 8009d5c:	4b91      	ldr	r3, [pc, #580]	@ (8009fa4 <_printf_float+0x2d0>)
 8009d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d62:	bf94      	ite	ls
 8009d64:	4690      	movls	r8, r2
 8009d66:	4698      	movhi	r8, r3
 8009d68:	2303      	movs	r3, #3
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	f02b 0304 	bic.w	r3, fp, #4
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	f04f 0900 	mov.w	r9, #0
 8009d76:	9700      	str	r7, [sp, #0]
 8009d78:	4633      	mov	r3, r6
 8009d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f9d2 	bl	800a128 <_printf_common>
 8009d84:	3001      	adds	r0, #1
 8009d86:	f040 808d 	bne.w	8009ea4 <_printf_float+0x1d0>
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8e:	b00d      	add	sp, #52	@ 0x34
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d94:	4642      	mov	r2, r8
 8009d96:	464b      	mov	r3, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 fece 	bl	8000b3c <__aeabi_dcmpun>
 8009da0:	b140      	cbz	r0, 8009db4 <_printf_float+0xe0>
 8009da2:	464b      	mov	r3, r9
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bfbc      	itt	lt
 8009da8:	232d      	movlt	r3, #45	@ 0x2d
 8009daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009dae:	4a7e      	ldr	r2, [pc, #504]	@ (8009fa8 <_printf_float+0x2d4>)
 8009db0:	4b7e      	ldr	r3, [pc, #504]	@ (8009fac <_printf_float+0x2d8>)
 8009db2:	e7d4      	b.n	8009d5e <_printf_float+0x8a>
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009dba:	9206      	str	r2, [sp, #24]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	d13b      	bne.n	8009e38 <_printf_float+0x164>
 8009dc0:	2306      	movs	r3, #6
 8009dc2:	6063      	str	r3, [r4, #4]
 8009dc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009dc8:	2300      	movs	r3, #0
 8009dca:	6022      	str	r2, [r4, #0]
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8009dd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009dd4:	ab09      	add	r3, sp, #36	@ 0x24
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	6861      	ldr	r1, [r4, #4]
 8009dda:	ec49 8b10 	vmov	d0, r8, r9
 8009dde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009de2:	4628      	mov	r0, r5
 8009de4:	f7ff fed6 	bl	8009b94 <__cvt>
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dec:	2b47      	cmp	r3, #71	@ 0x47
 8009dee:	4680      	mov	r8, r0
 8009df0:	d129      	bne.n	8009e46 <_printf_float+0x172>
 8009df2:	1cc8      	adds	r0, r1, #3
 8009df4:	db02      	blt.n	8009dfc <_printf_float+0x128>
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	dd41      	ble.n	8009e80 <_printf_float+0x1ac>
 8009dfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e00:	fa5f fa8a 	uxtb.w	sl, sl
 8009e04:	3901      	subs	r1, #1
 8009e06:	4652      	mov	r2, sl
 8009e08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e0e:	f7ff ff26 	bl	8009c5e <__exponent>
 8009e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e14:	1813      	adds	r3, r2, r0
 8009e16:	2a01      	cmp	r2, #1
 8009e18:	4681      	mov	r9, r0
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	dc02      	bgt.n	8009e24 <_printf_float+0x150>
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	07d2      	lsls	r2, r2, #31
 8009e22:	d501      	bpl.n	8009e28 <_printf_float+0x154>
 8009e24:	3301      	adds	r3, #1
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0a2      	beq.n	8009d76 <_printf_float+0xa2>
 8009e30:	232d      	movs	r3, #45	@ 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e36:	e79e      	b.n	8009d76 <_printf_float+0xa2>
 8009e38:	9a06      	ldr	r2, [sp, #24]
 8009e3a:	2a47      	cmp	r2, #71	@ 0x47
 8009e3c:	d1c2      	bne.n	8009dc4 <_printf_float+0xf0>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1c0      	bne.n	8009dc4 <_printf_float+0xf0>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7bd      	b.n	8009dc2 <_printf_float+0xee>
 8009e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e4a:	d9db      	bls.n	8009e04 <_printf_float+0x130>
 8009e4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e50:	d118      	bne.n	8009e84 <_printf_float+0x1b0>
 8009e52:	2900      	cmp	r1, #0
 8009e54:	6863      	ldr	r3, [r4, #4]
 8009e56:	dd0b      	ble.n	8009e70 <_printf_float+0x19c>
 8009e58:	6121      	str	r1, [r4, #16]
 8009e5a:	b913      	cbnz	r3, 8009e62 <_printf_float+0x18e>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	07d0      	lsls	r0, r2, #31
 8009e60:	d502      	bpl.n	8009e68 <_printf_float+0x194>
 8009e62:	3301      	adds	r3, #1
 8009e64:	440b      	add	r3, r1
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e6a:	f04f 0900 	mov.w	r9, #0
 8009e6e:	e7db      	b.n	8009e28 <_printf_float+0x154>
 8009e70:	b913      	cbnz	r3, 8009e78 <_printf_float+0x1a4>
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	07d2      	lsls	r2, r2, #31
 8009e76:	d501      	bpl.n	8009e7c <_printf_float+0x1a8>
 8009e78:	3302      	adds	r3, #2
 8009e7a:	e7f4      	b.n	8009e66 <_printf_float+0x192>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e7f2      	b.n	8009e66 <_printf_float+0x192>
 8009e80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e86:	4299      	cmp	r1, r3
 8009e88:	db05      	blt.n	8009e96 <_printf_float+0x1c2>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	6121      	str	r1, [r4, #16]
 8009e8e:	07d8      	lsls	r0, r3, #31
 8009e90:	d5ea      	bpl.n	8009e68 <_printf_float+0x194>
 8009e92:	1c4b      	adds	r3, r1, #1
 8009e94:	e7e7      	b.n	8009e66 <_printf_float+0x192>
 8009e96:	2900      	cmp	r1, #0
 8009e98:	bfd4      	ite	le
 8009e9a:	f1c1 0202 	rsble	r2, r1, #2
 8009e9e:	2201      	movgt	r2, #1
 8009ea0:	4413      	add	r3, r2
 8009ea2:	e7e0      	b.n	8009e66 <_printf_float+0x192>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	055a      	lsls	r2, r3, #21
 8009ea8:	d407      	bmi.n	8009eba <_printf_float+0x1e6>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	4642      	mov	r2, r8
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d12b      	bne.n	8009f10 <_printf_float+0x23c>
 8009eb8:	e767      	b.n	8009d8a <_printf_float+0xb6>
 8009eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ebe:	f240 80dd 	bls.w	800a07c <_printf_float+0x3a8>
 8009ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f7f6 fe05 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d033      	beq.n	8009f3a <_printf_float+0x266>
 8009ed2:	4a37      	ldr	r2, [pc, #220]	@ (8009fb0 <_printf_float+0x2dc>)
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	f43f af54 	beq.w	8009d8a <_printf_float+0xb6>
 8009ee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009ee6:	4543      	cmp	r3, r8
 8009ee8:	db02      	blt.n	8009ef0 <_printf_float+0x21c>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	07d8      	lsls	r0, r3, #31
 8009eee:	d50f      	bpl.n	8009f10 <_printf_float+0x23c>
 8009ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f af45 	beq.w	8009d8a <_printf_float+0xb6>
 8009f00:	f04f 0900 	mov.w	r9, #0
 8009f04:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f08:	f104 0a1a 	add.w	sl, r4, #26
 8009f0c:	45c8      	cmp	r8, r9
 8009f0e:	dc09      	bgt.n	8009f24 <_printf_float+0x250>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	079b      	lsls	r3, r3, #30
 8009f14:	f100 8103 	bmi.w	800a11e <_printf_float+0x44a>
 8009f18:	68e0      	ldr	r0, [r4, #12]
 8009f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f1c:	4298      	cmp	r0, r3
 8009f1e:	bfb8      	it	lt
 8009f20:	4618      	movlt	r0, r3
 8009f22:	e734      	b.n	8009d8e <_printf_float+0xba>
 8009f24:	2301      	movs	r3, #1
 8009f26:	4652      	mov	r2, sl
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f af2b 	beq.w	8009d8a <_printf_float+0xb6>
 8009f34:	f109 0901 	add.w	r9, r9, #1
 8009f38:	e7e8      	b.n	8009f0c <_printf_float+0x238>
 8009f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dc39      	bgt.n	8009fb4 <_printf_float+0x2e0>
 8009f40:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb0 <_printf_float+0x2dc>)
 8009f42:	2301      	movs	r3, #1
 8009f44:	4631      	mov	r1, r6
 8009f46:	4628      	mov	r0, r5
 8009f48:	47b8      	blx	r7
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	f43f af1d 	beq.w	8009d8a <_printf_float+0xb6>
 8009f50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f54:	ea59 0303 	orrs.w	r3, r9, r3
 8009f58:	d102      	bne.n	8009f60 <_printf_float+0x28c>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	d5d7      	bpl.n	8009f10 <_printf_float+0x23c>
 8009f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f af0d 	beq.w	8009d8a <_printf_float+0xb6>
 8009f70:	f04f 0a00 	mov.w	sl, #0
 8009f74:	f104 0b1a 	add.w	fp, r4, #26
 8009f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7a:	425b      	negs	r3, r3
 8009f7c:	4553      	cmp	r3, sl
 8009f7e:	dc01      	bgt.n	8009f84 <_printf_float+0x2b0>
 8009f80:	464b      	mov	r3, r9
 8009f82:	e793      	b.n	8009eac <_printf_float+0x1d8>
 8009f84:	2301      	movs	r3, #1
 8009f86:	465a      	mov	r2, fp
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f aefb 	beq.w	8009d8a <_printf_float+0xb6>
 8009f94:	f10a 0a01 	add.w	sl, sl, #1
 8009f98:	e7ee      	b.n	8009f78 <_printf_float+0x2a4>
 8009f9a:	bf00      	nop
 8009f9c:	7fefffff 	.word	0x7fefffff
 8009fa0:	0800da60 	.word	0x0800da60
 8009fa4:	0800da64 	.word	0x0800da64
 8009fa8:	0800da68 	.word	0x0800da68
 8009fac:	0800da6c 	.word	0x0800da6c
 8009fb0:	0800da70 	.word	0x0800da70
 8009fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fba:	4553      	cmp	r3, sl
 8009fbc:	bfa8      	it	ge
 8009fbe:	4653      	movge	r3, sl
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	4699      	mov	r9, r3
 8009fc4:	dc36      	bgt.n	800a034 <_printf_float+0x360>
 8009fc6:	f04f 0b00 	mov.w	fp, #0
 8009fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fce:	f104 021a 	add.w	r2, r4, #26
 8009fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fd4:	9306      	str	r3, [sp, #24]
 8009fd6:	eba3 0309 	sub.w	r3, r3, r9
 8009fda:	455b      	cmp	r3, fp
 8009fdc:	dc31      	bgt.n	800a042 <_printf_float+0x36e>
 8009fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe0:	459a      	cmp	sl, r3
 8009fe2:	dc3a      	bgt.n	800a05a <_printf_float+0x386>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	07da      	lsls	r2, r3, #31
 8009fe8:	d437      	bmi.n	800a05a <_printf_float+0x386>
 8009fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fec:	ebaa 0903 	sub.w	r9, sl, r3
 8009ff0:	9b06      	ldr	r3, [sp, #24]
 8009ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff6:	4599      	cmp	r9, r3
 8009ff8:	bfa8      	it	ge
 8009ffa:	4699      	movge	r9, r3
 8009ffc:	f1b9 0f00 	cmp.w	r9, #0
 800a000:	dc33      	bgt.n	800a06a <_printf_float+0x396>
 800a002:	f04f 0800 	mov.w	r8, #0
 800a006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a00a:	f104 0b1a 	add.w	fp, r4, #26
 800a00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a010:	ebaa 0303 	sub.w	r3, sl, r3
 800a014:	eba3 0309 	sub.w	r3, r3, r9
 800a018:	4543      	cmp	r3, r8
 800a01a:	f77f af79 	ble.w	8009f10 <_printf_float+0x23c>
 800a01e:	2301      	movs	r3, #1
 800a020:	465a      	mov	r2, fp
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	f43f aeae 	beq.w	8009d8a <_printf_float+0xb6>
 800a02e:	f108 0801 	add.w	r8, r8, #1
 800a032:	e7ec      	b.n	800a00e <_printf_float+0x33a>
 800a034:	4642      	mov	r2, r8
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	d1c2      	bne.n	8009fc6 <_printf_float+0x2f2>
 800a040:	e6a3      	b.n	8009d8a <_printf_float+0xb6>
 800a042:	2301      	movs	r3, #1
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	9206      	str	r2, [sp, #24]
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f ae9c 	beq.w	8009d8a <_printf_float+0xb6>
 800a052:	9a06      	ldr	r2, [sp, #24]
 800a054:	f10b 0b01 	add.w	fp, fp, #1
 800a058:	e7bb      	b.n	8009fd2 <_printf_float+0x2fe>
 800a05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	d1c0      	bne.n	8009fea <_printf_float+0x316>
 800a068:	e68f      	b.n	8009d8a <_printf_float+0xb6>
 800a06a:	9a06      	ldr	r2, [sp, #24]
 800a06c:	464b      	mov	r3, r9
 800a06e:	4442      	add	r2, r8
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	d1c3      	bne.n	800a002 <_printf_float+0x32e>
 800a07a:	e686      	b.n	8009d8a <_printf_float+0xb6>
 800a07c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a080:	f1ba 0f01 	cmp.w	sl, #1
 800a084:	dc01      	bgt.n	800a08a <_printf_float+0x3b6>
 800a086:	07db      	lsls	r3, r3, #31
 800a088:	d536      	bpl.n	800a0f8 <_printf_float+0x424>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4642      	mov	r2, r8
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	47b8      	blx	r7
 800a094:	3001      	adds	r0, #1
 800a096:	f43f ae78 	beq.w	8009d8a <_printf_float+0xb6>
 800a09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b8      	blx	r7
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	f43f ae70 	beq.w	8009d8a <_printf_float+0xb6>
 800a0aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0b6:	f7f6 fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0ba:	b9c0      	cbnz	r0, 800a0ee <_printf_float+0x41a>
 800a0bc:	4653      	mov	r3, sl
 800a0be:	f108 0201 	add.w	r2, r8, #1
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b8      	blx	r7
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d10c      	bne.n	800a0e6 <_printf_float+0x412>
 800a0cc:	e65d      	b.n	8009d8a <_printf_float+0xb6>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	465a      	mov	r2, fp
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	47b8      	blx	r7
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f43f ae56 	beq.w	8009d8a <_printf_float+0xb6>
 800a0de:	f108 0801 	add.w	r8, r8, #1
 800a0e2:	45d0      	cmp	r8, sl
 800a0e4:	dbf3      	blt.n	800a0ce <_printf_float+0x3fa>
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0ec:	e6df      	b.n	8009eae <_printf_float+0x1da>
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	f104 0b1a 	add.w	fp, r4, #26
 800a0f6:	e7f4      	b.n	800a0e2 <_printf_float+0x40e>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	e7e1      	b.n	800a0c2 <_printf_float+0x3ee>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae3e 	beq.w	8009d8a <_printf_float+0xb6>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	68e3      	ldr	r3, [r4, #12]
 800a114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a116:	1a5b      	subs	r3, r3, r1
 800a118:	4543      	cmp	r3, r8
 800a11a:	dcf0      	bgt.n	800a0fe <_printf_float+0x42a>
 800a11c:	e6fc      	b.n	8009f18 <_printf_float+0x244>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 0919 	add.w	r9, r4, #25
 800a126:	e7f4      	b.n	800a112 <_printf_float+0x43e>

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4698      	mov	r8, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a174:	6822      	ldr	r2, [r4, #0]
 800a176:	3b00      	subs	r3, #0
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a184:	4641      	mov	r1, r8
 800a186:	4638      	mov	r0, r7
 800a188:	47c8      	blx	r9
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	f003 0306 	and.w	r3, r3, #6
 800a196:	2b04      	cmp	r3, #4
 800a198:	bf02      	ittt	eq
 800a19a:	68e5      	ldreq	r5, [r4, #12]
 800a19c:	6833      	ldreq	r3, [r6, #0]
 800a19e:	1aed      	subeq	r5, r5, r3
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c8      	blx	r9
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	@ 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c8      	blx	r9
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a20c:	2f78      	cmp	r7, #120	@ 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	@ 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d2 	beq.w	800a3ca <_printf_i+0x1c6>
 800a226:	2f58      	cmp	r7, #88	@ 0x58
 800a228:	f000 80b9 	beq.w	800a39e <_printf_i+0x19a>
 800a22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	@ (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3b1 	.word	0x0800a3b1
 800a274:	0800a2db 	.word	0x0800a2db
 800a278:	0800a36b 	.word	0x0800a36b
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3d3 	.word	0x0800a3d3
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2db 	.word	0x0800a2db
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a373 	.word	0x0800a373
 800a29c:	6833      	ldr	r3, [r6, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6032      	str	r2, [r6, #0]
 800a2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e09d      	b.n	800a3ec <_printf_i+0x1e8>
 800a2b0:	6833      	ldr	r3, [r6, #0]
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	1d19      	adds	r1, r3, #4
 800a2b6:	6031      	str	r1, [r6, #0]
 800a2b8:	0606      	lsls	r6, r0, #24
 800a2ba:	d501      	bpl.n	800a2c0 <_printf_i+0xbc>
 800a2bc:	681d      	ldr	r5, [r3, #0]
 800a2be:	e003      	b.n	800a2c8 <_printf_i+0xc4>
 800a2c0:	0645      	lsls	r5, r0, #25
 800a2c2:	d5fb      	bpl.n	800a2bc <_printf_i+0xb8>
 800a2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	da03      	bge.n	800a2d4 <_printf_i+0xd0>
 800a2cc:	232d      	movs	r3, #45	@ 0x2d
 800a2ce:	426d      	negs	r5, r5
 800a2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d4:	4859      	ldr	r0, [pc, #356]	@ (800a43c <_printf_i+0x238>)
 800a2d6:	230a      	movs	r3, #10
 800a2d8:	e011      	b.n	800a2fe <_printf_i+0xfa>
 800a2da:	6821      	ldr	r1, [r4, #0]
 800a2dc:	6833      	ldr	r3, [r6, #0]
 800a2de:	0608      	lsls	r0, r1, #24
 800a2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e4:	d402      	bmi.n	800a2ec <_printf_i+0xe8>
 800a2e6:	0649      	lsls	r1, r1, #25
 800a2e8:	bf48      	it	mi
 800a2ea:	b2ad      	uxthmi	r5, r5
 800a2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ee:	4853      	ldr	r0, [pc, #332]	@ (800a43c <_printf_i+0x238>)
 800a2f0:	6033      	str	r3, [r6, #0]
 800a2f2:	bf14      	ite	ne
 800a2f4:	230a      	movne	r3, #10
 800a2f6:	2308      	moveq	r3, #8
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2fe:	6866      	ldr	r6, [r4, #4]
 800a300:	60a6      	str	r6, [r4, #8]
 800a302:	2e00      	cmp	r6, #0
 800a304:	bfa2      	ittt	ge
 800a306:	6821      	ldrge	r1, [r4, #0]
 800a308:	f021 0104 	bicge.w	r1, r1, #4
 800a30c:	6021      	strge	r1, [r4, #0]
 800a30e:	b90d      	cbnz	r5, 800a314 <_printf_i+0x110>
 800a310:	2e00      	cmp	r6, #0
 800a312:	d04b      	beq.n	800a3ac <_printf_i+0x1a8>
 800a314:	4616      	mov	r6, r2
 800a316:	fbb5 f1f3 	udiv	r1, r5, r3
 800a31a:	fb03 5711 	mls	r7, r3, r1, r5
 800a31e:	5dc7      	ldrb	r7, [r0, r7]
 800a320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a324:	462f      	mov	r7, r5
 800a326:	42bb      	cmp	r3, r7
 800a328:	460d      	mov	r5, r1
 800a32a:	d9f4      	bls.n	800a316 <_printf_i+0x112>
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d10b      	bne.n	800a348 <_printf_i+0x144>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	07df      	lsls	r7, r3, #31
 800a334:	d508      	bpl.n	800a348 <_printf_i+0x144>
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	6861      	ldr	r1, [r4, #4]
 800a33a:	4299      	cmp	r1, r3
 800a33c:	bfde      	ittt	le
 800a33e:	2330      	movle	r3, #48	@ 0x30
 800a340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a344:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a348:	1b92      	subs	r2, r2, r6
 800a34a:	6122      	str	r2, [r4, #16]
 800a34c:	f8cd a000 	str.w	sl, [sp]
 800a350:	464b      	mov	r3, r9
 800a352:	aa03      	add	r2, sp, #12
 800a354:	4621      	mov	r1, r4
 800a356:	4640      	mov	r0, r8
 800a358:	f7ff fee6 	bl	800a128 <_printf_common>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d14a      	bne.n	800a3f6 <_printf_i+0x1f2>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	b004      	add	sp, #16
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	f043 0320 	orr.w	r3, r3, #32
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	4833      	ldr	r0, [pc, #204]	@ (800a440 <_printf_i+0x23c>)
 800a374:	2778      	movs	r7, #120	@ 0x78
 800a376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	6831      	ldr	r1, [r6, #0]
 800a37e:	061f      	lsls	r7, r3, #24
 800a380:	f851 5b04 	ldr.w	r5, [r1], #4
 800a384:	d402      	bmi.n	800a38c <_printf_i+0x188>
 800a386:	065f      	lsls	r7, r3, #25
 800a388:	bf48      	it	mi
 800a38a:	b2ad      	uxthmi	r5, r5
 800a38c:	6031      	str	r1, [r6, #0]
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	bf44      	itt	mi
 800a392:	f043 0320 	orrmi.w	r3, r3, #32
 800a396:	6023      	strmi	r3, [r4, #0]
 800a398:	b11d      	cbz	r5, 800a3a2 <_printf_i+0x19e>
 800a39a:	2310      	movs	r3, #16
 800a39c:	e7ac      	b.n	800a2f8 <_printf_i+0xf4>
 800a39e:	4827      	ldr	r0, [pc, #156]	@ (800a43c <_printf_i+0x238>)
 800a3a0:	e7e9      	b.n	800a376 <_printf_i+0x172>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f023 0320 	bic.w	r3, r3, #32
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	e7f6      	b.n	800a39a <_printf_i+0x196>
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	e7bd      	b.n	800a32c <_printf_i+0x128>
 800a3b0:	6833      	ldr	r3, [r6, #0]
 800a3b2:	6825      	ldr	r5, [r4, #0]
 800a3b4:	6961      	ldr	r1, [r4, #20]
 800a3b6:	1d18      	adds	r0, r3, #4
 800a3b8:	6030      	str	r0, [r6, #0]
 800a3ba:	062e      	lsls	r6, r5, #24
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0x1c0>
 800a3c0:	6019      	str	r1, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0x1c6>
 800a3c4:	0668      	lsls	r0, r5, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0x1bc>
 800a3c8:	8019      	strh	r1, [r3, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	4616      	mov	r6, r2
 800a3d0:	e7bc      	b.n	800a34c <_printf_i+0x148>
 800a3d2:	6833      	ldr	r3, [r6, #0]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	6032      	str	r2, [r6, #0]
 800a3d8:	681e      	ldr	r6, [r3, #0]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7f5 fefe 	bl	80001e0 <memchr>
 800a3e4:	b108      	cbz	r0, 800a3ea <_printf_i+0x1e6>
 800a3e6:	1b80      	subs	r0, r0, r6
 800a3e8:	6060      	str	r0, [r4, #4]
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f4:	e7aa      	b.n	800a34c <_printf_i+0x148>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d0ad      	beq.n	800a360 <_printf_i+0x15c>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	d413      	bmi.n	800a432 <_printf_i+0x22e>
 800a40a:	68e0      	ldr	r0, [r4, #12]
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	4298      	cmp	r0, r3
 800a410:	bfb8      	it	lt
 800a412:	4618      	movlt	r0, r3
 800a414:	e7a6      	b.n	800a364 <_printf_i+0x160>
 800a416:	2301      	movs	r3, #1
 800a418:	4632      	mov	r2, r6
 800a41a:	4649      	mov	r1, r9
 800a41c:	4640      	mov	r0, r8
 800a41e:	47d0      	blx	sl
 800a420:	3001      	adds	r0, #1
 800a422:	d09d      	beq.n	800a360 <_printf_i+0x15c>
 800a424:	3501      	adds	r5, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	9903      	ldr	r1, [sp, #12]
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	dcf2      	bgt.n	800a416 <_printf_i+0x212>
 800a430:	e7eb      	b.n	800a40a <_printf_i+0x206>
 800a432:	2500      	movs	r5, #0
 800a434:	f104 0619 	add.w	r6, r4, #25
 800a438:	e7f5      	b.n	800a426 <_printf_i+0x222>
 800a43a:	bf00      	nop
 800a43c:	0800da72 	.word	0x0800da72
 800a440:	0800da83 	.word	0x0800da83

0800a444 <_scanf_float>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	b087      	sub	sp, #28
 800a44a:	4617      	mov	r7, r2
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	688b      	ldr	r3, [r1, #8]
 800a450:	1e5a      	subs	r2, r3, #1
 800a452:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a456:	bf81      	itttt	hi
 800a458:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a45c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a460:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a464:	608b      	strhi	r3, [r1, #8]
 800a466:	680b      	ldr	r3, [r1, #0]
 800a468:	460a      	mov	r2, r1
 800a46a:	f04f 0500 	mov.w	r5, #0
 800a46e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a472:	f842 3b1c 	str.w	r3, [r2], #28
 800a476:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a47a:	4680      	mov	r8, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	bf98      	it	ls
 800a480:	f04f 0b00 	movls.w	fp, #0
 800a484:	9201      	str	r2, [sp, #4]
 800a486:	4616      	mov	r6, r2
 800a488:	46aa      	mov	sl, r5
 800a48a:	46a9      	mov	r9, r5
 800a48c:	9502      	str	r5, [sp, #8]
 800a48e:	68a2      	ldr	r2, [r4, #8]
 800a490:	b152      	cbz	r2, 800a4a8 <_scanf_float+0x64>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b4e      	cmp	r3, #78	@ 0x4e
 800a498:	d864      	bhi.n	800a564 <_scanf_float+0x120>
 800a49a:	2b40      	cmp	r3, #64	@ 0x40
 800a49c:	d83c      	bhi.n	800a518 <_scanf_float+0xd4>
 800a49e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a4a2:	b2c8      	uxtb	r0, r1
 800a4a4:	280e      	cmp	r0, #14
 800a4a6:	d93a      	bls.n	800a51e <_scanf_float+0xda>
 800a4a8:	f1b9 0f00 	cmp.w	r9, #0
 800a4ac:	d003      	beq.n	800a4b6 <_scanf_float+0x72>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ba:	f1ba 0f01 	cmp.w	sl, #1
 800a4be:	f200 8117 	bhi.w	800a6f0 <_scanf_float+0x2ac>
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	429e      	cmp	r6, r3
 800a4c6:	f200 8108 	bhi.w	800a6da <_scanf_float+0x296>
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	b007      	add	sp, #28
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a4d6:	2a0d      	cmp	r2, #13
 800a4d8:	d8e6      	bhi.n	800a4a8 <_scanf_float+0x64>
 800a4da:	a101      	add	r1, pc, #4	@ (adr r1, 800a4e0 <_scanf_float+0x9c>)
 800a4dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4e0:	0800a627 	.word	0x0800a627
 800a4e4:	0800a4a9 	.word	0x0800a4a9
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	0800a4a9 	.word	0x0800a4a9
 800a4f0:	0800a687 	.word	0x0800a687
 800a4f4:	0800a65f 	.word	0x0800a65f
 800a4f8:	0800a4a9 	.word	0x0800a4a9
 800a4fc:	0800a4a9 	.word	0x0800a4a9
 800a500:	0800a635 	.word	0x0800a635
 800a504:	0800a4a9 	.word	0x0800a4a9
 800a508:	0800a4a9 	.word	0x0800a4a9
 800a50c:	0800a4a9 	.word	0x0800a4a9
 800a510:	0800a4a9 	.word	0x0800a4a9
 800a514:	0800a5ed 	.word	0x0800a5ed
 800a518:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a51c:	e7db      	b.n	800a4d6 <_scanf_float+0x92>
 800a51e:	290e      	cmp	r1, #14
 800a520:	d8c2      	bhi.n	800a4a8 <_scanf_float+0x64>
 800a522:	a001      	add	r0, pc, #4	@ (adr r0, 800a528 <_scanf_float+0xe4>)
 800a524:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a528:	0800a5dd 	.word	0x0800a5dd
 800a52c:	0800a4a9 	.word	0x0800a4a9
 800a530:	0800a5dd 	.word	0x0800a5dd
 800a534:	0800a673 	.word	0x0800a673
 800a538:	0800a4a9 	.word	0x0800a4a9
 800a53c:	0800a585 	.word	0x0800a585
 800a540:	0800a5c3 	.word	0x0800a5c3
 800a544:	0800a5c3 	.word	0x0800a5c3
 800a548:	0800a5c3 	.word	0x0800a5c3
 800a54c:	0800a5c3 	.word	0x0800a5c3
 800a550:	0800a5c3 	.word	0x0800a5c3
 800a554:	0800a5c3 	.word	0x0800a5c3
 800a558:	0800a5c3 	.word	0x0800a5c3
 800a55c:	0800a5c3 	.word	0x0800a5c3
 800a560:	0800a5c3 	.word	0x0800a5c3
 800a564:	2b6e      	cmp	r3, #110	@ 0x6e
 800a566:	d809      	bhi.n	800a57c <_scanf_float+0x138>
 800a568:	2b60      	cmp	r3, #96	@ 0x60
 800a56a:	d8b2      	bhi.n	800a4d2 <_scanf_float+0x8e>
 800a56c:	2b54      	cmp	r3, #84	@ 0x54
 800a56e:	d07b      	beq.n	800a668 <_scanf_float+0x224>
 800a570:	2b59      	cmp	r3, #89	@ 0x59
 800a572:	d199      	bne.n	800a4a8 <_scanf_float+0x64>
 800a574:	2d07      	cmp	r5, #7
 800a576:	d197      	bne.n	800a4a8 <_scanf_float+0x64>
 800a578:	2508      	movs	r5, #8
 800a57a:	e02c      	b.n	800a5d6 <_scanf_float+0x192>
 800a57c:	2b74      	cmp	r3, #116	@ 0x74
 800a57e:	d073      	beq.n	800a668 <_scanf_float+0x224>
 800a580:	2b79      	cmp	r3, #121	@ 0x79
 800a582:	e7f6      	b.n	800a572 <_scanf_float+0x12e>
 800a584:	6821      	ldr	r1, [r4, #0]
 800a586:	05c8      	lsls	r0, r1, #23
 800a588:	d51b      	bpl.n	800a5c2 <_scanf_float+0x17e>
 800a58a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a58e:	6021      	str	r1, [r4, #0]
 800a590:	f109 0901 	add.w	r9, r9, #1
 800a594:	f1bb 0f00 	cmp.w	fp, #0
 800a598:	d003      	beq.n	800a5a2 <_scanf_float+0x15e>
 800a59a:	3201      	adds	r2, #1
 800a59c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5a0:	60a2      	str	r2, [r4, #8]
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	60a3      	str	r3, [r4, #8]
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	f340 8087 	ble.w	800a6c8 <_scanf_float+0x284>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	e765      	b.n	800a48e <_scanf_float+0x4a>
 800a5c2:	eb1a 0105 	adds.w	r1, sl, r5
 800a5c6:	f47f af6f 	bne.w	800a4a8 <_scanf_float+0x64>
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	468a      	mov	sl, r1
 800a5d6:	f806 3b01 	strb.w	r3, [r6], #1
 800a5da:	e7e2      	b.n	800a5a2 <_scanf_float+0x15e>
 800a5dc:	6822      	ldr	r2, [r4, #0]
 800a5de:	0610      	lsls	r0, r2, #24
 800a5e0:	f57f af62 	bpl.w	800a4a8 <_scanf_float+0x64>
 800a5e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5e8:	6022      	str	r2, [r4, #0]
 800a5ea:	e7f4      	b.n	800a5d6 <_scanf_float+0x192>
 800a5ec:	f1ba 0f00 	cmp.w	sl, #0
 800a5f0:	d10e      	bne.n	800a610 <_scanf_float+0x1cc>
 800a5f2:	f1b9 0f00 	cmp.w	r9, #0
 800a5f6:	d10e      	bne.n	800a616 <_scanf_float+0x1d2>
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a602:	d108      	bne.n	800a616 <_scanf_float+0x1d2>
 800a604:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	f04f 0a01 	mov.w	sl, #1
 800a60e:	e7e2      	b.n	800a5d6 <_scanf_float+0x192>
 800a610:	f1ba 0f02 	cmp.w	sl, #2
 800a614:	d055      	beq.n	800a6c2 <_scanf_float+0x27e>
 800a616:	2d01      	cmp	r5, #1
 800a618:	d002      	beq.n	800a620 <_scanf_float+0x1dc>
 800a61a:	2d04      	cmp	r5, #4
 800a61c:	f47f af44 	bne.w	800a4a8 <_scanf_float+0x64>
 800a620:	3501      	adds	r5, #1
 800a622:	b2ed      	uxtb	r5, r5
 800a624:	e7d7      	b.n	800a5d6 <_scanf_float+0x192>
 800a626:	f1ba 0f01 	cmp.w	sl, #1
 800a62a:	f47f af3d 	bne.w	800a4a8 <_scanf_float+0x64>
 800a62e:	f04f 0a02 	mov.w	sl, #2
 800a632:	e7d0      	b.n	800a5d6 <_scanf_float+0x192>
 800a634:	b97d      	cbnz	r5, 800a656 <_scanf_float+0x212>
 800a636:	f1b9 0f00 	cmp.w	r9, #0
 800a63a:	f47f af38 	bne.w	800a4ae <_scanf_float+0x6a>
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a644:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a648:	f040 8108 	bne.w	800a85c <_scanf_float+0x418>
 800a64c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	2501      	movs	r5, #1
 800a654:	e7bf      	b.n	800a5d6 <_scanf_float+0x192>
 800a656:	2d03      	cmp	r5, #3
 800a658:	d0e2      	beq.n	800a620 <_scanf_float+0x1dc>
 800a65a:	2d05      	cmp	r5, #5
 800a65c:	e7de      	b.n	800a61c <_scanf_float+0x1d8>
 800a65e:	2d02      	cmp	r5, #2
 800a660:	f47f af22 	bne.w	800a4a8 <_scanf_float+0x64>
 800a664:	2503      	movs	r5, #3
 800a666:	e7b6      	b.n	800a5d6 <_scanf_float+0x192>
 800a668:	2d06      	cmp	r5, #6
 800a66a:	f47f af1d 	bne.w	800a4a8 <_scanf_float+0x64>
 800a66e:	2507      	movs	r5, #7
 800a670:	e7b1      	b.n	800a5d6 <_scanf_float+0x192>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	0591      	lsls	r1, r2, #22
 800a676:	f57f af17 	bpl.w	800a4a8 <_scanf_float+0x64>
 800a67a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a67e:	6022      	str	r2, [r4, #0]
 800a680:	f8cd 9008 	str.w	r9, [sp, #8]
 800a684:	e7a7      	b.n	800a5d6 <_scanf_float+0x192>
 800a686:	6822      	ldr	r2, [r4, #0]
 800a688:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a68c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a690:	d006      	beq.n	800a6a0 <_scanf_float+0x25c>
 800a692:	0550      	lsls	r0, r2, #21
 800a694:	f57f af08 	bpl.w	800a4a8 <_scanf_float+0x64>
 800a698:	f1b9 0f00 	cmp.w	r9, #0
 800a69c:	f000 80de 	beq.w	800a85c <_scanf_float+0x418>
 800a6a0:	0591      	lsls	r1, r2, #22
 800a6a2:	bf58      	it	pl
 800a6a4:	9902      	ldrpl	r1, [sp, #8]
 800a6a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a6aa:	bf58      	it	pl
 800a6ac:	eba9 0101 	subpl.w	r1, r9, r1
 800a6b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a6b4:	bf58      	it	pl
 800a6b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6ba:	6022      	str	r2, [r4, #0]
 800a6bc:	f04f 0900 	mov.w	r9, #0
 800a6c0:	e789      	b.n	800a5d6 <_scanf_float+0x192>
 800a6c2:	f04f 0a03 	mov.w	sl, #3
 800a6c6:	e786      	b.n	800a5d6 <_scanf_float+0x192>
 800a6c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4798      	blx	r3
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f43f aedb 	beq.w	800a48e <_scanf_float+0x4a>
 800a6d8:	e6e6      	b.n	800a4a8 <_scanf_float+0x64>
 800a6da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6e2:	463a      	mov	r2, r7
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	4798      	blx	r3
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	e6e8      	b.n	800a4c2 <_scanf_float+0x7e>
 800a6f0:	1e6b      	subs	r3, r5, #1
 800a6f2:	2b06      	cmp	r3, #6
 800a6f4:	d824      	bhi.n	800a740 <_scanf_float+0x2fc>
 800a6f6:	2d02      	cmp	r5, #2
 800a6f8:	d836      	bhi.n	800a768 <_scanf_float+0x324>
 800a6fa:	9b01      	ldr	r3, [sp, #4]
 800a6fc:	429e      	cmp	r6, r3
 800a6fe:	f67f aee4 	bls.w	800a4ca <_scanf_float+0x86>
 800a702:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a706:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a70a:	463a      	mov	r2, r7
 800a70c:	4640      	mov	r0, r8
 800a70e:	4798      	blx	r3
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	3b01      	subs	r3, #1
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	e7f0      	b.n	800a6fa <_scanf_float+0x2b6>
 800a718:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a71c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a720:	463a      	mov	r2, r7
 800a722:	4640      	mov	r0, r8
 800a724:	4798      	blx	r3
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	3b01      	subs	r3, #1
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a730:	fa5f fa8a 	uxtb.w	sl, sl
 800a734:	f1ba 0f02 	cmp.w	sl, #2
 800a738:	d1ee      	bne.n	800a718 <_scanf_float+0x2d4>
 800a73a:	3d03      	subs	r5, #3
 800a73c:	b2ed      	uxtb	r5, r5
 800a73e:	1b76      	subs	r6, r6, r5
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	05da      	lsls	r2, r3, #23
 800a744:	d530      	bpl.n	800a7a8 <_scanf_float+0x364>
 800a746:	055b      	lsls	r3, r3, #21
 800a748:	d511      	bpl.n	800a76e <_scanf_float+0x32a>
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	429e      	cmp	r6, r3
 800a74e:	f67f aebc 	bls.w	800a4ca <_scanf_float+0x86>
 800a752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a75a:	463a      	mov	r2, r7
 800a75c:	4640      	mov	r0, r8
 800a75e:	4798      	blx	r3
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	3b01      	subs	r3, #1
 800a764:	6123      	str	r3, [r4, #16]
 800a766:	e7f0      	b.n	800a74a <_scanf_float+0x306>
 800a768:	46aa      	mov	sl, r5
 800a76a:	46b3      	mov	fp, r6
 800a76c:	e7de      	b.n	800a72c <_scanf_float+0x2e8>
 800a76e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	2965      	cmp	r1, #101	@ 0x65
 800a776:	f103 33ff 	add.w	r3, r3, #4294967295
 800a77a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	d00c      	beq.n	800a79c <_scanf_float+0x358>
 800a782:	2945      	cmp	r1, #69	@ 0x45
 800a784:	d00a      	beq.n	800a79c <_scanf_float+0x358>
 800a786:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a78a:	463a      	mov	r2, r7
 800a78c:	4640      	mov	r0, r8
 800a78e:	4798      	blx	r3
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a796:	3b01      	subs	r3, #1
 800a798:	1eb5      	subs	r5, r6, #2
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7a0:	463a      	mov	r2, r7
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4798      	blx	r3
 800a7a6:	462e      	mov	r6, r5
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	f012 0210 	ands.w	r2, r2, #16
 800a7ae:	d001      	beq.n	800a7b4 <_scanf_float+0x370>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e68b      	b.n	800a4cc <_scanf_float+0x88>
 800a7b4:	7032      	strb	r2, [r6, #0]
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a7bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c0:	d11c      	bne.n	800a7fc <_scanf_float+0x3b8>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	454b      	cmp	r3, r9
 800a7c6:	eba3 0209 	sub.w	r2, r3, r9
 800a7ca:	d123      	bne.n	800a814 <_scanf_float+0x3d0>
 800a7cc:	9901      	ldr	r1, [sp, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	f7ff f975 	bl	8009ac0 <_strtod_r>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	6821      	ldr	r1, [r4, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f011 0f02 	tst.w	r1, #2
 800a7e0:	ec57 6b10 	vmov	r6, r7, d0
 800a7e4:	f103 0204 	add.w	r2, r3, #4
 800a7e8:	d01f      	beq.n	800a82a <_scanf_float+0x3e6>
 800a7ea:	9903      	ldr	r1, [sp, #12]
 800a7ec:	600a      	str	r2, [r1, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	e9c3 6700 	strd	r6, r7, [r3]
 800a7f4:	68e3      	ldr	r3, [r4, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	60e3      	str	r3, [r4, #12]
 800a7fa:	e7d9      	b.n	800a7b0 <_scanf_float+0x36c>
 800a7fc:	9b04      	ldr	r3, [sp, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0e4      	beq.n	800a7cc <_scanf_float+0x388>
 800a802:	9905      	ldr	r1, [sp, #20]
 800a804:	230a      	movs	r3, #10
 800a806:	3101      	adds	r1, #1
 800a808:	4640      	mov	r0, r8
 800a80a:	f002 fabb 	bl	800cd84 <_strtol_r>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	9e05      	ldr	r6, [sp, #20]
 800a812:	1ac2      	subs	r2, r0, r3
 800a814:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a818:	429e      	cmp	r6, r3
 800a81a:	bf28      	it	cs
 800a81c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a820:	4910      	ldr	r1, [pc, #64]	@ (800a864 <_scanf_float+0x420>)
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f954 	bl	800aad0 <siprintf>
 800a828:	e7d0      	b.n	800a7cc <_scanf_float+0x388>
 800a82a:	f011 0f04 	tst.w	r1, #4
 800a82e:	9903      	ldr	r1, [sp, #12]
 800a830:	600a      	str	r2, [r1, #0]
 800a832:	d1dc      	bne.n	800a7ee <_scanf_float+0x3aa>
 800a834:	681d      	ldr	r5, [r3, #0]
 800a836:	4632      	mov	r2, r6
 800a838:	463b      	mov	r3, r7
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f6 f97d 	bl	8000b3c <__aeabi_dcmpun>
 800a842:	b128      	cbz	r0, 800a850 <_scanf_float+0x40c>
 800a844:	4808      	ldr	r0, [pc, #32]	@ (800a868 <_scanf_float+0x424>)
 800a846:	f000 fb6b 	bl	800af20 <nanf>
 800a84a:	ed85 0a00 	vstr	s0, [r5]
 800a84e:	e7d1      	b.n	800a7f4 <_scanf_float+0x3b0>
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f6 f9d0 	bl	8000bf8 <__aeabi_d2f>
 800a858:	6028      	str	r0, [r5, #0]
 800a85a:	e7cb      	b.n	800a7f4 <_scanf_float+0x3b0>
 800a85c:	f04f 0900 	mov.w	r9, #0
 800a860:	e629      	b.n	800a4b6 <_scanf_float+0x72>
 800a862:	bf00      	nop
 800a864:	0800da94 	.word	0x0800da94
 800a868:	0800db4d 	.word	0x0800db4d

0800a86c <std>:
 800a86c:	2300      	movs	r3, #0
 800a86e:	b510      	push	{r4, lr}
 800a870:	4604      	mov	r4, r0
 800a872:	e9c0 3300 	strd	r3, r3, [r0]
 800a876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a87a:	6083      	str	r3, [r0, #8]
 800a87c:	8181      	strh	r1, [r0, #12]
 800a87e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a880:	81c2      	strh	r2, [r0, #14]
 800a882:	6183      	str	r3, [r0, #24]
 800a884:	4619      	mov	r1, r3
 800a886:	2208      	movs	r2, #8
 800a888:	305c      	adds	r0, #92	@ 0x5c
 800a88a:	f000 fa19 	bl	800acc0 <memset>
 800a88e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c4 <std+0x58>)
 800a890:	6263      	str	r3, [r4, #36]	@ 0x24
 800a892:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c8 <std+0x5c>)
 800a894:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a896:	4b0d      	ldr	r3, [pc, #52]	@ (800a8cc <std+0x60>)
 800a898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a89a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d0 <std+0x64>)
 800a89c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a89e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <std+0x68>)
 800a8a0:	6224      	str	r4, [r4, #32]
 800a8a2:	429c      	cmp	r4, r3
 800a8a4:	d006      	beq.n	800a8b4 <std+0x48>
 800a8a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8aa:	4294      	cmp	r4, r2
 800a8ac:	d002      	beq.n	800a8b4 <std+0x48>
 800a8ae:	33d0      	adds	r3, #208	@ 0xd0
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d105      	bne.n	800a8c0 <std+0x54>
 800a8b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f000 bb16 	b.w	800aeec <__retarget_lock_init_recursive>
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800ab11 	.word	0x0800ab11
 800a8c8:	0800ab33 	.word	0x0800ab33
 800a8cc:	0800ab6b 	.word	0x0800ab6b
 800a8d0:	0800ab8f 	.word	0x0800ab8f
 800a8d4:	200006c8 	.word	0x200006c8

0800a8d8 <stdio_exit_handler>:
 800a8d8:	4a02      	ldr	r2, [pc, #8]	@ (800a8e4 <stdio_exit_handler+0xc>)
 800a8da:	4903      	ldr	r1, [pc, #12]	@ (800a8e8 <stdio_exit_handler+0x10>)
 800a8dc:	4803      	ldr	r0, [pc, #12]	@ (800a8ec <stdio_exit_handler+0x14>)
 800a8de:	f000 b869 	b.w	800a9b4 <_fwalk_sglue>
 800a8e2:	bf00      	nop
 800a8e4:	20000020 	.word	0x20000020
 800a8e8:	0800d3dd 	.word	0x0800d3dd
 800a8ec:	2000019c 	.word	0x2000019c

0800a8f0 <cleanup_stdio>:
 800a8f0:	6841      	ldr	r1, [r0, #4]
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a924 <cleanup_stdio+0x34>)
 800a8f4:	4299      	cmp	r1, r3
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	d001      	beq.n	800a900 <cleanup_stdio+0x10>
 800a8fc:	f002 fd6e 	bl	800d3dc <_fflush_r>
 800a900:	68a1      	ldr	r1, [r4, #8]
 800a902:	4b09      	ldr	r3, [pc, #36]	@ (800a928 <cleanup_stdio+0x38>)
 800a904:	4299      	cmp	r1, r3
 800a906:	d002      	beq.n	800a90e <cleanup_stdio+0x1e>
 800a908:	4620      	mov	r0, r4
 800a90a:	f002 fd67 	bl	800d3dc <_fflush_r>
 800a90e:	68e1      	ldr	r1, [r4, #12]
 800a910:	4b06      	ldr	r3, [pc, #24]	@ (800a92c <cleanup_stdio+0x3c>)
 800a912:	4299      	cmp	r1, r3
 800a914:	d004      	beq.n	800a920 <cleanup_stdio+0x30>
 800a916:	4620      	mov	r0, r4
 800a918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a91c:	f002 bd5e 	b.w	800d3dc <_fflush_r>
 800a920:	bd10      	pop	{r4, pc}
 800a922:	bf00      	nop
 800a924:	200006c8 	.word	0x200006c8
 800a928:	20000730 	.word	0x20000730
 800a92c:	20000798 	.word	0x20000798

0800a930 <global_stdio_init.part.0>:
 800a930:	b510      	push	{r4, lr}
 800a932:	4b0b      	ldr	r3, [pc, #44]	@ (800a960 <global_stdio_init.part.0+0x30>)
 800a934:	4c0b      	ldr	r4, [pc, #44]	@ (800a964 <global_stdio_init.part.0+0x34>)
 800a936:	4a0c      	ldr	r2, [pc, #48]	@ (800a968 <global_stdio_init.part.0+0x38>)
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	4620      	mov	r0, r4
 800a93c:	2200      	movs	r2, #0
 800a93e:	2104      	movs	r1, #4
 800a940:	f7ff ff94 	bl	800a86c <std>
 800a944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a948:	2201      	movs	r2, #1
 800a94a:	2109      	movs	r1, #9
 800a94c:	f7ff ff8e 	bl	800a86c <std>
 800a950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a954:	2202      	movs	r2, #2
 800a956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a95a:	2112      	movs	r1, #18
 800a95c:	f7ff bf86 	b.w	800a86c <std>
 800a960:	20000800 	.word	0x20000800
 800a964:	200006c8 	.word	0x200006c8
 800a968:	0800a8d9 	.word	0x0800a8d9

0800a96c <__sfp_lock_acquire>:
 800a96c:	4801      	ldr	r0, [pc, #4]	@ (800a974 <__sfp_lock_acquire+0x8>)
 800a96e:	f000 babe 	b.w	800aeee <__retarget_lock_acquire_recursive>
 800a972:	bf00      	nop
 800a974:	20000809 	.word	0x20000809

0800a978 <__sfp_lock_release>:
 800a978:	4801      	ldr	r0, [pc, #4]	@ (800a980 <__sfp_lock_release+0x8>)
 800a97a:	f000 bab9 	b.w	800aef0 <__retarget_lock_release_recursive>
 800a97e:	bf00      	nop
 800a980:	20000809 	.word	0x20000809

0800a984 <__sinit>:
 800a984:	b510      	push	{r4, lr}
 800a986:	4604      	mov	r4, r0
 800a988:	f7ff fff0 	bl	800a96c <__sfp_lock_acquire>
 800a98c:	6a23      	ldr	r3, [r4, #32]
 800a98e:	b11b      	cbz	r3, 800a998 <__sinit+0x14>
 800a990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a994:	f7ff bff0 	b.w	800a978 <__sfp_lock_release>
 800a998:	4b04      	ldr	r3, [pc, #16]	@ (800a9ac <__sinit+0x28>)
 800a99a:	6223      	str	r3, [r4, #32]
 800a99c:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <__sinit+0x2c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1f5      	bne.n	800a990 <__sinit+0xc>
 800a9a4:	f7ff ffc4 	bl	800a930 <global_stdio_init.part.0>
 800a9a8:	e7f2      	b.n	800a990 <__sinit+0xc>
 800a9aa:	bf00      	nop
 800a9ac:	0800a8f1 	.word	0x0800a8f1
 800a9b0:	20000800 	.word	0x20000800

0800a9b4 <_fwalk_sglue>:
 800a9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	4688      	mov	r8, r1
 800a9bc:	4614      	mov	r4, r2
 800a9be:	2600      	movs	r6, #0
 800a9c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a9c8:	d505      	bpl.n	800a9d6 <_fwalk_sglue+0x22>
 800a9ca:	6824      	ldr	r4, [r4, #0]
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d1f7      	bne.n	800a9c0 <_fwalk_sglue+0xc>
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d907      	bls.n	800a9ec <_fwalk_sglue+0x38>
 800a9dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	d003      	beq.n	800a9ec <_fwalk_sglue+0x38>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	47c0      	blx	r8
 800a9ea:	4306      	orrs	r6, r0
 800a9ec:	3568      	adds	r5, #104	@ 0x68
 800a9ee:	e7e9      	b.n	800a9c4 <_fwalk_sglue+0x10>

0800a9f0 <iprintf>:
 800a9f0:	b40f      	push	{r0, r1, r2, r3}
 800a9f2:	b507      	push	{r0, r1, r2, lr}
 800a9f4:	4906      	ldr	r1, [pc, #24]	@ (800aa10 <iprintf+0x20>)
 800a9f6:	ab04      	add	r3, sp, #16
 800a9f8:	6808      	ldr	r0, [r1, #0]
 800a9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fe:	6881      	ldr	r1, [r0, #8]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f002 fb4f 	bl	800d0a4 <_vfiprintf_r>
 800aa06:	b003      	add	sp, #12
 800aa08:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa0c:	b004      	add	sp, #16
 800aa0e:	4770      	bx	lr
 800aa10:	20000198 	.word	0x20000198

0800aa14 <_puts_r>:
 800aa14:	6a03      	ldr	r3, [r0, #32]
 800aa16:	b570      	push	{r4, r5, r6, lr}
 800aa18:	6884      	ldr	r4, [r0, #8]
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	460e      	mov	r6, r1
 800aa1e:	b90b      	cbnz	r3, 800aa24 <_puts_r+0x10>
 800aa20:	f7ff ffb0 	bl	800a984 <__sinit>
 800aa24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa26:	07db      	lsls	r3, r3, #31
 800aa28:	d405      	bmi.n	800aa36 <_puts_r+0x22>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	0598      	lsls	r0, r3, #22
 800aa2e:	d402      	bmi.n	800aa36 <_puts_r+0x22>
 800aa30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa32:	f000 fa5c 	bl	800aeee <__retarget_lock_acquire_recursive>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	0719      	lsls	r1, r3, #28
 800aa3a:	d502      	bpl.n	800aa42 <_puts_r+0x2e>
 800aa3c:	6923      	ldr	r3, [r4, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d135      	bne.n	800aaae <_puts_r+0x9a>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 f8e5 	bl	800ac14 <__swsetup_r>
 800aa4a:	b380      	cbz	r0, 800aaae <_puts_r+0x9a>
 800aa4c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa52:	07da      	lsls	r2, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <_puts_r+0x4e>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	059b      	lsls	r3, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <_puts_r+0x4e>
 800aa5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa5e:	f000 fa47 	bl	800aef0 <__retarget_lock_release_recursive>
 800aa62:	4628      	mov	r0, r5
 800aa64:	bd70      	pop	{r4, r5, r6, pc}
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da04      	bge.n	800aa74 <_puts_r+0x60>
 800aa6a:	69a2      	ldr	r2, [r4, #24]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	dc17      	bgt.n	800aaa0 <_puts_r+0x8c>
 800aa70:	290a      	cmp	r1, #10
 800aa72:	d015      	beq.n	800aaa0 <_puts_r+0x8c>
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	6022      	str	r2, [r4, #0]
 800aa7a:	7019      	strb	r1, [r3, #0]
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa82:	3b01      	subs	r3, #1
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	2900      	cmp	r1, #0
 800aa88:	d1ed      	bne.n	800aa66 <_puts_r+0x52>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da11      	bge.n	800aab2 <_puts_r+0x9e>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	210a      	movs	r1, #10
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f87f 	bl	800ab96 <__swbuf_r>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d0d7      	beq.n	800aa4c <_puts_r+0x38>
 800aa9c:	250a      	movs	r5, #10
 800aa9e:	e7d7      	b.n	800aa50 <_puts_r+0x3c>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f877 	bl	800ab96 <__swbuf_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d1e7      	bne.n	800aa7c <_puts_r+0x68>
 800aaac:	e7ce      	b.n	800aa4c <_puts_r+0x38>
 800aaae:	3e01      	subs	r6, #1
 800aab0:	e7e4      	b.n	800aa7c <_puts_r+0x68>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	220a      	movs	r2, #10
 800aaba:	701a      	strb	r2, [r3, #0]
 800aabc:	e7ee      	b.n	800aa9c <_puts_r+0x88>
	...

0800aac0 <puts>:
 800aac0:	4b02      	ldr	r3, [pc, #8]	@ (800aacc <puts+0xc>)
 800aac2:	4601      	mov	r1, r0
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f7ff bfa5 	b.w	800aa14 <_puts_r>
 800aaca:	bf00      	nop
 800aacc:	20000198 	.word	0x20000198

0800aad0 <siprintf>:
 800aad0:	b40e      	push	{r1, r2, r3}
 800aad2:	b500      	push	{lr}
 800aad4:	b09c      	sub	sp, #112	@ 0x70
 800aad6:	ab1d      	add	r3, sp, #116	@ 0x74
 800aad8:	9002      	str	r0, [sp, #8]
 800aada:	9006      	str	r0, [sp, #24]
 800aadc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aae0:	4809      	ldr	r0, [pc, #36]	@ (800ab08 <siprintf+0x38>)
 800aae2:	9107      	str	r1, [sp, #28]
 800aae4:	9104      	str	r1, [sp, #16]
 800aae6:	4909      	ldr	r1, [pc, #36]	@ (800ab0c <siprintf+0x3c>)
 800aae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaec:	9105      	str	r1, [sp, #20]
 800aaee:	6800      	ldr	r0, [r0, #0]
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	a902      	add	r1, sp, #8
 800aaf4:	f002 f9b0 	bl	800ce58 <_svfiprintf_r>
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	b01c      	add	sp, #112	@ 0x70
 800ab00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab04:	b003      	add	sp, #12
 800ab06:	4770      	bx	lr
 800ab08:	20000198 	.word	0x20000198
 800ab0c:	ffff0208 	.word	0xffff0208

0800ab10 <__sread>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	460c      	mov	r4, r1
 800ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab18:	f000 f98a 	bl	800ae30 <_read_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	bfab      	itete	ge
 800ab20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab22:	89a3      	ldrhlt	r3, [r4, #12]
 800ab24:	181b      	addge	r3, r3, r0
 800ab26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab2a:	bfac      	ite	ge
 800ab2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab2e:	81a3      	strhlt	r3, [r4, #12]
 800ab30:	bd10      	pop	{r4, pc}

0800ab32 <__swrite>:
 800ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	461f      	mov	r7, r3
 800ab38:	898b      	ldrh	r3, [r1, #12]
 800ab3a:	05db      	lsls	r3, r3, #23
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4616      	mov	r6, r2
 800ab42:	d505      	bpl.n	800ab50 <__swrite+0x1e>
 800ab44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab48:	2302      	movs	r3, #2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f000 f95e 	bl	800ae0c <_lseek_r>
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	463b      	mov	r3, r7
 800ab60:	4628      	mov	r0, r5
 800ab62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab66:	f000 b985 	b.w	800ae74 <_write_r>

0800ab6a <__sseek>:
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab72:	f000 f94b 	bl	800ae0c <_lseek_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	bf15      	itete	ne
 800ab7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab86:	81a3      	strheq	r3, [r4, #12]
 800ab88:	bf18      	it	ne
 800ab8a:	81a3      	strhne	r3, [r4, #12]
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <__sclose>:
 800ab8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab92:	f000 b92b 	b.w	800adec <_close_r>

0800ab96 <__swbuf_r>:
 800ab96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab98:	460e      	mov	r6, r1
 800ab9a:	4614      	mov	r4, r2
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	b118      	cbz	r0, 800aba8 <__swbuf_r+0x12>
 800aba0:	6a03      	ldr	r3, [r0, #32]
 800aba2:	b90b      	cbnz	r3, 800aba8 <__swbuf_r+0x12>
 800aba4:	f7ff feee 	bl	800a984 <__sinit>
 800aba8:	69a3      	ldr	r3, [r4, #24]
 800abaa:	60a3      	str	r3, [r4, #8]
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	071a      	lsls	r2, r3, #28
 800abb0:	d501      	bpl.n	800abb6 <__swbuf_r+0x20>
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	b943      	cbnz	r3, 800abc8 <__swbuf_r+0x32>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f82b 	bl	800ac14 <__swsetup_r>
 800abbe:	b118      	cbz	r0, 800abc8 <__swbuf_r+0x32>
 800abc0:	f04f 37ff 	mov.w	r7, #4294967295
 800abc4:	4638      	mov	r0, r7
 800abc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	6922      	ldr	r2, [r4, #16]
 800abcc:	1a98      	subs	r0, r3, r2
 800abce:	6963      	ldr	r3, [r4, #20]
 800abd0:	b2f6      	uxtb	r6, r6
 800abd2:	4283      	cmp	r3, r0
 800abd4:	4637      	mov	r7, r6
 800abd6:	dc05      	bgt.n	800abe4 <__swbuf_r+0x4e>
 800abd8:	4621      	mov	r1, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f002 fbfe 	bl	800d3dc <_fflush_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1ed      	bne.n	800abc0 <__swbuf_r+0x2a>
 800abe4:	68a3      	ldr	r3, [r4, #8]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	60a3      	str	r3, [r4, #8]
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	701e      	strb	r6, [r3, #0]
 800abf2:	6962      	ldr	r2, [r4, #20]
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d004      	beq.n	800ac04 <__swbuf_r+0x6e>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	07db      	lsls	r3, r3, #31
 800abfe:	d5e1      	bpl.n	800abc4 <__swbuf_r+0x2e>
 800ac00:	2e0a      	cmp	r6, #10
 800ac02:	d1df      	bne.n	800abc4 <__swbuf_r+0x2e>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4628      	mov	r0, r5
 800ac08:	f002 fbe8 	bl	800d3dc <_fflush_r>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d0d9      	beq.n	800abc4 <__swbuf_r+0x2e>
 800ac10:	e7d6      	b.n	800abc0 <__swbuf_r+0x2a>
	...

0800ac14 <__swsetup_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4b29      	ldr	r3, [pc, #164]	@ (800acbc <__swsetup_r+0xa8>)
 800ac18:	4605      	mov	r5, r0
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	b118      	cbz	r0, 800ac28 <__swsetup_r+0x14>
 800ac20:	6a03      	ldr	r3, [r0, #32]
 800ac22:	b90b      	cbnz	r3, 800ac28 <__swsetup_r+0x14>
 800ac24:	f7ff feae 	bl	800a984 <__sinit>
 800ac28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac2c:	0719      	lsls	r1, r3, #28
 800ac2e:	d422      	bmi.n	800ac76 <__swsetup_r+0x62>
 800ac30:	06da      	lsls	r2, r3, #27
 800ac32:	d407      	bmi.n	800ac44 <__swsetup_r+0x30>
 800ac34:	2209      	movs	r2, #9
 800ac36:	602a      	str	r2, [r5, #0]
 800ac38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	e033      	b.n	800acac <__swsetup_r+0x98>
 800ac44:	0758      	lsls	r0, r3, #29
 800ac46:	d512      	bpl.n	800ac6e <__swsetup_r+0x5a>
 800ac48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac4a:	b141      	cbz	r1, 800ac5e <__swsetup_r+0x4a>
 800ac4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac50:	4299      	cmp	r1, r3
 800ac52:	d002      	beq.n	800ac5a <__swsetup_r+0x46>
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 ffd3 	bl	800bc00 <_free_r>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	2300      	movs	r3, #0
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f043 0308 	orr.w	r3, r3, #8
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	b94b      	cbnz	r3, 800ac8e <__swsetup_r+0x7a>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac84:	d003      	beq.n	800ac8e <__swsetup_r+0x7a>
 800ac86:	4621      	mov	r1, r4
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f002 fc07 	bl	800d49c <__smakebuf_r>
 800ac8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac92:	f013 0201 	ands.w	r2, r3, #1
 800ac96:	d00a      	beq.n	800acae <__swsetup_r+0x9a>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	60a2      	str	r2, [r4, #8]
 800ac9c:	6962      	ldr	r2, [r4, #20]
 800ac9e:	4252      	negs	r2, r2
 800aca0:	61a2      	str	r2, [r4, #24]
 800aca2:	6922      	ldr	r2, [r4, #16]
 800aca4:	b942      	cbnz	r2, 800acb8 <__swsetup_r+0xa4>
 800aca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acaa:	d1c5      	bne.n	800ac38 <__swsetup_r+0x24>
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	0799      	lsls	r1, r3, #30
 800acb0:	bf58      	it	pl
 800acb2:	6962      	ldrpl	r2, [r4, #20]
 800acb4:	60a2      	str	r2, [r4, #8]
 800acb6:	e7f4      	b.n	800aca2 <__swsetup_r+0x8e>
 800acb8:	2000      	movs	r0, #0
 800acba:	e7f7      	b.n	800acac <__swsetup_r+0x98>
 800acbc:	20000198 	.word	0x20000198

0800acc0 <memset>:
 800acc0:	4402      	add	r2, r0
 800acc2:	4603      	mov	r3, r0
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d100      	bne.n	800acca <memset+0xa>
 800acc8:	4770      	bx	lr
 800acca:	f803 1b01 	strb.w	r1, [r3], #1
 800acce:	e7f9      	b.n	800acc4 <memset+0x4>

0800acd0 <strdup>:
 800acd0:	4b02      	ldr	r3, [pc, #8]	@ (800acdc <strdup+0xc>)
 800acd2:	4601      	mov	r1, r0
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f000 b803 	b.w	800ace0 <_strdup_r>
 800acda:	bf00      	nop
 800acdc:	20000198 	.word	0x20000198

0800ace0 <_strdup_r>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	460d      	mov	r5, r1
 800ace8:	f7f5 faca 	bl	8000280 <strlen>
 800acec:	1c46      	adds	r6, r0, #1
 800acee:	4631      	mov	r1, r6
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7fe f855 	bl	8008da0 <_malloc_r>
 800acf6:	4604      	mov	r4, r0
 800acf8:	b118      	cbz	r0, 800ad02 <_strdup_r+0x22>
 800acfa:	4632      	mov	r2, r6
 800acfc:	4629      	mov	r1, r5
 800acfe:	f000 f8f8 	bl	800aef2 <memcpy>
 800ad02:	4620      	mov	r0, r4
 800ad04:	bd70      	pop	{r4, r5, r6, pc}

0800ad06 <strncmp>:
 800ad06:	b510      	push	{r4, lr}
 800ad08:	b16a      	cbz	r2, 800ad26 <strncmp+0x20>
 800ad0a:	3901      	subs	r1, #1
 800ad0c:	1884      	adds	r4, r0, r2
 800ad0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d103      	bne.n	800ad22 <strncmp+0x1c>
 800ad1a:	42a0      	cmp	r0, r4
 800ad1c:	d001      	beq.n	800ad22 <strncmp+0x1c>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1f5      	bne.n	800ad0e <strncmp+0x8>
 800ad22:	1ad0      	subs	r0, r2, r3
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	4610      	mov	r0, r2
 800ad28:	e7fc      	b.n	800ad24 <strncmp+0x1e>
	...

0800ad2c <strtok>:
 800ad2c:	4b16      	ldr	r3, [pc, #88]	@ (800ad88 <strtok+0x5c>)
 800ad2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	681f      	ldr	r7, [r3, #0]
 800ad34:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ad36:	4605      	mov	r5, r0
 800ad38:	460e      	mov	r6, r1
 800ad3a:	b9ec      	cbnz	r4, 800ad78 <strtok+0x4c>
 800ad3c:	2050      	movs	r0, #80	@ 0x50
 800ad3e:	f7fd fffd 	bl	8008d3c <malloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad46:	b920      	cbnz	r0, 800ad52 <strtok+0x26>
 800ad48:	4b10      	ldr	r3, [pc, #64]	@ (800ad8c <strtok+0x60>)
 800ad4a:	4811      	ldr	r0, [pc, #68]	@ (800ad90 <strtok+0x64>)
 800ad4c:	215b      	movs	r1, #91	@ 0x5b
 800ad4e:	f000 f8ed 	bl	800af2c <__assert_func>
 800ad52:	e9c0 4400 	strd	r4, r4, [r0]
 800ad56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ad62:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ad66:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ad6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ad6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ad72:	6184      	str	r4, [r0, #24]
 800ad74:	7704      	strb	r4, [r0, #28]
 800ad76:	6244      	str	r4, [r0, #36]	@ 0x24
 800ad78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad84:	f000 b806 	b.w	800ad94 <__strtok_r>
 800ad88:	20000198 	.word	0x20000198
 800ad8c:	0800da99 	.word	0x0800da99
 800ad90:	0800dab0 	.word	0x0800dab0

0800ad94 <__strtok_r>:
 800ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad96:	4604      	mov	r4, r0
 800ad98:	b908      	cbnz	r0, 800ad9e <__strtok_r+0xa>
 800ad9a:	6814      	ldr	r4, [r2, #0]
 800ad9c:	b144      	cbz	r4, 800adb0 <__strtok_r+0x1c>
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ada4:	460f      	mov	r7, r1
 800ada6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800adaa:	b91e      	cbnz	r6, 800adb4 <__strtok_r+0x20>
 800adac:	b965      	cbnz	r5, 800adc8 <__strtok_r+0x34>
 800adae:	6015      	str	r5, [r2, #0]
 800adb0:	2000      	movs	r0, #0
 800adb2:	e005      	b.n	800adc0 <__strtok_r+0x2c>
 800adb4:	42b5      	cmp	r5, r6
 800adb6:	d1f6      	bne.n	800ada6 <__strtok_r+0x12>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1f0      	bne.n	800ad9e <__strtok_r+0xa>
 800adbc:	6014      	str	r4, [r2, #0]
 800adbe:	7003      	strb	r3, [r0, #0]
 800adc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc2:	461c      	mov	r4, r3
 800adc4:	e00c      	b.n	800ade0 <__strtok_r+0x4c>
 800adc6:	b915      	cbnz	r5, 800adce <__strtok_r+0x3a>
 800adc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adcc:	460e      	mov	r6, r1
 800adce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800add2:	42ab      	cmp	r3, r5
 800add4:	d1f7      	bne.n	800adc6 <__strtok_r+0x32>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f3      	beq.n	800adc2 <__strtok_r+0x2e>
 800adda:	2300      	movs	r3, #0
 800addc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ade0:	6014      	str	r4, [r2, #0]
 800ade2:	e7ed      	b.n	800adc0 <__strtok_r+0x2c>

0800ade4 <_localeconv_r>:
 800ade4:	4800      	ldr	r0, [pc, #0]	@ (800ade8 <_localeconv_r+0x4>)
 800ade6:	4770      	bx	lr
 800ade8:	2000011c 	.word	0x2000011c

0800adec <_close_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d06      	ldr	r5, [pc, #24]	@ (800ae08 <_close_r+0x1c>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f8 fd26 	bl	8003848 <_close>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_close_r+0x1a>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_close_r+0x1a>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20000804 	.word	0x20000804

0800ae0c <_lseek_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d07      	ldr	r5, [pc, #28]	@ (800ae2c <_lseek_r+0x20>)
 800ae10:	4604      	mov	r4, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	602a      	str	r2, [r5, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f7f8 fd3b 	bl	8003896 <_lseek>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_lseek_r+0x1e>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_lseek_r+0x1e>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	20000804 	.word	0x20000804

0800ae30 <_read_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d07      	ldr	r5, [pc, #28]	@ (800ae50 <_read_r+0x20>)
 800ae34:	4604      	mov	r4, r0
 800ae36:	4608      	mov	r0, r1
 800ae38:	4611      	mov	r1, r2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	602a      	str	r2, [r5, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f7f8 fcc9 	bl	80037d6 <_read>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_read_r+0x1e>
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_read_r+0x1e>
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	20000804 	.word	0x20000804

0800ae54 <_sbrk_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d06      	ldr	r5, [pc, #24]	@ (800ae70 <_sbrk_r+0x1c>)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	f7f8 fd26 	bl	80038b0 <_sbrk>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d102      	bne.n	800ae6e <_sbrk_r+0x1a>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	b103      	cbz	r3, 800ae6e <_sbrk_r+0x1a>
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	20000804 	.word	0x20000804

0800ae74 <_write_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d07      	ldr	r5, [pc, #28]	@ (800ae94 <_write_r+0x20>)
 800ae78:	4604      	mov	r4, r0
 800ae7a:	4608      	mov	r0, r1
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	2200      	movs	r2, #0
 800ae80:	602a      	str	r2, [r5, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	f7f8 fcc4 	bl	8003810 <_write>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_write_r+0x1e>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_write_r+0x1e>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	20000804 	.word	0x20000804

0800ae98 <__errno>:
 800ae98:	4b01      	ldr	r3, [pc, #4]	@ (800aea0 <__errno+0x8>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20000198 	.word	0x20000198

0800aea4 <__libc_init_array>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4d0d      	ldr	r5, [pc, #52]	@ (800aedc <__libc_init_array+0x38>)
 800aea8:	4c0d      	ldr	r4, [pc, #52]	@ (800aee0 <__libc_init_array+0x3c>)
 800aeaa:	1b64      	subs	r4, r4, r5
 800aeac:	10a4      	asrs	r4, r4, #2
 800aeae:	2600      	movs	r6, #0
 800aeb0:	42a6      	cmp	r6, r4
 800aeb2:	d109      	bne.n	800aec8 <__libc_init_array+0x24>
 800aeb4:	4d0b      	ldr	r5, [pc, #44]	@ (800aee4 <__libc_init_array+0x40>)
 800aeb6:	4c0c      	ldr	r4, [pc, #48]	@ (800aee8 <__libc_init_array+0x44>)
 800aeb8:	f002 fbfe 	bl	800d6b8 <_init>
 800aebc:	1b64      	subs	r4, r4, r5
 800aebe:	10a4      	asrs	r4, r4, #2
 800aec0:	2600      	movs	r6, #0
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	d105      	bne.n	800aed2 <__libc_init_array+0x2e>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aecc:	4798      	blx	r3
 800aece:	3601      	adds	r6, #1
 800aed0:	e7ee      	b.n	800aeb0 <__libc_init_array+0xc>
 800aed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed6:	4798      	blx	r3
 800aed8:	3601      	adds	r6, #1
 800aeda:	e7f2      	b.n	800aec2 <__libc_init_array+0x1e>
 800aedc:	0800de9c 	.word	0x0800de9c
 800aee0:	0800de9c 	.word	0x0800de9c
 800aee4:	0800de9c 	.word	0x0800de9c
 800aee8:	0800dea0 	.word	0x0800dea0

0800aeec <__retarget_lock_init_recursive>:
 800aeec:	4770      	bx	lr

0800aeee <__retarget_lock_acquire_recursive>:
 800aeee:	4770      	bx	lr

0800aef0 <__retarget_lock_release_recursive>:
 800aef0:	4770      	bx	lr

0800aef2 <memcpy>:
 800aef2:	440a      	add	r2, r1
 800aef4:	4291      	cmp	r1, r2
 800aef6:	f100 33ff 	add.w	r3, r0, #4294967295
 800aefa:	d100      	bne.n	800aefe <memcpy+0xc>
 800aefc:	4770      	bx	lr
 800aefe:	b510      	push	{r4, lr}
 800af00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af08:	4291      	cmp	r1, r2
 800af0a:	d1f9      	bne.n	800af00 <memcpy+0xe>
 800af0c:	bd10      	pop	{r4, pc}
	...

0800af10 <nan>:
 800af10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af18 <nan+0x8>
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	00000000 	.word	0x00000000
 800af1c:	7ff80000 	.word	0x7ff80000

0800af20 <nanf>:
 800af20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af28 <nanf+0x8>
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	7fc00000 	.word	0x7fc00000

0800af2c <__assert_func>:
 800af2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af2e:	4614      	mov	r4, r2
 800af30:	461a      	mov	r2, r3
 800af32:	4b09      	ldr	r3, [pc, #36]	@ (800af58 <__assert_func+0x2c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4605      	mov	r5, r0
 800af38:	68d8      	ldr	r0, [r3, #12]
 800af3a:	b954      	cbnz	r4, 800af52 <__assert_func+0x26>
 800af3c:	4b07      	ldr	r3, [pc, #28]	@ (800af5c <__assert_func+0x30>)
 800af3e:	461c      	mov	r4, r3
 800af40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af44:	9100      	str	r1, [sp, #0]
 800af46:	462b      	mov	r3, r5
 800af48:	4905      	ldr	r1, [pc, #20]	@ (800af60 <__assert_func+0x34>)
 800af4a:	f002 fa6f 	bl	800d42c <fiprintf>
 800af4e:	f002 fb1d 	bl	800d58c <abort>
 800af52:	4b04      	ldr	r3, [pc, #16]	@ (800af64 <__assert_func+0x38>)
 800af54:	e7f4      	b.n	800af40 <__assert_func+0x14>
 800af56:	bf00      	nop
 800af58:	20000198 	.word	0x20000198
 800af5c:	0800db4d 	.word	0x0800db4d
 800af60:	0800db1f 	.word	0x0800db1f
 800af64:	0800db12 	.word	0x0800db12

0800af68 <quorem>:
 800af68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	6903      	ldr	r3, [r0, #16]
 800af6e:	690c      	ldr	r4, [r1, #16]
 800af70:	42a3      	cmp	r3, r4
 800af72:	4607      	mov	r7, r0
 800af74:	db7e      	blt.n	800b074 <quorem+0x10c>
 800af76:	3c01      	subs	r4, #1
 800af78:	f101 0814 	add.w	r8, r1, #20
 800af7c:	00a3      	lsls	r3, r4, #2
 800af7e:	f100 0514 	add.w	r5, r0, #20
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af92:	3301      	adds	r3, #1
 800af94:	429a      	cmp	r2, r3
 800af96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800af9e:	d32e      	bcc.n	800affe <quorem+0x96>
 800afa0:	f04f 0a00 	mov.w	sl, #0
 800afa4:	46c4      	mov	ip, r8
 800afa6:	46ae      	mov	lr, r5
 800afa8:	46d3      	mov	fp, sl
 800afaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afae:	b298      	uxth	r0, r3
 800afb0:	fb06 a000 	mla	r0, r6, r0, sl
 800afb4:	0c02      	lsrs	r2, r0, #16
 800afb6:	0c1b      	lsrs	r3, r3, #16
 800afb8:	fb06 2303 	mla	r3, r6, r3, r2
 800afbc:	f8de 2000 	ldr.w	r2, [lr]
 800afc0:	b280      	uxth	r0, r0
 800afc2:	b292      	uxth	r2, r2
 800afc4:	1a12      	subs	r2, r2, r0
 800afc6:	445a      	add	r2, fp
 800afc8:	f8de 0000 	ldr.w	r0, [lr]
 800afcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afda:	b292      	uxth	r2, r2
 800afdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afe0:	45e1      	cmp	r9, ip
 800afe2:	f84e 2b04 	str.w	r2, [lr], #4
 800afe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afea:	d2de      	bcs.n	800afaa <quorem+0x42>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	58eb      	ldr	r3, [r5, r3]
 800aff0:	b92b      	cbnz	r3, 800affe <quorem+0x96>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	429d      	cmp	r5, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	d32f      	bcc.n	800b05c <quorem+0xf4>
 800affc:	613c      	str	r4, [r7, #16]
 800affe:	4638      	mov	r0, r7
 800b000:	f001 fc58 	bl	800c8b4 <__mcmp>
 800b004:	2800      	cmp	r0, #0
 800b006:	db25      	blt.n	800b054 <quorem+0xec>
 800b008:	4629      	mov	r1, r5
 800b00a:	2000      	movs	r0, #0
 800b00c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b010:	f8d1 c000 	ldr.w	ip, [r1]
 800b014:	fa1f fe82 	uxth.w	lr, r2
 800b018:	fa1f f38c 	uxth.w	r3, ip
 800b01c:	eba3 030e 	sub.w	r3, r3, lr
 800b020:	4403      	add	r3, r0
 800b022:	0c12      	lsrs	r2, r2, #16
 800b024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b032:	45c1      	cmp	r9, r8
 800b034:	f841 3b04 	str.w	r3, [r1], #4
 800b038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b03c:	d2e6      	bcs.n	800b00c <quorem+0xa4>
 800b03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b046:	b922      	cbnz	r2, 800b052 <quorem+0xea>
 800b048:	3b04      	subs	r3, #4
 800b04a:	429d      	cmp	r5, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	d30b      	bcc.n	800b068 <quorem+0x100>
 800b050:	613c      	str	r4, [r7, #16]
 800b052:	3601      	adds	r6, #1
 800b054:	4630      	mov	r0, r6
 800b056:	b003      	add	sp, #12
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	6812      	ldr	r2, [r2, #0]
 800b05e:	3b04      	subs	r3, #4
 800b060:	2a00      	cmp	r2, #0
 800b062:	d1cb      	bne.n	800affc <quorem+0x94>
 800b064:	3c01      	subs	r4, #1
 800b066:	e7c6      	b.n	800aff6 <quorem+0x8e>
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	3b04      	subs	r3, #4
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d1ef      	bne.n	800b050 <quorem+0xe8>
 800b070:	3c01      	subs	r4, #1
 800b072:	e7ea      	b.n	800b04a <quorem+0xe2>
 800b074:	2000      	movs	r0, #0
 800b076:	e7ee      	b.n	800b056 <quorem+0xee>

0800b078 <_dtoa_r>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	69c7      	ldr	r7, [r0, #28]
 800b07e:	b099      	sub	sp, #100	@ 0x64
 800b080:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b084:	ec55 4b10 	vmov	r4, r5, d0
 800b088:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b08a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b08c:	4683      	mov	fp, r0
 800b08e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b090:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b092:	b97f      	cbnz	r7, 800b0b4 <_dtoa_r+0x3c>
 800b094:	2010      	movs	r0, #16
 800b096:	f7fd fe51 	bl	8008d3c <malloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0a0:	b920      	cbnz	r0, 800b0ac <_dtoa_r+0x34>
 800b0a2:	4ba7      	ldr	r3, [pc, #668]	@ (800b340 <_dtoa_r+0x2c8>)
 800b0a4:	21ef      	movs	r1, #239	@ 0xef
 800b0a6:	48a7      	ldr	r0, [pc, #668]	@ (800b344 <_dtoa_r+0x2cc>)
 800b0a8:	f7ff ff40 	bl	800af2c <__assert_func>
 800b0ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0b0:	6007      	str	r7, [r0, #0]
 800b0b2:	60c7      	str	r7, [r0, #12]
 800b0b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0b8:	6819      	ldr	r1, [r3, #0]
 800b0ba:	b159      	cbz	r1, 800b0d4 <_dtoa_r+0x5c>
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	604a      	str	r2, [r1, #4]
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4093      	lsls	r3, r2
 800b0c4:	608b      	str	r3, [r1, #8]
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f001 f970 	bl	800c3ac <_Bfree>
 800b0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	1e2b      	subs	r3, r5, #0
 800b0d6:	bfb9      	ittee	lt
 800b0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0dc:	9303      	strlt	r3, [sp, #12]
 800b0de:	2300      	movge	r3, #0
 800b0e0:	6033      	strge	r3, [r6, #0]
 800b0e2:	9f03      	ldr	r7, [sp, #12]
 800b0e4:	4b98      	ldr	r3, [pc, #608]	@ (800b348 <_dtoa_r+0x2d0>)
 800b0e6:	bfbc      	itt	lt
 800b0e8:	2201      	movlt	r2, #1
 800b0ea:	6032      	strlt	r2, [r6, #0]
 800b0ec:	43bb      	bics	r3, r7
 800b0ee:	d112      	bne.n	800b116 <_dtoa_r+0x9e>
 800b0f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0fc:	4323      	orrs	r3, r4
 800b0fe:	f000 854d 	beq.w	800bb9c <_dtoa_r+0xb24>
 800b102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b104:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b35c <_dtoa_r+0x2e4>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 854f 	beq.w	800bbac <_dtoa_r+0xb34>
 800b10e:	f10a 0303 	add.w	r3, sl, #3
 800b112:	f000 bd49 	b.w	800bba8 <_dtoa_r+0xb30>
 800b116:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b11a:	2200      	movs	r2, #0
 800b11c:	ec51 0b17 	vmov	r0, r1, d7
 800b120:	2300      	movs	r3, #0
 800b122:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b126:	f7f5 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b12a:	4680      	mov	r8, r0
 800b12c:	b158      	cbz	r0, 800b146 <_dtoa_r+0xce>
 800b12e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b130:	2301      	movs	r3, #1
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b136:	b113      	cbz	r3, 800b13e <_dtoa_r+0xc6>
 800b138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b13a:	4b84      	ldr	r3, [pc, #528]	@ (800b34c <_dtoa_r+0x2d4>)
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b360 <_dtoa_r+0x2e8>
 800b142:	f000 bd33 	b.w	800bbac <_dtoa_r+0xb34>
 800b146:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b14a:	aa16      	add	r2, sp, #88	@ 0x58
 800b14c:	a917      	add	r1, sp, #92	@ 0x5c
 800b14e:	4658      	mov	r0, fp
 800b150:	f001 fcd0 	bl	800caf4 <__d2b>
 800b154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b158:	4681      	mov	r9, r0
 800b15a:	2e00      	cmp	r6, #0
 800b15c:	d077      	beq.n	800b24e <_dtoa_r+0x1d6>
 800b15e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b160:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b16c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b178:	4619      	mov	r1, r3
 800b17a:	2200      	movs	r2, #0
 800b17c:	4b74      	ldr	r3, [pc, #464]	@ (800b350 <_dtoa_r+0x2d8>)
 800b17e:	f7f5 f88b 	bl	8000298 <__aeabi_dsub>
 800b182:	a369      	add	r3, pc, #420	@ (adr r3, 800b328 <_dtoa_r+0x2b0>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	a368      	add	r3, pc, #416	@ (adr r3, 800b330 <_dtoa_r+0x2b8>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f7f5 f883 	bl	800029c <__adddf3>
 800b196:	4604      	mov	r4, r0
 800b198:	4630      	mov	r0, r6
 800b19a:	460d      	mov	r5, r1
 800b19c:	f7f5 f9ca 	bl	8000534 <__aeabi_i2d>
 800b1a0:	a365      	add	r3, pc, #404	@ (adr r3, 800b338 <_dtoa_r+0x2c0>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 fa2f 	bl	8000608 <__aeabi_dmul>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	f7f5 f873 	bl	800029c <__adddf3>
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	f7f5 fcd5 	bl	8000b68 <__aeabi_d2iz>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fc90 	bl	8000aec <__aeabi_dcmplt>
 800b1cc:	b140      	cbz	r0, 800b1e0 <_dtoa_r+0x168>
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	f7f5 f9b0 	bl	8000534 <__aeabi_i2d>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	f7f5 fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1dc:	b900      	cbnz	r0, 800b1e0 <_dtoa_r+0x168>
 800b1de:	3f01      	subs	r7, #1
 800b1e0:	2f16      	cmp	r7, #22
 800b1e2:	d851      	bhi.n	800b288 <_dtoa_r+0x210>
 800b1e4:	4b5b      	ldr	r3, [pc, #364]	@ (800b354 <_dtoa_r+0x2dc>)
 800b1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1f2:	f7f5 fc7b 	bl	8000aec <__aeabi_dcmplt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d048      	beq.n	800b28c <_dtoa_r+0x214>
 800b1fa:	3f01      	subs	r7, #1
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800b200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b202:	1b9b      	subs	r3, r3, r6
 800b204:	1e5a      	subs	r2, r3, #1
 800b206:	bf44      	itt	mi
 800b208:	f1c3 0801 	rsbmi	r8, r3, #1
 800b20c:	2300      	movmi	r3, #0
 800b20e:	9208      	str	r2, [sp, #32]
 800b210:	bf54      	ite	pl
 800b212:	f04f 0800 	movpl.w	r8, #0
 800b216:	9308      	strmi	r3, [sp, #32]
 800b218:	2f00      	cmp	r7, #0
 800b21a:	db39      	blt.n	800b290 <_dtoa_r+0x218>
 800b21c:	9b08      	ldr	r3, [sp, #32]
 800b21e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b220:	443b      	add	r3, r7
 800b222:	9308      	str	r3, [sp, #32]
 800b224:	2300      	movs	r3, #0
 800b226:	930a      	str	r3, [sp, #40]	@ 0x28
 800b228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d864      	bhi.n	800b2f8 <_dtoa_r+0x280>
 800b22e:	2b05      	cmp	r3, #5
 800b230:	bfc4      	itt	gt
 800b232:	3b04      	subgt	r3, #4
 800b234:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b238:	f1a3 0302 	sub.w	r3, r3, #2
 800b23c:	bfcc      	ite	gt
 800b23e:	2400      	movgt	r4, #0
 800b240:	2401      	movle	r4, #1
 800b242:	2b03      	cmp	r3, #3
 800b244:	d863      	bhi.n	800b30e <_dtoa_r+0x296>
 800b246:	e8df f003 	tbb	[pc, r3]
 800b24a:	372a      	.short	0x372a
 800b24c:	5535      	.short	0x5535
 800b24e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b252:	441e      	add	r6, r3
 800b254:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b258:	2b20      	cmp	r3, #32
 800b25a:	bfc1      	itttt	gt
 800b25c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b260:	409f      	lslgt	r7, r3
 800b262:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b266:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b26a:	bfd6      	itet	le
 800b26c:	f1c3 0320 	rsble	r3, r3, #32
 800b270:	ea47 0003 	orrgt.w	r0, r7, r3
 800b274:	fa04 f003 	lslle.w	r0, r4, r3
 800b278:	f7f5 f94c 	bl	8000514 <__aeabi_ui2d>
 800b27c:	2201      	movs	r2, #1
 800b27e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b282:	3e01      	subs	r6, #1
 800b284:	9214      	str	r2, [sp, #80]	@ 0x50
 800b286:	e777      	b.n	800b178 <_dtoa_r+0x100>
 800b288:	2301      	movs	r3, #1
 800b28a:	e7b8      	b.n	800b1fe <_dtoa_r+0x186>
 800b28c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b28e:	e7b7      	b.n	800b200 <_dtoa_r+0x188>
 800b290:	427b      	negs	r3, r7
 800b292:	930a      	str	r3, [sp, #40]	@ 0x28
 800b294:	2300      	movs	r3, #0
 800b296:	eba8 0807 	sub.w	r8, r8, r7
 800b29a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b29c:	e7c4      	b.n	800b228 <_dtoa_r+0x1b0>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dc35      	bgt.n	800b314 <_dtoa_r+0x29c>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	9307      	str	r3, [sp, #28]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2b2:	e00b      	b.n	800b2cc <_dtoa_r+0x254>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e7f3      	b.n	800b2a0 <_dtoa_r+0x228>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2be:	18fb      	adds	r3, r7, r3
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	9307      	str	r3, [sp, #28]
 800b2c8:	bfb8      	it	lt
 800b2ca:	2301      	movlt	r3, #1
 800b2cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	2204      	movs	r2, #4
 800b2d4:	f102 0514 	add.w	r5, r2, #20
 800b2d8:	429d      	cmp	r5, r3
 800b2da:	d91f      	bls.n	800b31c <_dtoa_r+0x2a4>
 800b2dc:	6041      	str	r1, [r0, #4]
 800b2de:	4658      	mov	r0, fp
 800b2e0:	f001 f824 	bl	800c32c <_Balloc>
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d13c      	bne.n	800b364 <_dtoa_r+0x2ec>
 800b2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b358 <_dtoa_r+0x2e0>)
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2f2:	e6d8      	b.n	800b0a6 <_dtoa_r+0x2e>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e7e0      	b.n	800b2ba <_dtoa_r+0x242>
 800b2f8:	2401      	movs	r4, #1
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b300:	f04f 33ff 	mov.w	r3, #4294967295
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	9307      	str	r3, [sp, #28]
 800b308:	2200      	movs	r2, #0
 800b30a:	2312      	movs	r3, #18
 800b30c:	e7d0      	b.n	800b2b0 <_dtoa_r+0x238>
 800b30e:	2301      	movs	r3, #1
 800b310:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b312:	e7f5      	b.n	800b300 <_dtoa_r+0x288>
 800b314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	9307      	str	r3, [sp, #28]
 800b31a:	e7d7      	b.n	800b2cc <_dtoa_r+0x254>
 800b31c:	3101      	adds	r1, #1
 800b31e:	0052      	lsls	r2, r2, #1
 800b320:	e7d8      	b.n	800b2d4 <_dtoa_r+0x25c>
 800b322:	bf00      	nop
 800b324:	f3af 8000 	nop.w
 800b328:	636f4361 	.word	0x636f4361
 800b32c:	3fd287a7 	.word	0x3fd287a7
 800b330:	8b60c8b3 	.word	0x8b60c8b3
 800b334:	3fc68a28 	.word	0x3fc68a28
 800b338:	509f79fb 	.word	0x509f79fb
 800b33c:	3fd34413 	.word	0x3fd34413
 800b340:	0800da99 	.word	0x0800da99
 800b344:	0800db5b 	.word	0x0800db5b
 800b348:	7ff00000 	.word	0x7ff00000
 800b34c:	0800da71 	.word	0x0800da71
 800b350:	3ff80000 	.word	0x3ff80000
 800b354:	0800dcb8 	.word	0x0800dcb8
 800b358:	0800dbb3 	.word	0x0800dbb3
 800b35c:	0800db57 	.word	0x0800db57
 800b360:	0800da70 	.word	0x0800da70
 800b364:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b368:	6018      	str	r0, [r3, #0]
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	2b0e      	cmp	r3, #14
 800b36e:	f200 80a4 	bhi.w	800b4ba <_dtoa_r+0x442>
 800b372:	2c00      	cmp	r4, #0
 800b374:	f000 80a1 	beq.w	800b4ba <_dtoa_r+0x442>
 800b378:	2f00      	cmp	r7, #0
 800b37a:	dd33      	ble.n	800b3e4 <_dtoa_r+0x36c>
 800b37c:	4bad      	ldr	r3, [pc, #692]	@ (800b634 <_dtoa_r+0x5bc>)
 800b37e:	f007 020f 	and.w	r2, r7, #15
 800b382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b386:	ed93 7b00 	vldr	d7, [r3]
 800b38a:	05f8      	lsls	r0, r7, #23
 800b38c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b390:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b394:	d516      	bpl.n	800b3c4 <_dtoa_r+0x34c>
 800b396:	4ba8      	ldr	r3, [pc, #672]	@ (800b638 <_dtoa_r+0x5c0>)
 800b398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b39c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3a0:	f7f5 fa5c 	bl	800085c <__aeabi_ddiv>
 800b3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3a8:	f004 040f 	and.w	r4, r4, #15
 800b3ac:	2603      	movs	r6, #3
 800b3ae:	4da2      	ldr	r5, [pc, #648]	@ (800b638 <_dtoa_r+0x5c0>)
 800b3b0:	b954      	cbnz	r4, 800b3c8 <_dtoa_r+0x350>
 800b3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ba:	f7f5 fa4f 	bl	800085c <__aeabi_ddiv>
 800b3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c2:	e028      	b.n	800b416 <_dtoa_r+0x39e>
 800b3c4:	2602      	movs	r6, #2
 800b3c6:	e7f2      	b.n	800b3ae <_dtoa_r+0x336>
 800b3c8:	07e1      	lsls	r1, r4, #31
 800b3ca:	d508      	bpl.n	800b3de <_dtoa_r+0x366>
 800b3cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3d4:	f7f5 f918 	bl	8000608 <__aeabi_dmul>
 800b3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3dc:	3601      	adds	r6, #1
 800b3de:	1064      	asrs	r4, r4, #1
 800b3e0:	3508      	adds	r5, #8
 800b3e2:	e7e5      	b.n	800b3b0 <_dtoa_r+0x338>
 800b3e4:	f000 80d2 	beq.w	800b58c <_dtoa_r+0x514>
 800b3e8:	427c      	negs	r4, r7
 800b3ea:	4b92      	ldr	r3, [pc, #584]	@ (800b634 <_dtoa_r+0x5bc>)
 800b3ec:	4d92      	ldr	r5, [pc, #584]	@ (800b638 <_dtoa_r+0x5c0>)
 800b3ee:	f004 020f 	and.w	r2, r4, #15
 800b3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3fe:	f7f5 f903 	bl	8000608 <__aeabi_dmul>
 800b402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b406:	1124      	asrs	r4, r4, #4
 800b408:	2300      	movs	r3, #0
 800b40a:	2602      	movs	r6, #2
 800b40c:	2c00      	cmp	r4, #0
 800b40e:	f040 80b2 	bne.w	800b576 <_dtoa_r+0x4fe>
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1d3      	bne.n	800b3be <_dtoa_r+0x346>
 800b416:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b418:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80b7 	beq.w	800b590 <_dtoa_r+0x518>
 800b422:	4b86      	ldr	r3, [pc, #536]	@ (800b63c <_dtoa_r+0x5c4>)
 800b424:	2200      	movs	r2, #0
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb5f 	bl	8000aec <__aeabi_dcmplt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f000 80ae 	beq.w	800b590 <_dtoa_r+0x518>
 800b434:	9b07      	ldr	r3, [sp, #28]
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 80aa 	beq.w	800b590 <_dtoa_r+0x518>
 800b43c:	9b00      	ldr	r3, [sp, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dd37      	ble.n	800b4b2 <_dtoa_r+0x43a>
 800b442:	1e7b      	subs	r3, r7, #1
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	4620      	mov	r0, r4
 800b448:	4b7d      	ldr	r3, [pc, #500]	@ (800b640 <_dtoa_r+0x5c8>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f5 f8db 	bl	8000608 <__aeabi_dmul>
 800b452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b456:	9c00      	ldr	r4, [sp, #0]
 800b458:	3601      	adds	r6, #1
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7f5 f86a 	bl	8000534 <__aeabi_i2d>
 800b460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b464:	f7f5 f8d0 	bl	8000608 <__aeabi_dmul>
 800b468:	4b76      	ldr	r3, [pc, #472]	@ (800b644 <_dtoa_r+0x5cc>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	f7f4 ff16 	bl	800029c <__adddf3>
 800b470:	4605      	mov	r5, r0
 800b472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b476:	2c00      	cmp	r4, #0
 800b478:	f040 808d 	bne.w	800b596 <_dtoa_r+0x51e>
 800b47c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b480:	4b71      	ldr	r3, [pc, #452]	@ (800b648 <_dtoa_r+0x5d0>)
 800b482:	2200      	movs	r2, #0
 800b484:	f7f4 ff08 	bl	8000298 <__aeabi_dsub>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b490:	462a      	mov	r2, r5
 800b492:	4633      	mov	r3, r6
 800b494:	f7f5 fb48 	bl	8000b28 <__aeabi_dcmpgt>
 800b498:	2800      	cmp	r0, #0
 800b49a:	f040 828b 	bne.w	800b9b4 <_dtoa_r+0x93c>
 800b49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4a8:	f7f5 fb20 	bl	8000aec <__aeabi_dcmplt>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f040 8128 	bne.w	800b702 <_dtoa_r+0x68a>
 800b4b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f2c0 815a 	blt.w	800b776 <_dtoa_r+0x6fe>
 800b4c2:	2f0e      	cmp	r7, #14
 800b4c4:	f300 8157 	bgt.w	800b776 <_dtoa_r+0x6fe>
 800b4c8:	4b5a      	ldr	r3, [pc, #360]	@ (800b634 <_dtoa_r+0x5bc>)
 800b4ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4ce:	ed93 7b00 	vldr	d7, [r3]
 800b4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	ed8d 7b00 	vstr	d7, [sp]
 800b4da:	da03      	bge.n	800b4e4 <_dtoa_r+0x46c>
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f340 8101 	ble.w	800b6e6 <_dtoa_r+0x66e>
 800b4e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4e8:	4656      	mov	r6, sl
 800b4ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f5 f9b3 	bl	800085c <__aeabi_ddiv>
 800b4f6:	f7f5 fb37 	bl	8000b68 <__aeabi_d2iz>
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	f7f5 f81a 	bl	8000534 <__aeabi_i2d>
 800b500:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b504:	f7f5 f880 	bl	8000608 <__aeabi_dmul>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b514:	f7f4 fec0 	bl	8000298 <__aeabi_dsub>
 800b518:	f806 4b01 	strb.w	r4, [r6], #1
 800b51c:	9d07      	ldr	r5, [sp, #28]
 800b51e:	eba6 040a 	sub.w	r4, r6, sl
 800b522:	42a5      	cmp	r5, r4
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	f040 8117 	bne.w	800b75a <_dtoa_r+0x6e2>
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b534:	4604      	mov	r4, r0
 800b536:	460d      	mov	r5, r1
 800b538:	f7f5 faf6 	bl	8000b28 <__aeabi_dcmpgt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f040 80f9 	bne.w	800b734 <_dtoa_r+0x6bc>
 800b542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b546:	4620      	mov	r0, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	f7f5 fac5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b54e:	b118      	cbz	r0, 800b558 <_dtoa_r+0x4e0>
 800b550:	f018 0f01 	tst.w	r8, #1
 800b554:	f040 80ee 	bne.w	800b734 <_dtoa_r+0x6bc>
 800b558:	4649      	mov	r1, r9
 800b55a:	4658      	mov	r0, fp
 800b55c:	f000 ff26 	bl	800c3ac <_Bfree>
 800b560:	2300      	movs	r3, #0
 800b562:	7033      	strb	r3, [r6, #0]
 800b564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b566:	3701      	adds	r7, #1
 800b568:	601f      	str	r7, [r3, #0]
 800b56a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 831d 	beq.w	800bbac <_dtoa_r+0xb34>
 800b572:	601e      	str	r6, [r3, #0]
 800b574:	e31a      	b.n	800bbac <_dtoa_r+0xb34>
 800b576:	07e2      	lsls	r2, r4, #31
 800b578:	d505      	bpl.n	800b586 <_dtoa_r+0x50e>
 800b57a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b57e:	f7f5 f843 	bl	8000608 <__aeabi_dmul>
 800b582:	3601      	adds	r6, #1
 800b584:	2301      	movs	r3, #1
 800b586:	1064      	asrs	r4, r4, #1
 800b588:	3508      	adds	r5, #8
 800b58a:	e73f      	b.n	800b40c <_dtoa_r+0x394>
 800b58c:	2602      	movs	r6, #2
 800b58e:	e742      	b.n	800b416 <_dtoa_r+0x39e>
 800b590:	9c07      	ldr	r4, [sp, #28]
 800b592:	9704      	str	r7, [sp, #16]
 800b594:	e761      	b.n	800b45a <_dtoa_r+0x3e2>
 800b596:	4b27      	ldr	r3, [pc, #156]	@ (800b634 <_dtoa_r+0x5bc>)
 800b598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b59a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b59e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5a2:	4454      	add	r4, sl
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d053      	beq.n	800b650 <_dtoa_r+0x5d8>
 800b5a8:	4928      	ldr	r1, [pc, #160]	@ (800b64c <_dtoa_r+0x5d4>)
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f7f5 f956 	bl	800085c <__aeabi_ddiv>
 800b5b0:	4633      	mov	r3, r6
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	f7f4 fe70 	bl	8000298 <__aeabi_dsub>
 800b5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5bc:	4656      	mov	r6, sl
 800b5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c2:	f7f5 fad1 	bl	8000b68 <__aeabi_d2iz>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	f7f4 ffb4 	bl	8000534 <__aeabi_i2d>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d4:	f7f4 fe60 	bl	8000298 <__aeabi_dsub>
 800b5d8:	3530      	adds	r5, #48	@ 0x30
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5e2:	f806 5b01 	strb.w	r5, [r6], #1
 800b5e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5ea:	f7f5 fa7f 	bl	8000aec <__aeabi_dcmplt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d171      	bne.n	800b6d6 <_dtoa_r+0x65e>
 800b5f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5f6:	4911      	ldr	r1, [pc, #68]	@ (800b63c <_dtoa_r+0x5c4>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f4 fe4d 	bl	8000298 <__aeabi_dsub>
 800b5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b602:	f7f5 fa73 	bl	8000aec <__aeabi_dcmplt>
 800b606:	2800      	cmp	r0, #0
 800b608:	f040 8095 	bne.w	800b736 <_dtoa_r+0x6be>
 800b60c:	42a6      	cmp	r6, r4
 800b60e:	f43f af50 	beq.w	800b4b2 <_dtoa_r+0x43a>
 800b612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b616:	4b0a      	ldr	r3, [pc, #40]	@ (800b640 <_dtoa_r+0x5c8>)
 800b618:	2200      	movs	r2, #0
 800b61a:	f7f4 fff5 	bl	8000608 <__aeabi_dmul>
 800b61e:	4b08      	ldr	r3, [pc, #32]	@ (800b640 <_dtoa_r+0x5c8>)
 800b620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b624:	2200      	movs	r2, #0
 800b626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b62a:	f7f4 ffed 	bl	8000608 <__aeabi_dmul>
 800b62e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b632:	e7c4      	b.n	800b5be <_dtoa_r+0x546>
 800b634:	0800dcb8 	.word	0x0800dcb8
 800b638:	0800dc90 	.word	0x0800dc90
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	40240000 	.word	0x40240000
 800b644:	401c0000 	.word	0x401c0000
 800b648:	40140000 	.word	0x40140000
 800b64c:	3fe00000 	.word	0x3fe00000
 800b650:	4631      	mov	r1, r6
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 ffd8 	bl	8000608 <__aeabi_dmul>
 800b658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b65c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b65e:	4656      	mov	r6, sl
 800b660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b664:	f7f5 fa80 	bl	8000b68 <__aeabi_d2iz>
 800b668:	4605      	mov	r5, r0
 800b66a:	f7f4 ff63 	bl	8000534 <__aeabi_i2d>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b676:	f7f4 fe0f 	bl	8000298 <__aeabi_dsub>
 800b67a:	3530      	adds	r5, #48	@ 0x30
 800b67c:	f806 5b01 	strb.w	r5, [r6], #1
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	42a6      	cmp	r6, r4
 800b686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b68a:	f04f 0200 	mov.w	r2, #0
 800b68e:	d124      	bne.n	800b6da <_dtoa_r+0x662>
 800b690:	4bac      	ldr	r3, [pc, #688]	@ (800b944 <_dtoa_r+0x8cc>)
 800b692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b696:	f7f4 fe01 	bl	800029c <__adddf3>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a2:	f7f5 fa41 	bl	8000b28 <__aeabi_dcmpgt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d145      	bne.n	800b736 <_dtoa_r+0x6be>
 800b6aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ae:	49a5      	ldr	r1, [pc, #660]	@ (800b944 <_dtoa_r+0x8cc>)
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f7f4 fdf1 	bl	8000298 <__aeabi_dsub>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6be:	f7f5 fa15 	bl	8000aec <__aeabi_dcmplt>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f43f aef5 	beq.w	800b4b2 <_dtoa_r+0x43a>
 800b6c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b6ca:	1e73      	subs	r3, r6, #1
 800b6cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6d2:	2b30      	cmp	r3, #48	@ 0x30
 800b6d4:	d0f8      	beq.n	800b6c8 <_dtoa_r+0x650>
 800b6d6:	9f04      	ldr	r7, [sp, #16]
 800b6d8:	e73e      	b.n	800b558 <_dtoa_r+0x4e0>
 800b6da:	4b9b      	ldr	r3, [pc, #620]	@ (800b948 <_dtoa_r+0x8d0>)
 800b6dc:	f7f4 ff94 	bl	8000608 <__aeabi_dmul>
 800b6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e4:	e7bc      	b.n	800b660 <_dtoa_r+0x5e8>
 800b6e6:	d10c      	bne.n	800b702 <_dtoa_r+0x68a>
 800b6e8:	4b98      	ldr	r3, [pc, #608]	@ (800b94c <_dtoa_r+0x8d4>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6f8:	f7f5 fa0c 	bl	8000b14 <__aeabi_dcmpge>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f000 8157 	beq.w	800b9b0 <_dtoa_r+0x938>
 800b702:	2400      	movs	r4, #0
 800b704:	4625      	mov	r5, r4
 800b706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b708:	43db      	mvns	r3, r3
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	4656      	mov	r6, sl
 800b70e:	2700      	movs	r7, #0
 800b710:	4621      	mov	r1, r4
 800b712:	4658      	mov	r0, fp
 800b714:	f000 fe4a 	bl	800c3ac <_Bfree>
 800b718:	2d00      	cmp	r5, #0
 800b71a:	d0dc      	beq.n	800b6d6 <_dtoa_r+0x65e>
 800b71c:	b12f      	cbz	r7, 800b72a <_dtoa_r+0x6b2>
 800b71e:	42af      	cmp	r7, r5
 800b720:	d003      	beq.n	800b72a <_dtoa_r+0x6b2>
 800b722:	4639      	mov	r1, r7
 800b724:	4658      	mov	r0, fp
 800b726:	f000 fe41 	bl	800c3ac <_Bfree>
 800b72a:	4629      	mov	r1, r5
 800b72c:	4658      	mov	r0, fp
 800b72e:	f000 fe3d 	bl	800c3ac <_Bfree>
 800b732:	e7d0      	b.n	800b6d6 <_dtoa_r+0x65e>
 800b734:	9704      	str	r7, [sp, #16]
 800b736:	4633      	mov	r3, r6
 800b738:	461e      	mov	r6, r3
 800b73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b73e:	2a39      	cmp	r2, #57	@ 0x39
 800b740:	d107      	bne.n	800b752 <_dtoa_r+0x6da>
 800b742:	459a      	cmp	sl, r3
 800b744:	d1f8      	bne.n	800b738 <_dtoa_r+0x6c0>
 800b746:	9a04      	ldr	r2, [sp, #16]
 800b748:	3201      	adds	r2, #1
 800b74a:	9204      	str	r2, [sp, #16]
 800b74c:	2230      	movs	r2, #48	@ 0x30
 800b74e:	f88a 2000 	strb.w	r2, [sl]
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	3201      	adds	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e7bd      	b.n	800b6d6 <_dtoa_r+0x65e>
 800b75a:	4b7b      	ldr	r3, [pc, #492]	@ (800b948 <_dtoa_r+0x8d0>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7f4 ff53 	bl	8000608 <__aeabi_dmul>
 800b762:	2200      	movs	r2, #0
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	460d      	mov	r5, r1
 800b76a:	f7f5 f9b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b76e:	2800      	cmp	r0, #0
 800b770:	f43f aebb 	beq.w	800b4ea <_dtoa_r+0x472>
 800b774:	e6f0      	b.n	800b558 <_dtoa_r+0x4e0>
 800b776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b778:	2a00      	cmp	r2, #0
 800b77a:	f000 80db 	beq.w	800b934 <_dtoa_r+0x8bc>
 800b77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b780:	2a01      	cmp	r2, #1
 800b782:	f300 80bf 	bgt.w	800b904 <_dtoa_r+0x88c>
 800b786:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b788:	2a00      	cmp	r2, #0
 800b78a:	f000 80b7 	beq.w	800b8fc <_dtoa_r+0x884>
 800b78e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b792:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b794:	4646      	mov	r6, r8
 800b796:	9a08      	ldr	r2, [sp, #32]
 800b798:	2101      	movs	r1, #1
 800b79a:	441a      	add	r2, r3
 800b79c:	4658      	mov	r0, fp
 800b79e:	4498      	add	r8, r3
 800b7a0:	9208      	str	r2, [sp, #32]
 800b7a2:	f000 ff01 	bl	800c5a8 <__i2b>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	b15e      	cbz	r6, 800b7c2 <_dtoa_r+0x74a>
 800b7aa:	9b08      	ldr	r3, [sp, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd08      	ble.n	800b7c2 <_dtoa_r+0x74a>
 800b7b0:	42b3      	cmp	r3, r6
 800b7b2:	9a08      	ldr	r2, [sp, #32]
 800b7b4:	bfa8      	it	ge
 800b7b6:	4633      	movge	r3, r6
 800b7b8:	eba8 0803 	sub.w	r8, r8, r3
 800b7bc:	1af6      	subs	r6, r6, r3
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	9308      	str	r3, [sp, #32]
 800b7c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7c4:	b1f3      	cbz	r3, 800b804 <_dtoa_r+0x78c>
 800b7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 80b7 	beq.w	800b93c <_dtoa_r+0x8c4>
 800b7ce:	b18c      	cbz	r4, 800b7f4 <_dtoa_r+0x77c>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4658      	mov	r0, fp
 800b7d6:	f000 ffa7 	bl	800c728 <__pow5mult>
 800b7da:	464a      	mov	r2, r9
 800b7dc:	4601      	mov	r1, r0
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4658      	mov	r0, fp
 800b7e2:	f000 fef7 	bl	800c5d4 <__multiply>
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	9004      	str	r0, [sp, #16]
 800b7ea:	4658      	mov	r0, fp
 800b7ec:	f000 fdde 	bl	800c3ac <_Bfree>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	4699      	mov	r9, r3
 800b7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f6:	1b1a      	subs	r2, r3, r4
 800b7f8:	d004      	beq.n	800b804 <_dtoa_r+0x78c>
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4658      	mov	r0, fp
 800b7fe:	f000 ff93 	bl	800c728 <__pow5mult>
 800b802:	4681      	mov	r9, r0
 800b804:	2101      	movs	r1, #1
 800b806:	4658      	mov	r0, fp
 800b808:	f000 fece 	bl	800c5a8 <__i2b>
 800b80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b80e:	4604      	mov	r4, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 81cf 	beq.w	800bbb4 <_dtoa_r+0xb3c>
 800b816:	461a      	mov	r2, r3
 800b818:	4601      	mov	r1, r0
 800b81a:	4658      	mov	r0, fp
 800b81c:	f000 ff84 	bl	800c728 <__pow5mult>
 800b820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b822:	2b01      	cmp	r3, #1
 800b824:	4604      	mov	r4, r0
 800b826:	f300 8095 	bgt.w	800b954 <_dtoa_r+0x8dc>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f040 8087 	bne.w	800b940 <_dtoa_r+0x8c8>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f040 8089 	bne.w	800b950 <_dtoa_r+0x8d8>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b844:	0d1b      	lsrs	r3, r3, #20
 800b846:	051b      	lsls	r3, r3, #20
 800b848:	b12b      	cbz	r3, 800b856 <_dtoa_r+0x7de>
 800b84a:	9b08      	ldr	r3, [sp, #32]
 800b84c:	3301      	adds	r3, #1
 800b84e:	9308      	str	r3, [sp, #32]
 800b850:	f108 0801 	add.w	r8, r8, #1
 800b854:	2301      	movs	r3, #1
 800b856:	930a      	str	r3, [sp, #40]	@ 0x28
 800b858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 81b0 	beq.w	800bbc0 <_dtoa_r+0xb48>
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b866:	6918      	ldr	r0, [r3, #16]
 800b868:	f000 fe52 	bl	800c510 <__hi0bits>
 800b86c:	f1c0 0020 	rsb	r0, r0, #32
 800b870:	9b08      	ldr	r3, [sp, #32]
 800b872:	4418      	add	r0, r3
 800b874:	f010 001f 	ands.w	r0, r0, #31
 800b878:	d077      	beq.n	800b96a <_dtoa_r+0x8f2>
 800b87a:	f1c0 0320 	rsb	r3, r0, #32
 800b87e:	2b04      	cmp	r3, #4
 800b880:	dd6b      	ble.n	800b95a <_dtoa_r+0x8e2>
 800b882:	9b08      	ldr	r3, [sp, #32]
 800b884:	f1c0 001c 	rsb	r0, r0, #28
 800b888:	4403      	add	r3, r0
 800b88a:	4480      	add	r8, r0
 800b88c:	4406      	add	r6, r0
 800b88e:	9308      	str	r3, [sp, #32]
 800b890:	f1b8 0f00 	cmp.w	r8, #0
 800b894:	dd05      	ble.n	800b8a2 <_dtoa_r+0x82a>
 800b896:	4649      	mov	r1, r9
 800b898:	4642      	mov	r2, r8
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 ff9e 	bl	800c7dc <__lshift>
 800b8a0:	4681      	mov	r9, r0
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dd05      	ble.n	800b8b4 <_dtoa_r+0x83c>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 ff95 	bl	800c7dc <__lshift>
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d059      	beq.n	800b96e <_dtoa_r+0x8f6>
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f000 fff9 	bl	800c8b4 <__mcmp>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	da53      	bge.n	800b96e <_dtoa_r+0x8f6>
 800b8c6:	1e7b      	subs	r3, r7, #1
 800b8c8:	9304      	str	r3, [sp, #16]
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	220a      	movs	r2, #10
 800b8d0:	4658      	mov	r0, fp
 800b8d2:	f000 fd8d 	bl	800c3f0 <__multadd>
 800b8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d8:	4681      	mov	r9, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 8172 	beq.w	800bbc4 <_dtoa_r+0xb4c>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f000 fd82 	bl	800c3f0 <__multadd>
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	dc67      	bgt.n	800b9c4 <_dtoa_r+0x94c>
 800b8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	dc41      	bgt.n	800b97e <_dtoa_r+0x906>
 800b8fa:	e063      	b.n	800b9c4 <_dtoa_r+0x94c>
 800b8fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b902:	e746      	b.n	800b792 <_dtoa_r+0x71a>
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	1e5c      	subs	r4, r3, #1
 800b908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	bfbf      	itttt	lt
 800b90e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b910:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b912:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b914:	1ae3      	sublt	r3, r4, r3
 800b916:	bfb4      	ite	lt
 800b918:	18d2      	addlt	r2, r2, r3
 800b91a:	1b1c      	subge	r4, r3, r4
 800b91c:	9b07      	ldr	r3, [sp, #28]
 800b91e:	bfbc      	itt	lt
 800b920:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b922:	2400      	movlt	r4, #0
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfb5      	itete	lt
 800b928:	eba8 0603 	sublt.w	r6, r8, r3
 800b92c:	9b07      	ldrge	r3, [sp, #28]
 800b92e:	2300      	movlt	r3, #0
 800b930:	4646      	movge	r6, r8
 800b932:	e730      	b.n	800b796 <_dtoa_r+0x71e>
 800b934:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b938:	4646      	mov	r6, r8
 800b93a:	e735      	b.n	800b7a8 <_dtoa_r+0x730>
 800b93c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b93e:	e75c      	b.n	800b7fa <_dtoa_r+0x782>
 800b940:	2300      	movs	r3, #0
 800b942:	e788      	b.n	800b856 <_dtoa_r+0x7de>
 800b944:	3fe00000 	.word	0x3fe00000
 800b948:	40240000 	.word	0x40240000
 800b94c:	40140000 	.word	0x40140000
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	e780      	b.n	800b856 <_dtoa_r+0x7de>
 800b954:	2300      	movs	r3, #0
 800b956:	930a      	str	r3, [sp, #40]	@ 0x28
 800b958:	e782      	b.n	800b860 <_dtoa_r+0x7e8>
 800b95a:	d099      	beq.n	800b890 <_dtoa_r+0x818>
 800b95c:	9a08      	ldr	r2, [sp, #32]
 800b95e:	331c      	adds	r3, #28
 800b960:	441a      	add	r2, r3
 800b962:	4498      	add	r8, r3
 800b964:	441e      	add	r6, r3
 800b966:	9208      	str	r2, [sp, #32]
 800b968:	e792      	b.n	800b890 <_dtoa_r+0x818>
 800b96a:	4603      	mov	r3, r0
 800b96c:	e7f6      	b.n	800b95c <_dtoa_r+0x8e4>
 800b96e:	9b07      	ldr	r3, [sp, #28]
 800b970:	9704      	str	r7, [sp, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	dc20      	bgt.n	800b9b8 <_dtoa_r+0x940>
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	dd1e      	ble.n	800b9bc <_dtoa_r+0x944>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f47f aec0 	bne.w	800b706 <_dtoa_r+0x68e>
 800b986:	4621      	mov	r1, r4
 800b988:	2205      	movs	r2, #5
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 fd30 	bl	800c3f0 <__multadd>
 800b990:	4601      	mov	r1, r0
 800b992:	4604      	mov	r4, r0
 800b994:	4648      	mov	r0, r9
 800b996:	f000 ff8d 	bl	800c8b4 <__mcmp>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f77f aeb3 	ble.w	800b706 <_dtoa_r+0x68e>
 800b9a0:	4656      	mov	r6, sl
 800b9a2:	2331      	movs	r3, #49	@ 0x31
 800b9a4:	f806 3b01 	strb.w	r3, [r6], #1
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	e6ae      	b.n	800b70e <_dtoa_r+0x696>
 800b9b0:	9c07      	ldr	r4, [sp, #28]
 800b9b2:	9704      	str	r7, [sp, #16]
 800b9b4:	4625      	mov	r5, r4
 800b9b6:	e7f3      	b.n	800b9a0 <_dtoa_r+0x928>
 800b9b8:	9b07      	ldr	r3, [sp, #28]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 8104 	beq.w	800bbcc <_dtoa_r+0xb54>
 800b9c4:	2e00      	cmp	r6, #0
 800b9c6:	dd05      	ble.n	800b9d4 <_dtoa_r+0x95c>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	4658      	mov	r0, fp
 800b9ce:	f000 ff05 	bl	800c7dc <__lshift>
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d05a      	beq.n	800ba90 <_dtoa_r+0xa18>
 800b9da:	6869      	ldr	r1, [r5, #4]
 800b9dc:	4658      	mov	r0, fp
 800b9de:	f000 fca5 	bl	800c32c <_Balloc>
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	b928      	cbnz	r0, 800b9f2 <_dtoa_r+0x97a>
 800b9e6:	4b84      	ldr	r3, [pc, #528]	@ (800bbf8 <_dtoa_r+0xb80>)
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9ee:	f7ff bb5a 	b.w	800b0a6 <_dtoa_r+0x2e>
 800b9f2:	692a      	ldr	r2, [r5, #16]
 800b9f4:	3202      	adds	r2, #2
 800b9f6:	0092      	lsls	r2, r2, #2
 800b9f8:	f105 010c 	add.w	r1, r5, #12
 800b9fc:	300c      	adds	r0, #12
 800b9fe:	f7ff fa78 	bl	800aef2 <memcpy>
 800ba02:	2201      	movs	r2, #1
 800ba04:	4631      	mov	r1, r6
 800ba06:	4658      	mov	r0, fp
 800ba08:	f000 fee8 	bl	800c7dc <__lshift>
 800ba0c:	f10a 0301 	add.w	r3, sl, #1
 800ba10:	9307      	str	r3, [sp, #28]
 800ba12:	9b00      	ldr	r3, [sp, #0]
 800ba14:	4453      	add	r3, sl
 800ba16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	462f      	mov	r7, r5
 800ba20:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba22:	4605      	mov	r5, r0
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	4621      	mov	r1, r4
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4648      	mov	r0, r9
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f7ff fa9b 	bl	800af68 <quorem>
 800ba32:	4639      	mov	r1, r7
 800ba34:	9002      	str	r0, [sp, #8]
 800ba36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba3a:	4648      	mov	r0, r9
 800ba3c:	f000 ff3a 	bl	800c8b4 <__mcmp>
 800ba40:	462a      	mov	r2, r5
 800ba42:	9008      	str	r0, [sp, #32]
 800ba44:	4621      	mov	r1, r4
 800ba46:	4658      	mov	r0, fp
 800ba48:	f000 ff50 	bl	800c8ec <__mdiff>
 800ba4c:	68c2      	ldr	r2, [r0, #12]
 800ba4e:	4606      	mov	r6, r0
 800ba50:	bb02      	cbnz	r2, 800ba94 <_dtoa_r+0xa1c>
 800ba52:	4601      	mov	r1, r0
 800ba54:	4648      	mov	r0, r9
 800ba56:	f000 ff2d 	bl	800c8b4 <__mcmp>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	4658      	mov	r0, fp
 800ba60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba62:	f000 fca3 	bl	800c3ac <_Bfree>
 800ba66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba6a:	9e07      	ldr	r6, [sp, #28]
 800ba6c:	ea43 0102 	orr.w	r1, r3, r2
 800ba70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba72:	4319      	orrs	r1, r3
 800ba74:	d110      	bne.n	800ba98 <_dtoa_r+0xa20>
 800ba76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba7a:	d029      	beq.n	800bad0 <_dtoa_r+0xa58>
 800ba7c:	9b08      	ldr	r3, [sp, #32]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd02      	ble.n	800ba88 <_dtoa_r+0xa10>
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba88:	9b00      	ldr	r3, [sp, #0]
 800ba8a:	f883 8000 	strb.w	r8, [r3]
 800ba8e:	e63f      	b.n	800b710 <_dtoa_r+0x698>
 800ba90:	4628      	mov	r0, r5
 800ba92:	e7bb      	b.n	800ba0c <_dtoa_r+0x994>
 800ba94:	2201      	movs	r2, #1
 800ba96:	e7e1      	b.n	800ba5c <_dtoa_r+0x9e4>
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	db04      	blt.n	800baa8 <_dtoa_r+0xa30>
 800ba9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baa0:	430b      	orrs	r3, r1
 800baa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800baa4:	430b      	orrs	r3, r1
 800baa6:	d120      	bne.n	800baea <_dtoa_r+0xa72>
 800baa8:	2a00      	cmp	r2, #0
 800baaa:	dded      	ble.n	800ba88 <_dtoa_r+0xa10>
 800baac:	4649      	mov	r1, r9
 800baae:	2201      	movs	r2, #1
 800bab0:	4658      	mov	r0, fp
 800bab2:	f000 fe93 	bl	800c7dc <__lshift>
 800bab6:	4621      	mov	r1, r4
 800bab8:	4681      	mov	r9, r0
 800baba:	f000 fefb 	bl	800c8b4 <__mcmp>
 800babe:	2800      	cmp	r0, #0
 800bac0:	dc03      	bgt.n	800baca <_dtoa_r+0xa52>
 800bac2:	d1e1      	bne.n	800ba88 <_dtoa_r+0xa10>
 800bac4:	f018 0f01 	tst.w	r8, #1
 800bac8:	d0de      	beq.n	800ba88 <_dtoa_r+0xa10>
 800baca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bace:	d1d8      	bne.n	800ba82 <_dtoa_r+0xa0a>
 800bad0:	9a00      	ldr	r2, [sp, #0]
 800bad2:	2339      	movs	r3, #57	@ 0x39
 800bad4:	7013      	strb	r3, [r2, #0]
 800bad6:	4633      	mov	r3, r6
 800bad8:	461e      	mov	r6, r3
 800bada:	3b01      	subs	r3, #1
 800badc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bae0:	2a39      	cmp	r2, #57	@ 0x39
 800bae2:	d052      	beq.n	800bb8a <_dtoa_r+0xb12>
 800bae4:	3201      	adds	r2, #1
 800bae6:	701a      	strb	r2, [r3, #0]
 800bae8:	e612      	b.n	800b710 <_dtoa_r+0x698>
 800baea:	2a00      	cmp	r2, #0
 800baec:	dd07      	ble.n	800bafe <_dtoa_r+0xa86>
 800baee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800baf2:	d0ed      	beq.n	800bad0 <_dtoa_r+0xa58>
 800baf4:	9a00      	ldr	r2, [sp, #0]
 800baf6:	f108 0301 	add.w	r3, r8, #1
 800bafa:	7013      	strb	r3, [r2, #0]
 800bafc:	e608      	b.n	800b710 <_dtoa_r+0x698>
 800bafe:	9b07      	ldr	r3, [sp, #28]
 800bb00:	9a07      	ldr	r2, [sp, #28]
 800bb02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d028      	beq.n	800bb5e <_dtoa_r+0xae6>
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4658      	mov	r0, fp
 800bb14:	f000 fc6c 	bl	800c3f0 <__multadd>
 800bb18:	42af      	cmp	r7, r5
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	f04f 0300 	mov.w	r3, #0
 800bb20:	f04f 020a 	mov.w	r2, #10
 800bb24:	4639      	mov	r1, r7
 800bb26:	4658      	mov	r0, fp
 800bb28:	d107      	bne.n	800bb3a <_dtoa_r+0xac2>
 800bb2a:	f000 fc61 	bl	800c3f0 <__multadd>
 800bb2e:	4607      	mov	r7, r0
 800bb30:	4605      	mov	r5, r0
 800bb32:	9b07      	ldr	r3, [sp, #28]
 800bb34:	3301      	adds	r3, #1
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	e774      	b.n	800ba24 <_dtoa_r+0x9ac>
 800bb3a:	f000 fc59 	bl	800c3f0 <__multadd>
 800bb3e:	4629      	mov	r1, r5
 800bb40:	4607      	mov	r7, r0
 800bb42:	2300      	movs	r3, #0
 800bb44:	220a      	movs	r2, #10
 800bb46:	4658      	mov	r0, fp
 800bb48:	f000 fc52 	bl	800c3f0 <__multadd>
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	e7f0      	b.n	800bb32 <_dtoa_r+0xaba>
 800bb50:	9b00      	ldr	r3, [sp, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bfcc      	ite	gt
 800bb56:	461e      	movgt	r6, r3
 800bb58:	2601      	movle	r6, #1
 800bb5a:	4456      	add	r6, sl
 800bb5c:	2700      	movs	r7, #0
 800bb5e:	4649      	mov	r1, r9
 800bb60:	2201      	movs	r2, #1
 800bb62:	4658      	mov	r0, fp
 800bb64:	f000 fe3a 	bl	800c7dc <__lshift>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4681      	mov	r9, r0
 800bb6c:	f000 fea2 	bl	800c8b4 <__mcmp>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dcb0      	bgt.n	800bad6 <_dtoa_r+0xa5e>
 800bb74:	d102      	bne.n	800bb7c <_dtoa_r+0xb04>
 800bb76:	f018 0f01 	tst.w	r8, #1
 800bb7a:	d1ac      	bne.n	800bad6 <_dtoa_r+0xa5e>
 800bb7c:	4633      	mov	r3, r6
 800bb7e:	461e      	mov	r6, r3
 800bb80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb84:	2a30      	cmp	r2, #48	@ 0x30
 800bb86:	d0fa      	beq.n	800bb7e <_dtoa_r+0xb06>
 800bb88:	e5c2      	b.n	800b710 <_dtoa_r+0x698>
 800bb8a:	459a      	cmp	sl, r3
 800bb8c:	d1a4      	bne.n	800bad8 <_dtoa_r+0xa60>
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	3301      	adds	r3, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	2331      	movs	r3, #49	@ 0x31
 800bb96:	f88a 3000 	strb.w	r3, [sl]
 800bb9a:	e5b9      	b.n	800b710 <_dtoa_r+0x698>
 800bb9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bbfc <_dtoa_r+0xb84>
 800bba2:	b11b      	cbz	r3, 800bbac <_dtoa_r+0xb34>
 800bba4:	f10a 0308 	add.w	r3, sl, #8
 800bba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	4650      	mov	r0, sl
 800bbae:	b019      	add	sp, #100	@ 0x64
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	f77f ae37 	ble.w	800b82a <_dtoa_r+0x7b2>
 800bbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	e655      	b.n	800b870 <_dtoa_r+0x7f8>
 800bbc4:	9b00      	ldr	r3, [sp, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f77f aed6 	ble.w	800b978 <_dtoa_r+0x900>
 800bbcc:	4656      	mov	r6, sl
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4648      	mov	r0, r9
 800bbd2:	f7ff f9c9 	bl	800af68 <quorem>
 800bbd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbda:	f806 8b01 	strb.w	r8, [r6], #1
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	eba6 020a 	sub.w	r2, r6, sl
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	ddb3      	ble.n	800bb50 <_dtoa_r+0xad8>
 800bbe8:	4649      	mov	r1, r9
 800bbea:	2300      	movs	r3, #0
 800bbec:	220a      	movs	r2, #10
 800bbee:	4658      	mov	r0, fp
 800bbf0:	f000 fbfe 	bl	800c3f0 <__multadd>
 800bbf4:	4681      	mov	r9, r0
 800bbf6:	e7ea      	b.n	800bbce <_dtoa_r+0xb56>
 800bbf8:	0800dbb3 	.word	0x0800dbb3
 800bbfc:	0800db4e 	.word	0x0800db4e

0800bc00 <_free_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4605      	mov	r5, r0
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d041      	beq.n	800bc8c <_free_r+0x8c>
 800bc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0c:	1f0c      	subs	r4, r1, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bfb8      	it	lt
 800bc12:	18e4      	addlt	r4, r4, r3
 800bc14:	f7fd f944 	bl	8008ea0 <__malloc_lock>
 800bc18:	4a1d      	ldr	r2, [pc, #116]	@ (800bc90 <_free_r+0x90>)
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	b933      	cbnz	r3, 800bc2c <_free_r+0x2c>
 800bc1e:	6063      	str	r3, [r4, #4]
 800bc20:	6014      	str	r4, [r2, #0]
 800bc22:	4628      	mov	r0, r5
 800bc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc28:	f7fd b940 	b.w	8008eac <__malloc_unlock>
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d908      	bls.n	800bc42 <_free_r+0x42>
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	1821      	adds	r1, r4, r0
 800bc34:	428b      	cmp	r3, r1
 800bc36:	bf01      	itttt	eq
 800bc38:	6819      	ldreq	r1, [r3, #0]
 800bc3a:	685b      	ldreq	r3, [r3, #4]
 800bc3c:	1809      	addeq	r1, r1, r0
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	e7ed      	b.n	800bc1e <_free_r+0x1e>
 800bc42:	461a      	mov	r2, r3
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	b10b      	cbz	r3, 800bc4c <_free_r+0x4c>
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d9fa      	bls.n	800bc42 <_free_r+0x42>
 800bc4c:	6811      	ldr	r1, [r2, #0]
 800bc4e:	1850      	adds	r0, r2, r1
 800bc50:	42a0      	cmp	r0, r4
 800bc52:	d10b      	bne.n	800bc6c <_free_r+0x6c>
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	4401      	add	r1, r0
 800bc58:	1850      	adds	r0, r2, r1
 800bc5a:	4283      	cmp	r3, r0
 800bc5c:	6011      	str	r1, [r2, #0]
 800bc5e:	d1e0      	bne.n	800bc22 <_free_r+0x22>
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	6053      	str	r3, [r2, #4]
 800bc66:	4408      	add	r0, r1
 800bc68:	6010      	str	r0, [r2, #0]
 800bc6a:	e7da      	b.n	800bc22 <_free_r+0x22>
 800bc6c:	d902      	bls.n	800bc74 <_free_r+0x74>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	602b      	str	r3, [r5, #0]
 800bc72:	e7d6      	b.n	800bc22 <_free_r+0x22>
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	1821      	adds	r1, r4, r0
 800bc78:	428b      	cmp	r3, r1
 800bc7a:	bf04      	itt	eq
 800bc7c:	6819      	ldreq	r1, [r3, #0]
 800bc7e:	685b      	ldreq	r3, [r3, #4]
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	bf04      	itt	eq
 800bc84:	1809      	addeq	r1, r1, r0
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	6054      	str	r4, [r2, #4]
 800bc8a:	e7ca      	b.n	800bc22 <_free_r+0x22>
 800bc8c:	bd38      	pop	{r3, r4, r5, pc}
 800bc8e:	bf00      	nop
 800bc90:	200006c4 	.word	0x200006c4

0800bc94 <rshift>:
 800bc94:	6903      	ldr	r3, [r0, #16]
 800bc96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bca2:	f100 0414 	add.w	r4, r0, #20
 800bca6:	dd45      	ble.n	800bd34 <rshift+0xa0>
 800bca8:	f011 011f 	ands.w	r1, r1, #31
 800bcac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcb4:	d10c      	bne.n	800bcd0 <rshift+0x3c>
 800bcb6:	f100 0710 	add.w	r7, r0, #16
 800bcba:	4629      	mov	r1, r5
 800bcbc:	42b1      	cmp	r1, r6
 800bcbe:	d334      	bcc.n	800bd2a <rshift+0x96>
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	1eea      	subs	r2, r5, #3
 800bcc6:	4296      	cmp	r6, r2
 800bcc8:	bf38      	it	cc
 800bcca:	2300      	movcc	r3, #0
 800bccc:	4423      	add	r3, r4
 800bcce:	e015      	b.n	800bcfc <rshift+0x68>
 800bcd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcd4:	f1c1 0820 	rsb	r8, r1, #32
 800bcd8:	40cf      	lsrs	r7, r1
 800bcda:	f105 0e04 	add.w	lr, r5, #4
 800bcde:	46a1      	mov	r9, r4
 800bce0:	4576      	cmp	r6, lr
 800bce2:	46f4      	mov	ip, lr
 800bce4:	d815      	bhi.n	800bd12 <rshift+0x7e>
 800bce6:	1a9a      	subs	r2, r3, r2
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	3a04      	subs	r2, #4
 800bcec:	3501      	adds	r5, #1
 800bcee:	42ae      	cmp	r6, r5
 800bcf0:	bf38      	it	cc
 800bcf2:	2200      	movcc	r2, #0
 800bcf4:	18a3      	adds	r3, r4, r2
 800bcf6:	50a7      	str	r7, [r4, r2]
 800bcf8:	b107      	cbz	r7, 800bcfc <rshift+0x68>
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	1b1a      	subs	r2, r3, r4
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd04:	bf08      	it	eq
 800bd06:	2300      	moveq	r3, #0
 800bd08:	6102      	str	r2, [r0, #16]
 800bd0a:	bf08      	it	eq
 800bd0c:	6143      	streq	r3, [r0, #20]
 800bd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd12:	f8dc c000 	ldr.w	ip, [ip]
 800bd16:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd1a:	ea4c 0707 	orr.w	r7, ip, r7
 800bd1e:	f849 7b04 	str.w	r7, [r9], #4
 800bd22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd26:	40cf      	lsrs	r7, r1
 800bd28:	e7da      	b.n	800bce0 <rshift+0x4c>
 800bd2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd32:	e7c3      	b.n	800bcbc <rshift+0x28>
 800bd34:	4623      	mov	r3, r4
 800bd36:	e7e1      	b.n	800bcfc <rshift+0x68>

0800bd38 <__hexdig_fun>:
 800bd38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d802      	bhi.n	800bd46 <__hexdig_fun+0xe>
 800bd40:	3820      	subs	r0, #32
 800bd42:	b2c0      	uxtb	r0, r0
 800bd44:	4770      	bx	lr
 800bd46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d801      	bhi.n	800bd52 <__hexdig_fun+0x1a>
 800bd4e:	3847      	subs	r0, #71	@ 0x47
 800bd50:	e7f7      	b.n	800bd42 <__hexdig_fun+0xa>
 800bd52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d801      	bhi.n	800bd5e <__hexdig_fun+0x26>
 800bd5a:	3827      	subs	r0, #39	@ 0x27
 800bd5c:	e7f1      	b.n	800bd42 <__hexdig_fun+0xa>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	4770      	bx	lr
	...

0800bd64 <__gethex>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	468a      	mov	sl, r1
 800bd6c:	9302      	str	r3, [sp, #8]
 800bd6e:	680b      	ldr	r3, [r1, #0]
 800bd70:	9001      	str	r0, [sp, #4]
 800bd72:	4690      	mov	r8, r2
 800bd74:	1c9c      	adds	r4, r3, #2
 800bd76:	46a1      	mov	r9, r4
 800bd78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bd7c:	2830      	cmp	r0, #48	@ 0x30
 800bd7e:	d0fa      	beq.n	800bd76 <__gethex+0x12>
 800bd80:	eba9 0303 	sub.w	r3, r9, r3
 800bd84:	f1a3 0b02 	sub.w	fp, r3, #2
 800bd88:	f7ff ffd6 	bl	800bd38 <__hexdig_fun>
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d168      	bne.n	800be64 <__gethex+0x100>
 800bd92:	49a0      	ldr	r1, [pc, #640]	@ (800c014 <__gethex+0x2b0>)
 800bd94:	2201      	movs	r2, #1
 800bd96:	4648      	mov	r0, r9
 800bd98:	f7fe ffb5 	bl	800ad06 <strncmp>
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d167      	bne.n	800be72 <__gethex+0x10e>
 800bda2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bda6:	4626      	mov	r6, r4
 800bda8:	f7ff ffc6 	bl	800bd38 <__hexdig_fun>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d062      	beq.n	800be76 <__gethex+0x112>
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	7818      	ldrb	r0, [r3, #0]
 800bdb4:	2830      	cmp	r0, #48	@ 0x30
 800bdb6:	4699      	mov	r9, r3
 800bdb8:	f103 0301 	add.w	r3, r3, #1
 800bdbc:	d0f9      	beq.n	800bdb2 <__gethex+0x4e>
 800bdbe:	f7ff ffbb 	bl	800bd38 <__hexdig_fun>
 800bdc2:	fab0 f580 	clz	r5, r0
 800bdc6:	096d      	lsrs	r5, r5, #5
 800bdc8:	f04f 0b01 	mov.w	fp, #1
 800bdcc:	464a      	mov	r2, r9
 800bdce:	4616      	mov	r6, r2
 800bdd0:	3201      	adds	r2, #1
 800bdd2:	7830      	ldrb	r0, [r6, #0]
 800bdd4:	f7ff ffb0 	bl	800bd38 <__hexdig_fun>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d1f8      	bne.n	800bdce <__gethex+0x6a>
 800bddc:	498d      	ldr	r1, [pc, #564]	@ (800c014 <__gethex+0x2b0>)
 800bdde:	2201      	movs	r2, #1
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7fe ff90 	bl	800ad06 <strncmp>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d13f      	bne.n	800be6a <__gethex+0x106>
 800bdea:	b944      	cbnz	r4, 800bdfe <__gethex+0x9a>
 800bdec:	1c74      	adds	r4, r6, #1
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	3201      	adds	r2, #1
 800bdf4:	7830      	ldrb	r0, [r6, #0]
 800bdf6:	f7ff ff9f 	bl	800bd38 <__hexdig_fun>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d1f8      	bne.n	800bdf0 <__gethex+0x8c>
 800bdfe:	1ba4      	subs	r4, r4, r6
 800be00:	00a7      	lsls	r7, r4, #2
 800be02:	7833      	ldrb	r3, [r6, #0]
 800be04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be08:	2b50      	cmp	r3, #80	@ 0x50
 800be0a:	d13e      	bne.n	800be8a <__gethex+0x126>
 800be0c:	7873      	ldrb	r3, [r6, #1]
 800be0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800be10:	d033      	beq.n	800be7a <__gethex+0x116>
 800be12:	2b2d      	cmp	r3, #45	@ 0x2d
 800be14:	d034      	beq.n	800be80 <__gethex+0x11c>
 800be16:	1c71      	adds	r1, r6, #1
 800be18:	2400      	movs	r4, #0
 800be1a:	7808      	ldrb	r0, [r1, #0]
 800be1c:	f7ff ff8c 	bl	800bd38 <__hexdig_fun>
 800be20:	1e43      	subs	r3, r0, #1
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b18      	cmp	r3, #24
 800be26:	d830      	bhi.n	800be8a <__gethex+0x126>
 800be28:	f1a0 0210 	sub.w	r2, r0, #16
 800be2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be30:	f7ff ff82 	bl	800bd38 <__hexdig_fun>
 800be34:	f100 3cff 	add.w	ip, r0, #4294967295
 800be38:	fa5f fc8c 	uxtb.w	ip, ip
 800be3c:	f1bc 0f18 	cmp.w	ip, #24
 800be40:	f04f 030a 	mov.w	r3, #10
 800be44:	d91e      	bls.n	800be84 <__gethex+0x120>
 800be46:	b104      	cbz	r4, 800be4a <__gethex+0xe6>
 800be48:	4252      	negs	r2, r2
 800be4a:	4417      	add	r7, r2
 800be4c:	f8ca 1000 	str.w	r1, [sl]
 800be50:	b1ed      	cbz	r5, 800be8e <__gethex+0x12a>
 800be52:	f1bb 0f00 	cmp.w	fp, #0
 800be56:	bf0c      	ite	eq
 800be58:	2506      	moveq	r5, #6
 800be5a:	2500      	movne	r5, #0
 800be5c:	4628      	mov	r0, r5
 800be5e:	b005      	add	sp, #20
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	2500      	movs	r5, #0
 800be66:	462c      	mov	r4, r5
 800be68:	e7b0      	b.n	800bdcc <__gethex+0x68>
 800be6a:	2c00      	cmp	r4, #0
 800be6c:	d1c7      	bne.n	800bdfe <__gethex+0x9a>
 800be6e:	4627      	mov	r7, r4
 800be70:	e7c7      	b.n	800be02 <__gethex+0x9e>
 800be72:	464e      	mov	r6, r9
 800be74:	462f      	mov	r7, r5
 800be76:	2501      	movs	r5, #1
 800be78:	e7c3      	b.n	800be02 <__gethex+0x9e>
 800be7a:	2400      	movs	r4, #0
 800be7c:	1cb1      	adds	r1, r6, #2
 800be7e:	e7cc      	b.n	800be1a <__gethex+0xb6>
 800be80:	2401      	movs	r4, #1
 800be82:	e7fb      	b.n	800be7c <__gethex+0x118>
 800be84:	fb03 0002 	mla	r0, r3, r2, r0
 800be88:	e7ce      	b.n	800be28 <__gethex+0xc4>
 800be8a:	4631      	mov	r1, r6
 800be8c:	e7de      	b.n	800be4c <__gethex+0xe8>
 800be8e:	eba6 0309 	sub.w	r3, r6, r9
 800be92:	3b01      	subs	r3, #1
 800be94:	4629      	mov	r1, r5
 800be96:	2b07      	cmp	r3, #7
 800be98:	dc0a      	bgt.n	800beb0 <__gethex+0x14c>
 800be9a:	9801      	ldr	r0, [sp, #4]
 800be9c:	f000 fa46 	bl	800c32c <_Balloc>
 800bea0:	4604      	mov	r4, r0
 800bea2:	b940      	cbnz	r0, 800beb6 <__gethex+0x152>
 800bea4:	4b5c      	ldr	r3, [pc, #368]	@ (800c018 <__gethex+0x2b4>)
 800bea6:	4602      	mov	r2, r0
 800bea8:	21e4      	movs	r1, #228	@ 0xe4
 800beaa:	485c      	ldr	r0, [pc, #368]	@ (800c01c <__gethex+0x2b8>)
 800beac:	f7ff f83e 	bl	800af2c <__assert_func>
 800beb0:	3101      	adds	r1, #1
 800beb2:	105b      	asrs	r3, r3, #1
 800beb4:	e7ef      	b.n	800be96 <__gethex+0x132>
 800beb6:	f100 0a14 	add.w	sl, r0, #20
 800beba:	2300      	movs	r3, #0
 800bebc:	4655      	mov	r5, sl
 800bebe:	469b      	mov	fp, r3
 800bec0:	45b1      	cmp	r9, r6
 800bec2:	d337      	bcc.n	800bf34 <__gethex+0x1d0>
 800bec4:	f845 bb04 	str.w	fp, [r5], #4
 800bec8:	eba5 050a 	sub.w	r5, r5, sl
 800becc:	10ad      	asrs	r5, r5, #2
 800bece:	6125      	str	r5, [r4, #16]
 800bed0:	4658      	mov	r0, fp
 800bed2:	f000 fb1d 	bl	800c510 <__hi0bits>
 800bed6:	016d      	lsls	r5, r5, #5
 800bed8:	f8d8 6000 	ldr.w	r6, [r8]
 800bedc:	1a2d      	subs	r5, r5, r0
 800bede:	42b5      	cmp	r5, r6
 800bee0:	dd54      	ble.n	800bf8c <__gethex+0x228>
 800bee2:	1bad      	subs	r5, r5, r6
 800bee4:	4629      	mov	r1, r5
 800bee6:	4620      	mov	r0, r4
 800bee8:	f000 feb1 	bl	800cc4e <__any_on>
 800beec:	4681      	mov	r9, r0
 800beee:	b178      	cbz	r0, 800bf10 <__gethex+0x1ac>
 800bef0:	1e6b      	subs	r3, r5, #1
 800bef2:	1159      	asrs	r1, r3, #5
 800bef4:	f003 021f 	and.w	r2, r3, #31
 800bef8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800befc:	f04f 0901 	mov.w	r9, #1
 800bf00:	fa09 f202 	lsl.w	r2, r9, r2
 800bf04:	420a      	tst	r2, r1
 800bf06:	d003      	beq.n	800bf10 <__gethex+0x1ac>
 800bf08:	454b      	cmp	r3, r9
 800bf0a:	dc36      	bgt.n	800bf7a <__gethex+0x216>
 800bf0c:	f04f 0902 	mov.w	r9, #2
 800bf10:	4629      	mov	r1, r5
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7ff febe 	bl	800bc94 <rshift>
 800bf18:	442f      	add	r7, r5
 800bf1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf1e:	42bb      	cmp	r3, r7
 800bf20:	da42      	bge.n	800bfa8 <__gethex+0x244>
 800bf22:	9801      	ldr	r0, [sp, #4]
 800bf24:	4621      	mov	r1, r4
 800bf26:	f000 fa41 	bl	800c3ac <_Bfree>
 800bf2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	25a3      	movs	r5, #163	@ 0xa3
 800bf32:	e793      	b.n	800be5c <__gethex+0xf8>
 800bf34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bf38:	2a2e      	cmp	r2, #46	@ 0x2e
 800bf3a:	d012      	beq.n	800bf62 <__gethex+0x1fe>
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d104      	bne.n	800bf4a <__gethex+0x1e6>
 800bf40:	f845 bb04 	str.w	fp, [r5], #4
 800bf44:	f04f 0b00 	mov.w	fp, #0
 800bf48:	465b      	mov	r3, fp
 800bf4a:	7830      	ldrb	r0, [r6, #0]
 800bf4c:	9303      	str	r3, [sp, #12]
 800bf4e:	f7ff fef3 	bl	800bd38 <__hexdig_fun>
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	f000 000f 	and.w	r0, r0, #15
 800bf58:	4098      	lsls	r0, r3
 800bf5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf5e:	3304      	adds	r3, #4
 800bf60:	e7ae      	b.n	800bec0 <__gethex+0x15c>
 800bf62:	45b1      	cmp	r9, r6
 800bf64:	d8ea      	bhi.n	800bf3c <__gethex+0x1d8>
 800bf66:	492b      	ldr	r1, [pc, #172]	@ (800c014 <__gethex+0x2b0>)
 800bf68:	9303      	str	r3, [sp, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7fe feca 	bl	800ad06 <strncmp>
 800bf72:	9b03      	ldr	r3, [sp, #12]
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d1e1      	bne.n	800bf3c <__gethex+0x1d8>
 800bf78:	e7a2      	b.n	800bec0 <__gethex+0x15c>
 800bf7a:	1ea9      	subs	r1, r5, #2
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 fe66 	bl	800cc4e <__any_on>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d0c2      	beq.n	800bf0c <__gethex+0x1a8>
 800bf86:	f04f 0903 	mov.w	r9, #3
 800bf8a:	e7c1      	b.n	800bf10 <__gethex+0x1ac>
 800bf8c:	da09      	bge.n	800bfa2 <__gethex+0x23e>
 800bf8e:	1b75      	subs	r5, r6, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	9801      	ldr	r0, [sp, #4]
 800bf94:	462a      	mov	r2, r5
 800bf96:	f000 fc21 	bl	800c7dc <__lshift>
 800bf9a:	1b7f      	subs	r7, r7, r5
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	f100 0a14 	add.w	sl, r0, #20
 800bfa2:	f04f 0900 	mov.w	r9, #0
 800bfa6:	e7b8      	b.n	800bf1a <__gethex+0x1b6>
 800bfa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bfac:	42bd      	cmp	r5, r7
 800bfae:	dd6f      	ble.n	800c090 <__gethex+0x32c>
 800bfb0:	1bed      	subs	r5, r5, r7
 800bfb2:	42ae      	cmp	r6, r5
 800bfb4:	dc34      	bgt.n	800c020 <__gethex+0x2bc>
 800bfb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d022      	beq.n	800c004 <__gethex+0x2a0>
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d024      	beq.n	800c00c <__gethex+0x2a8>
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d115      	bne.n	800bff2 <__gethex+0x28e>
 800bfc6:	42ae      	cmp	r6, r5
 800bfc8:	d113      	bne.n	800bff2 <__gethex+0x28e>
 800bfca:	2e01      	cmp	r6, #1
 800bfcc:	d10b      	bne.n	800bfe6 <__gethex+0x282>
 800bfce:	9a02      	ldr	r2, [sp, #8]
 800bfd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	f8ca 3000 	str.w	r3, [sl]
 800bfde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfe0:	2562      	movs	r5, #98	@ 0x62
 800bfe2:	601c      	str	r4, [r3, #0]
 800bfe4:	e73a      	b.n	800be5c <__gethex+0xf8>
 800bfe6:	1e71      	subs	r1, r6, #1
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fe30 	bl	800cc4e <__any_on>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d1ed      	bne.n	800bfce <__gethex+0x26a>
 800bff2:	9801      	ldr	r0, [sp, #4]
 800bff4:	4621      	mov	r1, r4
 800bff6:	f000 f9d9 	bl	800c3ac <_Bfree>
 800bffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bffc:	2300      	movs	r3, #0
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	2550      	movs	r5, #80	@ 0x50
 800c002:	e72b      	b.n	800be5c <__gethex+0xf8>
 800c004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f3      	bne.n	800bff2 <__gethex+0x28e>
 800c00a:	e7e0      	b.n	800bfce <__gethex+0x26a>
 800c00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1dd      	bne.n	800bfce <__gethex+0x26a>
 800c012:	e7ee      	b.n	800bff2 <__gethex+0x28e>
 800c014:	0800da08 	.word	0x0800da08
 800c018:	0800dbb3 	.word	0x0800dbb3
 800c01c:	0800dbc4 	.word	0x0800dbc4
 800c020:	1e6f      	subs	r7, r5, #1
 800c022:	f1b9 0f00 	cmp.w	r9, #0
 800c026:	d130      	bne.n	800c08a <__gethex+0x326>
 800c028:	b127      	cbz	r7, 800c034 <__gethex+0x2d0>
 800c02a:	4639      	mov	r1, r7
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 fe0e 	bl	800cc4e <__any_on>
 800c032:	4681      	mov	r9, r0
 800c034:	117a      	asrs	r2, r7, #5
 800c036:	2301      	movs	r3, #1
 800c038:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c03c:	f007 071f 	and.w	r7, r7, #31
 800c040:	40bb      	lsls	r3, r7
 800c042:	4213      	tst	r3, r2
 800c044:	4629      	mov	r1, r5
 800c046:	4620      	mov	r0, r4
 800c048:	bf18      	it	ne
 800c04a:	f049 0902 	orrne.w	r9, r9, #2
 800c04e:	f7ff fe21 	bl	800bc94 <rshift>
 800c052:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c056:	1b76      	subs	r6, r6, r5
 800c058:	2502      	movs	r5, #2
 800c05a:	f1b9 0f00 	cmp.w	r9, #0
 800c05e:	d047      	beq.n	800c0f0 <__gethex+0x38c>
 800c060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c064:	2b02      	cmp	r3, #2
 800c066:	d015      	beq.n	800c094 <__gethex+0x330>
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d017      	beq.n	800c09c <__gethex+0x338>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d109      	bne.n	800c084 <__gethex+0x320>
 800c070:	f019 0f02 	tst.w	r9, #2
 800c074:	d006      	beq.n	800c084 <__gethex+0x320>
 800c076:	f8da 3000 	ldr.w	r3, [sl]
 800c07a:	ea49 0903 	orr.w	r9, r9, r3
 800c07e:	f019 0f01 	tst.w	r9, #1
 800c082:	d10e      	bne.n	800c0a2 <__gethex+0x33e>
 800c084:	f045 0510 	orr.w	r5, r5, #16
 800c088:	e032      	b.n	800c0f0 <__gethex+0x38c>
 800c08a:	f04f 0901 	mov.w	r9, #1
 800c08e:	e7d1      	b.n	800c034 <__gethex+0x2d0>
 800c090:	2501      	movs	r5, #1
 800c092:	e7e2      	b.n	800c05a <__gethex+0x2f6>
 800c094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c096:	f1c3 0301 	rsb	r3, r3, #1
 800c09a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d0f0      	beq.n	800c084 <__gethex+0x320>
 800c0a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0a6:	f104 0314 	add.w	r3, r4, #20
 800c0aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0b2:	f04f 0c00 	mov.w	ip, #0
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0c0:	d01b      	beq.n	800c0fa <__gethex+0x396>
 800c0c2:	3201      	adds	r2, #1
 800c0c4:	6002      	str	r2, [r0, #0]
 800c0c6:	2d02      	cmp	r5, #2
 800c0c8:	f104 0314 	add.w	r3, r4, #20
 800c0cc:	d13c      	bne.n	800c148 <__gethex+0x3e4>
 800c0ce:	f8d8 2000 	ldr.w	r2, [r8]
 800c0d2:	3a01      	subs	r2, #1
 800c0d4:	42b2      	cmp	r2, r6
 800c0d6:	d109      	bne.n	800c0ec <__gethex+0x388>
 800c0d8:	1171      	asrs	r1, r6, #5
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0e0:	f006 061f 	and.w	r6, r6, #31
 800c0e4:	fa02 f606 	lsl.w	r6, r2, r6
 800c0e8:	421e      	tst	r6, r3
 800c0ea:	d13a      	bne.n	800c162 <__gethex+0x3fe>
 800c0ec:	f045 0520 	orr.w	r5, r5, #32
 800c0f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0f2:	601c      	str	r4, [r3, #0]
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	601f      	str	r7, [r3, #0]
 800c0f8:	e6b0      	b.n	800be5c <__gethex+0xf8>
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c100:	d8d9      	bhi.n	800c0b6 <__gethex+0x352>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	459b      	cmp	fp, r3
 800c106:	db17      	blt.n	800c138 <__gethex+0x3d4>
 800c108:	6861      	ldr	r1, [r4, #4]
 800c10a:	9801      	ldr	r0, [sp, #4]
 800c10c:	3101      	adds	r1, #1
 800c10e:	f000 f90d 	bl	800c32c <_Balloc>
 800c112:	4681      	mov	r9, r0
 800c114:	b918      	cbnz	r0, 800c11e <__gethex+0x3ba>
 800c116:	4b1a      	ldr	r3, [pc, #104]	@ (800c180 <__gethex+0x41c>)
 800c118:	4602      	mov	r2, r0
 800c11a:	2184      	movs	r1, #132	@ 0x84
 800c11c:	e6c5      	b.n	800beaa <__gethex+0x146>
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	3202      	adds	r2, #2
 800c122:	f104 010c 	add.w	r1, r4, #12
 800c126:	0092      	lsls	r2, r2, #2
 800c128:	300c      	adds	r0, #12
 800c12a:	f7fe fee2 	bl	800aef2 <memcpy>
 800c12e:	4621      	mov	r1, r4
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	f000 f93b 	bl	800c3ac <_Bfree>
 800c136:	464c      	mov	r4, r9
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c140:	6122      	str	r2, [r4, #16]
 800c142:	2201      	movs	r2, #1
 800c144:	615a      	str	r2, [r3, #20]
 800c146:	e7be      	b.n	800c0c6 <__gethex+0x362>
 800c148:	6922      	ldr	r2, [r4, #16]
 800c14a:	455a      	cmp	r2, fp
 800c14c:	dd0b      	ble.n	800c166 <__gethex+0x402>
 800c14e:	2101      	movs	r1, #1
 800c150:	4620      	mov	r0, r4
 800c152:	f7ff fd9f 	bl	800bc94 <rshift>
 800c156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c15a:	3701      	adds	r7, #1
 800c15c:	42bb      	cmp	r3, r7
 800c15e:	f6ff aee0 	blt.w	800bf22 <__gethex+0x1be>
 800c162:	2501      	movs	r5, #1
 800c164:	e7c2      	b.n	800c0ec <__gethex+0x388>
 800c166:	f016 061f 	ands.w	r6, r6, #31
 800c16a:	d0fa      	beq.n	800c162 <__gethex+0x3fe>
 800c16c:	4453      	add	r3, sl
 800c16e:	f1c6 0620 	rsb	r6, r6, #32
 800c172:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c176:	f000 f9cb 	bl	800c510 <__hi0bits>
 800c17a:	42b0      	cmp	r0, r6
 800c17c:	dbe7      	blt.n	800c14e <__gethex+0x3ea>
 800c17e:	e7f0      	b.n	800c162 <__gethex+0x3fe>
 800c180:	0800dbb3 	.word	0x0800dbb3

0800c184 <L_shift>:
 800c184:	f1c2 0208 	rsb	r2, r2, #8
 800c188:	0092      	lsls	r2, r2, #2
 800c18a:	b570      	push	{r4, r5, r6, lr}
 800c18c:	f1c2 0620 	rsb	r6, r2, #32
 800c190:	6843      	ldr	r3, [r0, #4]
 800c192:	6804      	ldr	r4, [r0, #0]
 800c194:	fa03 f506 	lsl.w	r5, r3, r6
 800c198:	432c      	orrs	r4, r5
 800c19a:	40d3      	lsrs	r3, r2
 800c19c:	6004      	str	r4, [r0, #0]
 800c19e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1a2:	4288      	cmp	r0, r1
 800c1a4:	d3f4      	bcc.n	800c190 <L_shift+0xc>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}

0800c1a8 <__match>:
 800c1a8:	b530      	push	{r4, r5, lr}
 800c1aa:	6803      	ldr	r3, [r0, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b2:	b914      	cbnz	r4, 800c1ba <__match+0x12>
 800c1b4:	6003      	str	r3, [r0, #0]
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	bd30      	pop	{r4, r5, pc}
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c1c2:	2d19      	cmp	r5, #25
 800c1c4:	bf98      	it	ls
 800c1c6:	3220      	addls	r2, #32
 800c1c8:	42a2      	cmp	r2, r4
 800c1ca:	d0f0      	beq.n	800c1ae <__match+0x6>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e7f3      	b.n	800c1b8 <__match+0x10>

0800c1d0 <__hexnan>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	680b      	ldr	r3, [r1, #0]
 800c1d6:	6801      	ldr	r1, [r0, #0]
 800c1d8:	115e      	asrs	r6, r3, #5
 800c1da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1de:	f013 031f 	ands.w	r3, r3, #31
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	bf18      	it	ne
 800c1e6:	3604      	addne	r6, #4
 800c1e8:	2500      	movs	r5, #0
 800c1ea:	1f37      	subs	r7, r6, #4
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	4690      	mov	r8, r2
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1f6:	46b9      	mov	r9, r7
 800c1f8:	463c      	mov	r4, r7
 800c1fa:	9502      	str	r5, [sp, #8]
 800c1fc:	46ab      	mov	fp, r5
 800c1fe:	784a      	ldrb	r2, [r1, #1]
 800c200:	1c4b      	adds	r3, r1, #1
 800c202:	9303      	str	r3, [sp, #12]
 800c204:	b342      	cbz	r2, 800c258 <__hexnan+0x88>
 800c206:	4610      	mov	r0, r2
 800c208:	9105      	str	r1, [sp, #20]
 800c20a:	9204      	str	r2, [sp, #16]
 800c20c:	f7ff fd94 	bl	800bd38 <__hexdig_fun>
 800c210:	2800      	cmp	r0, #0
 800c212:	d151      	bne.n	800c2b8 <__hexnan+0xe8>
 800c214:	9a04      	ldr	r2, [sp, #16]
 800c216:	9905      	ldr	r1, [sp, #20]
 800c218:	2a20      	cmp	r2, #32
 800c21a:	d818      	bhi.n	800c24e <__hexnan+0x7e>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	459b      	cmp	fp, r3
 800c220:	dd13      	ble.n	800c24a <__hexnan+0x7a>
 800c222:	454c      	cmp	r4, r9
 800c224:	d206      	bcs.n	800c234 <__hexnan+0x64>
 800c226:	2d07      	cmp	r5, #7
 800c228:	dc04      	bgt.n	800c234 <__hexnan+0x64>
 800c22a:	462a      	mov	r2, r5
 800c22c:	4649      	mov	r1, r9
 800c22e:	4620      	mov	r0, r4
 800c230:	f7ff ffa8 	bl	800c184 <L_shift>
 800c234:	4544      	cmp	r4, r8
 800c236:	d952      	bls.n	800c2de <__hexnan+0x10e>
 800c238:	2300      	movs	r3, #0
 800c23a:	f1a4 0904 	sub.w	r9, r4, #4
 800c23e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c242:	f8cd b008 	str.w	fp, [sp, #8]
 800c246:	464c      	mov	r4, r9
 800c248:	461d      	mov	r5, r3
 800c24a:	9903      	ldr	r1, [sp, #12]
 800c24c:	e7d7      	b.n	800c1fe <__hexnan+0x2e>
 800c24e:	2a29      	cmp	r2, #41	@ 0x29
 800c250:	d157      	bne.n	800c302 <__hexnan+0x132>
 800c252:	3102      	adds	r1, #2
 800c254:	f8ca 1000 	str.w	r1, [sl]
 800c258:	f1bb 0f00 	cmp.w	fp, #0
 800c25c:	d051      	beq.n	800c302 <__hexnan+0x132>
 800c25e:	454c      	cmp	r4, r9
 800c260:	d206      	bcs.n	800c270 <__hexnan+0xa0>
 800c262:	2d07      	cmp	r5, #7
 800c264:	dc04      	bgt.n	800c270 <__hexnan+0xa0>
 800c266:	462a      	mov	r2, r5
 800c268:	4649      	mov	r1, r9
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7ff ff8a 	bl	800c184 <L_shift>
 800c270:	4544      	cmp	r4, r8
 800c272:	d936      	bls.n	800c2e2 <__hexnan+0x112>
 800c274:	f1a8 0204 	sub.w	r2, r8, #4
 800c278:	4623      	mov	r3, r4
 800c27a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c27e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c282:	429f      	cmp	r7, r3
 800c284:	d2f9      	bcs.n	800c27a <__hexnan+0xaa>
 800c286:	1b3b      	subs	r3, r7, r4
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3304      	adds	r3, #4
 800c28e:	3401      	adds	r4, #1
 800c290:	3e03      	subs	r6, #3
 800c292:	42b4      	cmp	r4, r6
 800c294:	bf88      	it	hi
 800c296:	2304      	movhi	r3, #4
 800c298:	4443      	add	r3, r8
 800c29a:	2200      	movs	r2, #0
 800c29c:	f843 2b04 	str.w	r2, [r3], #4
 800c2a0:	429f      	cmp	r7, r3
 800c2a2:	d2fb      	bcs.n	800c29c <__hexnan+0xcc>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	b91b      	cbnz	r3, 800c2b0 <__hexnan+0xe0>
 800c2a8:	4547      	cmp	r7, r8
 800c2aa:	d128      	bne.n	800c2fe <__hexnan+0x12e>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	2005      	movs	r0, #5
 800c2b2:	b007      	add	sp, #28
 800c2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	2d08      	cmp	r5, #8
 800c2bc:	f10b 0b01 	add.w	fp, fp, #1
 800c2c0:	dd06      	ble.n	800c2d0 <__hexnan+0x100>
 800c2c2:	4544      	cmp	r4, r8
 800c2c4:	d9c1      	bls.n	800c24a <__hexnan+0x7a>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2cc:	2501      	movs	r5, #1
 800c2ce:	3c04      	subs	r4, #4
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	f000 000f 	and.w	r0, r0, #15
 800c2d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c2da:	6020      	str	r0, [r4, #0]
 800c2dc:	e7b5      	b.n	800c24a <__hexnan+0x7a>
 800c2de:	2508      	movs	r5, #8
 800c2e0:	e7b3      	b.n	800c24a <__hexnan+0x7a>
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0dd      	beq.n	800c2a4 <__hexnan+0xd4>
 800c2e8:	f1c3 0320 	rsb	r3, r3, #32
 800c2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f0:	40da      	lsrs	r2, r3
 800c2f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c2fc:	e7d2      	b.n	800c2a4 <__hexnan+0xd4>
 800c2fe:	3f04      	subs	r7, #4
 800c300:	e7d0      	b.n	800c2a4 <__hexnan+0xd4>
 800c302:	2004      	movs	r0, #4
 800c304:	e7d5      	b.n	800c2b2 <__hexnan+0xe2>

0800c306 <__ascii_mbtowc>:
 800c306:	b082      	sub	sp, #8
 800c308:	b901      	cbnz	r1, 800c30c <__ascii_mbtowc+0x6>
 800c30a:	a901      	add	r1, sp, #4
 800c30c:	b142      	cbz	r2, 800c320 <__ascii_mbtowc+0x1a>
 800c30e:	b14b      	cbz	r3, 800c324 <__ascii_mbtowc+0x1e>
 800c310:	7813      	ldrb	r3, [r2, #0]
 800c312:	600b      	str	r3, [r1, #0]
 800c314:	7812      	ldrb	r2, [r2, #0]
 800c316:	1e10      	subs	r0, r2, #0
 800c318:	bf18      	it	ne
 800c31a:	2001      	movne	r0, #1
 800c31c:	b002      	add	sp, #8
 800c31e:	4770      	bx	lr
 800c320:	4610      	mov	r0, r2
 800c322:	e7fb      	b.n	800c31c <__ascii_mbtowc+0x16>
 800c324:	f06f 0001 	mvn.w	r0, #1
 800c328:	e7f8      	b.n	800c31c <__ascii_mbtowc+0x16>
	...

0800c32c <_Balloc>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	69c6      	ldr	r6, [r0, #28]
 800c330:	4604      	mov	r4, r0
 800c332:	460d      	mov	r5, r1
 800c334:	b976      	cbnz	r6, 800c354 <_Balloc+0x28>
 800c336:	2010      	movs	r0, #16
 800c338:	f7fc fd00 	bl	8008d3c <malloc>
 800c33c:	4602      	mov	r2, r0
 800c33e:	61e0      	str	r0, [r4, #28]
 800c340:	b920      	cbnz	r0, 800c34c <_Balloc+0x20>
 800c342:	4b18      	ldr	r3, [pc, #96]	@ (800c3a4 <_Balloc+0x78>)
 800c344:	4818      	ldr	r0, [pc, #96]	@ (800c3a8 <_Balloc+0x7c>)
 800c346:	216b      	movs	r1, #107	@ 0x6b
 800c348:	f7fe fdf0 	bl	800af2c <__assert_func>
 800c34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c350:	6006      	str	r6, [r0, #0]
 800c352:	60c6      	str	r6, [r0, #12]
 800c354:	69e6      	ldr	r6, [r4, #28]
 800c356:	68f3      	ldr	r3, [r6, #12]
 800c358:	b183      	cbz	r3, 800c37c <_Balloc+0x50>
 800c35a:	69e3      	ldr	r3, [r4, #28]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c362:	b9b8      	cbnz	r0, 800c394 <_Balloc+0x68>
 800c364:	2101      	movs	r1, #1
 800c366:	fa01 f605 	lsl.w	r6, r1, r5
 800c36a:	1d72      	adds	r2, r6, #5
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	4620      	mov	r0, r4
 800c370:	f001 f913 	bl	800d59a <_calloc_r>
 800c374:	b160      	cbz	r0, 800c390 <_Balloc+0x64>
 800c376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c37a:	e00e      	b.n	800c39a <_Balloc+0x6e>
 800c37c:	2221      	movs	r2, #33	@ 0x21
 800c37e:	2104      	movs	r1, #4
 800c380:	4620      	mov	r0, r4
 800c382:	f001 f90a 	bl	800d59a <_calloc_r>
 800c386:	69e3      	ldr	r3, [r4, #28]
 800c388:	60f0      	str	r0, [r6, #12]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e4      	bne.n	800c35a <_Balloc+0x2e>
 800c390:	2000      	movs	r0, #0
 800c392:	bd70      	pop	{r4, r5, r6, pc}
 800c394:	6802      	ldr	r2, [r0, #0]
 800c396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c39a:	2300      	movs	r3, #0
 800c39c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3a0:	e7f7      	b.n	800c392 <_Balloc+0x66>
 800c3a2:	bf00      	nop
 800c3a4:	0800da99 	.word	0x0800da99
 800c3a8:	0800dc24 	.word	0x0800dc24

0800c3ac <_Bfree>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	69c6      	ldr	r6, [r0, #28]
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	b976      	cbnz	r6, 800c3d4 <_Bfree+0x28>
 800c3b6:	2010      	movs	r0, #16
 800c3b8:	f7fc fcc0 	bl	8008d3c <malloc>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	61e8      	str	r0, [r5, #28]
 800c3c0:	b920      	cbnz	r0, 800c3cc <_Bfree+0x20>
 800c3c2:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <_Bfree+0x3c>)
 800c3c4:	4809      	ldr	r0, [pc, #36]	@ (800c3ec <_Bfree+0x40>)
 800c3c6:	218f      	movs	r1, #143	@ 0x8f
 800c3c8:	f7fe fdb0 	bl	800af2c <__assert_func>
 800c3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3d0:	6006      	str	r6, [r0, #0]
 800c3d2:	60c6      	str	r6, [r0, #12]
 800c3d4:	b13c      	cbz	r4, 800c3e6 <_Bfree+0x3a>
 800c3d6:	69eb      	ldr	r3, [r5, #28]
 800c3d8:	6862      	ldr	r2, [r4, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3e0:	6021      	str	r1, [r4, #0]
 800c3e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	0800da99 	.word	0x0800da99
 800c3ec:	0800dc24 	.word	0x0800dc24

0800c3f0 <__multadd>:
 800c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	690d      	ldr	r5, [r1, #16]
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	461e      	mov	r6, r3
 800c3fc:	f101 0c14 	add.w	ip, r1, #20
 800c400:	2000      	movs	r0, #0
 800c402:	f8dc 3000 	ldr.w	r3, [ip]
 800c406:	b299      	uxth	r1, r3
 800c408:	fb02 6101 	mla	r1, r2, r1, r6
 800c40c:	0c1e      	lsrs	r6, r3, #16
 800c40e:	0c0b      	lsrs	r3, r1, #16
 800c410:	fb02 3306 	mla	r3, r2, r6, r3
 800c414:	b289      	uxth	r1, r1
 800c416:	3001      	adds	r0, #1
 800c418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c41c:	4285      	cmp	r5, r0
 800c41e:	f84c 1b04 	str.w	r1, [ip], #4
 800c422:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c426:	dcec      	bgt.n	800c402 <__multadd+0x12>
 800c428:	b30e      	cbz	r6, 800c46e <__multadd+0x7e>
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	42ab      	cmp	r3, r5
 800c42e:	dc19      	bgt.n	800c464 <__multadd+0x74>
 800c430:	6861      	ldr	r1, [r4, #4]
 800c432:	4638      	mov	r0, r7
 800c434:	3101      	adds	r1, #1
 800c436:	f7ff ff79 	bl	800c32c <_Balloc>
 800c43a:	4680      	mov	r8, r0
 800c43c:	b928      	cbnz	r0, 800c44a <__multadd+0x5a>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b0c      	ldr	r3, [pc, #48]	@ (800c474 <__multadd+0x84>)
 800c442:	480d      	ldr	r0, [pc, #52]	@ (800c478 <__multadd+0x88>)
 800c444:	21ba      	movs	r1, #186	@ 0xba
 800c446:	f7fe fd71 	bl	800af2c <__assert_func>
 800c44a:	6922      	ldr	r2, [r4, #16]
 800c44c:	3202      	adds	r2, #2
 800c44e:	f104 010c 	add.w	r1, r4, #12
 800c452:	0092      	lsls	r2, r2, #2
 800c454:	300c      	adds	r0, #12
 800c456:	f7fe fd4c 	bl	800aef2 <memcpy>
 800c45a:	4621      	mov	r1, r4
 800c45c:	4638      	mov	r0, r7
 800c45e:	f7ff ffa5 	bl	800c3ac <_Bfree>
 800c462:	4644      	mov	r4, r8
 800c464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c468:	3501      	adds	r5, #1
 800c46a:	615e      	str	r6, [r3, #20]
 800c46c:	6125      	str	r5, [r4, #16]
 800c46e:	4620      	mov	r0, r4
 800c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c474:	0800dbb3 	.word	0x0800dbb3
 800c478:	0800dc24 	.word	0x0800dc24

0800c47c <__s2b>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	460c      	mov	r4, r1
 800c482:	4615      	mov	r5, r2
 800c484:	461f      	mov	r7, r3
 800c486:	2209      	movs	r2, #9
 800c488:	3308      	adds	r3, #8
 800c48a:	4606      	mov	r6, r0
 800c48c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c490:	2100      	movs	r1, #0
 800c492:	2201      	movs	r2, #1
 800c494:	429a      	cmp	r2, r3
 800c496:	db09      	blt.n	800c4ac <__s2b+0x30>
 800c498:	4630      	mov	r0, r6
 800c49a:	f7ff ff47 	bl	800c32c <_Balloc>
 800c49e:	b940      	cbnz	r0, 800c4b2 <__s2b+0x36>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	4b19      	ldr	r3, [pc, #100]	@ (800c508 <__s2b+0x8c>)
 800c4a4:	4819      	ldr	r0, [pc, #100]	@ (800c50c <__s2b+0x90>)
 800c4a6:	21d3      	movs	r1, #211	@ 0xd3
 800c4a8:	f7fe fd40 	bl	800af2c <__assert_func>
 800c4ac:	0052      	lsls	r2, r2, #1
 800c4ae:	3101      	adds	r1, #1
 800c4b0:	e7f0      	b.n	800c494 <__s2b+0x18>
 800c4b2:	9b08      	ldr	r3, [sp, #32]
 800c4b4:	6143      	str	r3, [r0, #20]
 800c4b6:	2d09      	cmp	r5, #9
 800c4b8:	f04f 0301 	mov.w	r3, #1
 800c4bc:	6103      	str	r3, [r0, #16]
 800c4be:	dd16      	ble.n	800c4ee <__s2b+0x72>
 800c4c0:	f104 0909 	add.w	r9, r4, #9
 800c4c4:	46c8      	mov	r8, r9
 800c4c6:	442c      	add	r4, r5
 800c4c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	3b30      	subs	r3, #48	@ 0x30
 800c4d0:	220a      	movs	r2, #10
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ff8c 	bl	800c3f0 <__multadd>
 800c4d8:	45a0      	cmp	r8, r4
 800c4da:	d1f5      	bne.n	800c4c8 <__s2b+0x4c>
 800c4dc:	f1a5 0408 	sub.w	r4, r5, #8
 800c4e0:	444c      	add	r4, r9
 800c4e2:	1b2d      	subs	r5, r5, r4
 800c4e4:	1963      	adds	r3, r4, r5
 800c4e6:	42bb      	cmp	r3, r7
 800c4e8:	db04      	blt.n	800c4f4 <__s2b+0x78>
 800c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	340a      	adds	r4, #10
 800c4f0:	2509      	movs	r5, #9
 800c4f2:	e7f6      	b.n	800c4e2 <__s2b+0x66>
 800c4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4f8:	4601      	mov	r1, r0
 800c4fa:	3b30      	subs	r3, #48	@ 0x30
 800c4fc:	220a      	movs	r2, #10
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7ff ff76 	bl	800c3f0 <__multadd>
 800c504:	e7ee      	b.n	800c4e4 <__s2b+0x68>
 800c506:	bf00      	nop
 800c508:	0800dbb3 	.word	0x0800dbb3
 800c50c:	0800dc24 	.word	0x0800dc24

0800c510 <__hi0bits>:
 800c510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c514:	4603      	mov	r3, r0
 800c516:	bf36      	itet	cc
 800c518:	0403      	lslcc	r3, r0, #16
 800c51a:	2000      	movcs	r0, #0
 800c51c:	2010      	movcc	r0, #16
 800c51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c522:	bf3c      	itt	cc
 800c524:	021b      	lslcc	r3, r3, #8
 800c526:	3008      	addcc	r0, #8
 800c528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c52c:	bf3c      	itt	cc
 800c52e:	011b      	lslcc	r3, r3, #4
 800c530:	3004      	addcc	r0, #4
 800c532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c536:	bf3c      	itt	cc
 800c538:	009b      	lslcc	r3, r3, #2
 800c53a:	3002      	addcc	r0, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	db05      	blt.n	800c54c <__hi0bits+0x3c>
 800c540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c544:	f100 0001 	add.w	r0, r0, #1
 800c548:	bf08      	it	eq
 800c54a:	2020      	moveq	r0, #32
 800c54c:	4770      	bx	lr

0800c54e <__lo0bits>:
 800c54e:	6803      	ldr	r3, [r0, #0]
 800c550:	4602      	mov	r2, r0
 800c552:	f013 0007 	ands.w	r0, r3, #7
 800c556:	d00b      	beq.n	800c570 <__lo0bits+0x22>
 800c558:	07d9      	lsls	r1, r3, #31
 800c55a:	d421      	bmi.n	800c5a0 <__lo0bits+0x52>
 800c55c:	0798      	lsls	r0, r3, #30
 800c55e:	bf49      	itett	mi
 800c560:	085b      	lsrmi	r3, r3, #1
 800c562:	089b      	lsrpl	r3, r3, #2
 800c564:	2001      	movmi	r0, #1
 800c566:	6013      	strmi	r3, [r2, #0]
 800c568:	bf5c      	itt	pl
 800c56a:	6013      	strpl	r3, [r2, #0]
 800c56c:	2002      	movpl	r0, #2
 800c56e:	4770      	bx	lr
 800c570:	b299      	uxth	r1, r3
 800c572:	b909      	cbnz	r1, 800c578 <__lo0bits+0x2a>
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	2010      	movs	r0, #16
 800c578:	b2d9      	uxtb	r1, r3
 800c57a:	b909      	cbnz	r1, 800c580 <__lo0bits+0x32>
 800c57c:	3008      	adds	r0, #8
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	0719      	lsls	r1, r3, #28
 800c582:	bf04      	itt	eq
 800c584:	091b      	lsreq	r3, r3, #4
 800c586:	3004      	addeq	r0, #4
 800c588:	0799      	lsls	r1, r3, #30
 800c58a:	bf04      	itt	eq
 800c58c:	089b      	lsreq	r3, r3, #2
 800c58e:	3002      	addeq	r0, #2
 800c590:	07d9      	lsls	r1, r3, #31
 800c592:	d403      	bmi.n	800c59c <__lo0bits+0x4e>
 800c594:	085b      	lsrs	r3, r3, #1
 800c596:	f100 0001 	add.w	r0, r0, #1
 800c59a:	d003      	beq.n	800c5a4 <__lo0bits+0x56>
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	4770      	bx	lr
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	4770      	bx	lr
 800c5a4:	2020      	movs	r0, #32
 800c5a6:	4770      	bx	lr

0800c5a8 <__i2b>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	f7ff febd 	bl	800c32c <_Balloc>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	b928      	cbnz	r0, 800c5c2 <__i2b+0x1a>
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <__i2b+0x24>)
 800c5b8:	4805      	ldr	r0, [pc, #20]	@ (800c5d0 <__i2b+0x28>)
 800c5ba:	f240 1145 	movw	r1, #325	@ 0x145
 800c5be:	f7fe fcb5 	bl	800af2c <__assert_func>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	6144      	str	r4, [r0, #20]
 800c5c6:	6103      	str	r3, [r0, #16]
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	bf00      	nop
 800c5cc:	0800dbb3 	.word	0x0800dbb3
 800c5d0:	0800dc24 	.word	0x0800dc24

0800c5d4 <__multiply>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	4614      	mov	r4, r2
 800c5da:	690a      	ldr	r2, [r1, #16]
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	bfa8      	it	ge
 800c5e2:	4623      	movge	r3, r4
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	bfa4      	itt	ge
 800c5e8:	460c      	movge	r4, r1
 800c5ea:	461f      	movge	r7, r3
 800c5ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c5f4:	68a3      	ldr	r3, [r4, #8]
 800c5f6:	6861      	ldr	r1, [r4, #4]
 800c5f8:	eb0a 0609 	add.w	r6, sl, r9
 800c5fc:	42b3      	cmp	r3, r6
 800c5fe:	b085      	sub	sp, #20
 800c600:	bfb8      	it	lt
 800c602:	3101      	addlt	r1, #1
 800c604:	f7ff fe92 	bl	800c32c <_Balloc>
 800c608:	b930      	cbnz	r0, 800c618 <__multiply+0x44>
 800c60a:	4602      	mov	r2, r0
 800c60c:	4b44      	ldr	r3, [pc, #272]	@ (800c720 <__multiply+0x14c>)
 800c60e:	4845      	ldr	r0, [pc, #276]	@ (800c724 <__multiply+0x150>)
 800c610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c614:	f7fe fc8a 	bl	800af2c <__assert_func>
 800c618:	f100 0514 	add.w	r5, r0, #20
 800c61c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c620:	462b      	mov	r3, r5
 800c622:	2200      	movs	r2, #0
 800c624:	4543      	cmp	r3, r8
 800c626:	d321      	bcc.n	800c66c <__multiply+0x98>
 800c628:	f107 0114 	add.w	r1, r7, #20
 800c62c:	f104 0214 	add.w	r2, r4, #20
 800c630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	1b13      	subs	r3, r2, r4
 800c63c:	3b15      	subs	r3, #21
 800c63e:	f023 0303 	bic.w	r3, r3, #3
 800c642:	3304      	adds	r3, #4
 800c644:	f104 0715 	add.w	r7, r4, #21
 800c648:	42ba      	cmp	r2, r7
 800c64a:	bf38      	it	cc
 800c64c:	2304      	movcc	r3, #4
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	428b      	cmp	r3, r1
 800c656:	d80c      	bhi.n	800c672 <__multiply+0x9e>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dd03      	ble.n	800c664 <__multiply+0x90>
 800c65c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c660:	2b00      	cmp	r3, #0
 800c662:	d05b      	beq.n	800c71c <__multiply+0x148>
 800c664:	6106      	str	r6, [r0, #16]
 800c666:	b005      	add	sp, #20
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	f843 2b04 	str.w	r2, [r3], #4
 800c670:	e7d8      	b.n	800c624 <__multiply+0x50>
 800c672:	f8b1 a000 	ldrh.w	sl, [r1]
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	d024      	beq.n	800c6c6 <__multiply+0xf2>
 800c67c:	f104 0e14 	add.w	lr, r4, #20
 800c680:	46a9      	mov	r9, r5
 800c682:	f04f 0c00 	mov.w	ip, #0
 800c686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c68a:	f8d9 3000 	ldr.w	r3, [r9]
 800c68e:	fa1f fb87 	uxth.w	fp, r7
 800c692:	b29b      	uxth	r3, r3
 800c694:	fb0a 330b 	mla	r3, sl, fp, r3
 800c698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c69c:	f8d9 7000 	ldr.w	r7, [r9]
 800c6a0:	4463      	add	r3, ip
 800c6a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c6aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6b4:	4572      	cmp	r2, lr
 800c6b6:	f849 3b04 	str.w	r3, [r9], #4
 800c6ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6be:	d8e2      	bhi.n	800c686 <__multiply+0xb2>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	f845 c003 	str.w	ip, [r5, r3]
 800c6c6:	9b03      	ldr	r3, [sp, #12]
 800c6c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6cc:	3104      	adds	r1, #4
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	d021      	beq.n	800c718 <__multiply+0x144>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	f104 0c14 	add.w	ip, r4, #20
 800c6da:	46ae      	mov	lr, r5
 800c6dc:	f04f 0a00 	mov.w	sl, #0
 800c6e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6e8:	fb09 770b 	mla	r7, r9, fp, r7
 800c6ec:	4457      	add	r7, sl
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6f4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c700:	f8be 3000 	ldrh.w	r3, [lr]
 800c704:	fb09 330a 	mla	r3, r9, sl, r3
 800c708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c70c:	4562      	cmp	r2, ip
 800c70e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c712:	d8e5      	bhi.n	800c6e0 <__multiply+0x10c>
 800c714:	9f01      	ldr	r7, [sp, #4]
 800c716:	51eb      	str	r3, [r5, r7]
 800c718:	3504      	adds	r5, #4
 800c71a:	e799      	b.n	800c650 <__multiply+0x7c>
 800c71c:	3e01      	subs	r6, #1
 800c71e:	e79b      	b.n	800c658 <__multiply+0x84>
 800c720:	0800dbb3 	.word	0x0800dbb3
 800c724:	0800dc24 	.word	0x0800dc24

0800c728 <__pow5mult>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	4615      	mov	r5, r2
 800c72e:	f012 0203 	ands.w	r2, r2, #3
 800c732:	4607      	mov	r7, r0
 800c734:	460e      	mov	r6, r1
 800c736:	d007      	beq.n	800c748 <__pow5mult+0x20>
 800c738:	4c25      	ldr	r4, [pc, #148]	@ (800c7d0 <__pow5mult+0xa8>)
 800c73a:	3a01      	subs	r2, #1
 800c73c:	2300      	movs	r3, #0
 800c73e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c742:	f7ff fe55 	bl	800c3f0 <__multadd>
 800c746:	4606      	mov	r6, r0
 800c748:	10ad      	asrs	r5, r5, #2
 800c74a:	d03d      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c74c:	69fc      	ldr	r4, [r7, #28]
 800c74e:	b97c      	cbnz	r4, 800c770 <__pow5mult+0x48>
 800c750:	2010      	movs	r0, #16
 800c752:	f7fc faf3 	bl	8008d3c <malloc>
 800c756:	4602      	mov	r2, r0
 800c758:	61f8      	str	r0, [r7, #28]
 800c75a:	b928      	cbnz	r0, 800c768 <__pow5mult+0x40>
 800c75c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <__pow5mult+0xac>)
 800c75e:	481e      	ldr	r0, [pc, #120]	@ (800c7d8 <__pow5mult+0xb0>)
 800c760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c764:	f7fe fbe2 	bl	800af2c <__assert_func>
 800c768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c76c:	6004      	str	r4, [r0, #0]
 800c76e:	60c4      	str	r4, [r0, #12]
 800c770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c778:	b94c      	cbnz	r4, 800c78e <__pow5mult+0x66>
 800c77a:	f240 2171 	movw	r1, #625	@ 0x271
 800c77e:	4638      	mov	r0, r7
 800c780:	f7ff ff12 	bl	800c5a8 <__i2b>
 800c784:	2300      	movs	r3, #0
 800c786:	f8c8 0008 	str.w	r0, [r8, #8]
 800c78a:	4604      	mov	r4, r0
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	f04f 0900 	mov.w	r9, #0
 800c792:	07eb      	lsls	r3, r5, #31
 800c794:	d50a      	bpl.n	800c7ac <__pow5mult+0x84>
 800c796:	4631      	mov	r1, r6
 800c798:	4622      	mov	r2, r4
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7ff ff1a 	bl	800c5d4 <__multiply>
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4680      	mov	r8, r0
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fe01 	bl	800c3ac <_Bfree>
 800c7aa:	4646      	mov	r6, r8
 800c7ac:	106d      	asrs	r5, r5, #1
 800c7ae:	d00b      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	b938      	cbnz	r0, 800c7c4 <__pow5mult+0x9c>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ff0b 	bl	800c5d4 <__multiply>
 800c7be:	6020      	str	r0, [r4, #0]
 800c7c0:	f8c0 9000 	str.w	r9, [r0]
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	e7e4      	b.n	800c792 <__pow5mult+0x6a>
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800dc80 	.word	0x0800dc80
 800c7d4:	0800da99 	.word	0x0800da99
 800c7d8:	0800dc24 	.word	0x0800dc24

0800c7dc <__lshift>:
 800c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	6849      	ldr	r1, [r1, #4]
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7f4:	f108 0601 	add.w	r6, r8, #1
 800c7f8:	42b3      	cmp	r3, r6
 800c7fa:	db0b      	blt.n	800c814 <__lshift+0x38>
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff fd95 	bl	800c32c <_Balloc>
 800c802:	4605      	mov	r5, r0
 800c804:	b948      	cbnz	r0, 800c81a <__lshift+0x3e>
 800c806:	4602      	mov	r2, r0
 800c808:	4b28      	ldr	r3, [pc, #160]	@ (800c8ac <__lshift+0xd0>)
 800c80a:	4829      	ldr	r0, [pc, #164]	@ (800c8b0 <__lshift+0xd4>)
 800c80c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c810:	f7fe fb8c 	bl	800af2c <__assert_func>
 800c814:	3101      	adds	r1, #1
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	e7ee      	b.n	800c7f8 <__lshift+0x1c>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f100 0114 	add.w	r1, r0, #20
 800c820:	f100 0210 	add.w	r2, r0, #16
 800c824:	4618      	mov	r0, r3
 800c826:	4553      	cmp	r3, sl
 800c828:	db33      	blt.n	800c892 <__lshift+0xb6>
 800c82a:	6920      	ldr	r0, [r4, #16]
 800c82c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c830:	f104 0314 	add.w	r3, r4, #20
 800c834:	f019 091f 	ands.w	r9, r9, #31
 800c838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c83c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c840:	d02b      	beq.n	800c89a <__lshift+0xbe>
 800c842:	f1c9 0e20 	rsb	lr, r9, #32
 800c846:	468a      	mov	sl, r1
 800c848:	2200      	movs	r2, #0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	fa00 f009 	lsl.w	r0, r0, r9
 800c850:	4310      	orrs	r0, r2
 800c852:	f84a 0b04 	str.w	r0, [sl], #4
 800c856:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85a:	459c      	cmp	ip, r3
 800c85c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c860:	d8f3      	bhi.n	800c84a <__lshift+0x6e>
 800c862:	ebac 0304 	sub.w	r3, ip, r4
 800c866:	3b15      	subs	r3, #21
 800c868:	f023 0303 	bic.w	r3, r3, #3
 800c86c:	3304      	adds	r3, #4
 800c86e:	f104 0015 	add.w	r0, r4, #21
 800c872:	4584      	cmp	ip, r0
 800c874:	bf38      	it	cc
 800c876:	2304      	movcc	r3, #4
 800c878:	50ca      	str	r2, [r1, r3]
 800c87a:	b10a      	cbz	r2, 800c880 <__lshift+0xa4>
 800c87c:	f108 0602 	add.w	r6, r8, #2
 800c880:	3e01      	subs	r6, #1
 800c882:	4638      	mov	r0, r7
 800c884:	612e      	str	r6, [r5, #16]
 800c886:	4621      	mov	r1, r4
 800c888:	f7ff fd90 	bl	800c3ac <_Bfree>
 800c88c:	4628      	mov	r0, r5
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	f842 0f04 	str.w	r0, [r2, #4]!
 800c896:	3301      	adds	r3, #1
 800c898:	e7c5      	b.n	800c826 <__lshift+0x4a>
 800c89a:	3904      	subs	r1, #4
 800c89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8a4:	459c      	cmp	ip, r3
 800c8a6:	d8f9      	bhi.n	800c89c <__lshift+0xc0>
 800c8a8:	e7ea      	b.n	800c880 <__lshift+0xa4>
 800c8aa:	bf00      	nop
 800c8ac:	0800dbb3 	.word	0x0800dbb3
 800c8b0:	0800dc24 	.word	0x0800dc24

0800c8b4 <__mcmp>:
 800c8b4:	690a      	ldr	r2, [r1, #16]
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	6900      	ldr	r0, [r0, #16]
 800c8ba:	1a80      	subs	r0, r0, r2
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	d10e      	bne.n	800c8de <__mcmp+0x2a>
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	3114      	adds	r1, #20
 800c8c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8d4:	4295      	cmp	r5, r2
 800c8d6:	d003      	beq.n	800c8e0 <__mcmp+0x2c>
 800c8d8:	d205      	bcs.n	800c8e6 <__mcmp+0x32>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d3f3      	bcc.n	800c8cc <__mcmp+0x18>
 800c8e4:	e7fb      	b.n	800c8de <__mcmp+0x2a>
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e7f9      	b.n	800c8de <__mcmp+0x2a>
	...

0800c8ec <__mdiff>:
 800c8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	f7ff ffdb 	bl	800c8b4 <__mcmp>
 800c8fe:	1e05      	subs	r5, r0, #0
 800c900:	d112      	bne.n	800c928 <__mdiff+0x3c>
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff fd11 	bl	800c32c <_Balloc>
 800c90a:	4602      	mov	r2, r0
 800c90c:	b928      	cbnz	r0, 800c91a <__mdiff+0x2e>
 800c90e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca0c <__mdiff+0x120>)
 800c910:	f240 2137 	movw	r1, #567	@ 0x237
 800c914:	483e      	ldr	r0, [pc, #248]	@ (800ca10 <__mdiff+0x124>)
 800c916:	f7fe fb09 	bl	800af2c <__assert_func>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c920:	4610      	mov	r0, r2
 800c922:	b003      	add	sp, #12
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	bfbc      	itt	lt
 800c92a:	464b      	movlt	r3, r9
 800c92c:	46a1      	movlt	r9, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c934:	bfba      	itte	lt
 800c936:	461c      	movlt	r4, r3
 800c938:	2501      	movlt	r5, #1
 800c93a:	2500      	movge	r5, #0
 800c93c:	f7ff fcf6 	bl	800c32c <_Balloc>
 800c940:	4602      	mov	r2, r0
 800c942:	b918      	cbnz	r0, 800c94c <__mdiff+0x60>
 800c944:	4b31      	ldr	r3, [pc, #196]	@ (800ca0c <__mdiff+0x120>)
 800c946:	f240 2145 	movw	r1, #581	@ 0x245
 800c94a:	e7e3      	b.n	800c914 <__mdiff+0x28>
 800c94c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c950:	6926      	ldr	r6, [r4, #16]
 800c952:	60c5      	str	r5, [r0, #12]
 800c954:	f109 0310 	add.w	r3, r9, #16
 800c958:	f109 0514 	add.w	r5, r9, #20
 800c95c:	f104 0e14 	add.w	lr, r4, #20
 800c960:	f100 0b14 	add.w	fp, r0, #20
 800c964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	46d9      	mov	r9, fp
 800c970:	f04f 0c00 	mov.w	ip, #0
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c97a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	fa1f f38a 	uxth.w	r3, sl
 800c984:	4619      	mov	r1, r3
 800c986:	b283      	uxth	r3, r0
 800c988:	1acb      	subs	r3, r1, r3
 800c98a:	0c00      	lsrs	r0, r0, #16
 800c98c:	4463      	add	r3, ip
 800c98e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c996:	b29b      	uxth	r3, r3
 800c998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c99c:	4576      	cmp	r6, lr
 800c99e:	f849 3b04 	str.w	r3, [r9], #4
 800c9a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9a6:	d8e5      	bhi.n	800c974 <__mdiff+0x88>
 800c9a8:	1b33      	subs	r3, r6, r4
 800c9aa:	3b15      	subs	r3, #21
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	3415      	adds	r4, #21
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	bf38      	it	cc
 800c9b8:	2304      	movcc	r3, #4
 800c9ba:	441d      	add	r5, r3
 800c9bc:	445b      	add	r3, fp
 800c9be:	461e      	mov	r6, r3
 800c9c0:	462c      	mov	r4, r5
 800c9c2:	4544      	cmp	r4, r8
 800c9c4:	d30e      	bcc.n	800c9e4 <__mdiff+0xf8>
 800c9c6:	f108 0103 	add.w	r1, r8, #3
 800c9ca:	1b49      	subs	r1, r1, r5
 800c9cc:	f021 0103 	bic.w	r1, r1, #3
 800c9d0:	3d03      	subs	r5, #3
 800c9d2:	45a8      	cmp	r8, r5
 800c9d4:	bf38      	it	cc
 800c9d6:	2100      	movcc	r1, #0
 800c9d8:	440b      	add	r3, r1
 800c9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9de:	b191      	cbz	r1, 800ca06 <__mdiff+0x11a>
 800c9e0:	6117      	str	r7, [r2, #16]
 800c9e2:	e79d      	b.n	800c920 <__mdiff+0x34>
 800c9e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9e8:	46e6      	mov	lr, ip
 800c9ea:	0c08      	lsrs	r0, r1, #16
 800c9ec:	fa1c fc81 	uxtah	ip, ip, r1
 800c9f0:	4471      	add	r1, lr
 800c9f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9f6:	b289      	uxth	r1, r1
 800c9f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9fc:	f846 1b04 	str.w	r1, [r6], #4
 800ca00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca04:	e7dd      	b.n	800c9c2 <__mdiff+0xd6>
 800ca06:	3f01      	subs	r7, #1
 800ca08:	e7e7      	b.n	800c9da <__mdiff+0xee>
 800ca0a:	bf00      	nop
 800ca0c:	0800dbb3 	.word	0x0800dbb3
 800ca10:	0800dc24 	.word	0x0800dc24

0800ca14 <__ulp>:
 800ca14:	b082      	sub	sp, #8
 800ca16:	ed8d 0b00 	vstr	d0, [sp]
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca5c <__ulp+0x48>)
 800ca1e:	4013      	ands	r3, r2
 800ca20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dc08      	bgt.n	800ca3a <__ulp+0x26>
 800ca28:	425b      	negs	r3, r3
 800ca2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca32:	da04      	bge.n	800ca3e <__ulp+0x2a>
 800ca34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca38:	4113      	asrs	r3, r2
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	e008      	b.n	800ca50 <__ulp+0x3c>
 800ca3e:	f1a2 0314 	sub.w	r3, r2, #20
 800ca42:	2b1e      	cmp	r3, #30
 800ca44:	bfda      	itte	le
 800ca46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ca4a:	40da      	lsrle	r2, r3
 800ca4c:	2201      	movgt	r2, #1
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	ec41 0b10 	vmov	d0, r0, r1
 800ca58:	b002      	add	sp, #8
 800ca5a:	4770      	bx	lr
 800ca5c:	7ff00000 	.word	0x7ff00000

0800ca60 <__b2d>:
 800ca60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca64:	6906      	ldr	r6, [r0, #16]
 800ca66:	f100 0814 	add.w	r8, r0, #20
 800ca6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca6e:	1f37      	subs	r7, r6, #4
 800ca70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca74:	4610      	mov	r0, r2
 800ca76:	f7ff fd4b 	bl	800c510 <__hi0bits>
 800ca7a:	f1c0 0320 	rsb	r3, r0, #32
 800ca7e:	280a      	cmp	r0, #10
 800ca80:	600b      	str	r3, [r1, #0]
 800ca82:	491b      	ldr	r1, [pc, #108]	@ (800caf0 <__b2d+0x90>)
 800ca84:	dc15      	bgt.n	800cab2 <__b2d+0x52>
 800ca86:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca8a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca8e:	45b8      	cmp	r8, r7
 800ca90:	ea43 0501 	orr.w	r5, r3, r1
 800ca94:	bf34      	ite	cc
 800ca96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca9a:	2300      	movcs	r3, #0
 800ca9c:	3015      	adds	r0, #21
 800ca9e:	fa02 f000 	lsl.w	r0, r2, r0
 800caa2:	fa23 f30c 	lsr.w	r3, r3, ip
 800caa6:	4303      	orrs	r3, r0
 800caa8:	461c      	mov	r4, r3
 800caaa:	ec45 4b10 	vmov	d0, r4, r5
 800caae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab2:	45b8      	cmp	r8, r7
 800cab4:	bf3a      	itte	cc
 800cab6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800caba:	f1a6 0708 	subcc.w	r7, r6, #8
 800cabe:	2300      	movcs	r3, #0
 800cac0:	380b      	subs	r0, #11
 800cac2:	d012      	beq.n	800caea <__b2d+0x8a>
 800cac4:	f1c0 0120 	rsb	r1, r0, #32
 800cac8:	fa23 f401 	lsr.w	r4, r3, r1
 800cacc:	4082      	lsls	r2, r0
 800cace:	4322      	orrs	r2, r4
 800cad0:	4547      	cmp	r7, r8
 800cad2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cad6:	bf8c      	ite	hi
 800cad8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cadc:	2200      	movls	r2, #0
 800cade:	4083      	lsls	r3, r0
 800cae0:	40ca      	lsrs	r2, r1
 800cae2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cae6:	4313      	orrs	r3, r2
 800cae8:	e7de      	b.n	800caa8 <__b2d+0x48>
 800caea:	ea42 0501 	orr.w	r5, r2, r1
 800caee:	e7db      	b.n	800caa8 <__b2d+0x48>
 800caf0:	3ff00000 	.word	0x3ff00000

0800caf4 <__d2b>:
 800caf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	460f      	mov	r7, r1
 800cafa:	2101      	movs	r1, #1
 800cafc:	ec59 8b10 	vmov	r8, r9, d0
 800cb00:	4616      	mov	r6, r2
 800cb02:	f7ff fc13 	bl	800c32c <_Balloc>
 800cb06:	4604      	mov	r4, r0
 800cb08:	b930      	cbnz	r0, 800cb18 <__d2b+0x24>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b23      	ldr	r3, [pc, #140]	@ (800cb9c <__d2b+0xa8>)
 800cb0e:	4824      	ldr	r0, [pc, #144]	@ (800cba0 <__d2b+0xac>)
 800cb10:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb14:	f7fe fa0a 	bl	800af2c <__assert_func>
 800cb18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb20:	b10d      	cbz	r5, 800cb26 <__d2b+0x32>
 800cb22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f1b8 0300 	subs.w	r3, r8, #0
 800cb2c:	d023      	beq.n	800cb76 <__d2b+0x82>
 800cb2e:	4668      	mov	r0, sp
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	f7ff fd0c 	bl	800c54e <__lo0bits>
 800cb36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb3a:	b1d0      	cbz	r0, 800cb72 <__d2b+0x7e>
 800cb3c:	f1c0 0320 	rsb	r3, r0, #32
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	430b      	orrs	r3, r1
 800cb46:	40c2      	lsrs	r2, r0
 800cb48:	6163      	str	r3, [r4, #20]
 800cb4a:	9201      	str	r2, [sp, #4]
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf0c      	ite	eq
 800cb54:	2201      	moveq	r2, #1
 800cb56:	2202      	movne	r2, #2
 800cb58:	6122      	str	r2, [r4, #16]
 800cb5a:	b1a5      	cbz	r5, 800cb86 <__d2b+0x92>
 800cb5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb60:	4405      	add	r5, r0
 800cb62:	603d      	str	r5, [r7, #0]
 800cb64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb68:	6030      	str	r0, [r6, #0]
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb72:	6161      	str	r1, [r4, #20]
 800cb74:	e7ea      	b.n	800cb4c <__d2b+0x58>
 800cb76:	a801      	add	r0, sp, #4
 800cb78:	f7ff fce9 	bl	800c54e <__lo0bits>
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	6163      	str	r3, [r4, #20]
 800cb80:	3020      	adds	r0, #32
 800cb82:	2201      	movs	r2, #1
 800cb84:	e7e8      	b.n	800cb58 <__d2b+0x64>
 800cb86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb8e:	6038      	str	r0, [r7, #0]
 800cb90:	6918      	ldr	r0, [r3, #16]
 800cb92:	f7ff fcbd 	bl	800c510 <__hi0bits>
 800cb96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb9a:	e7e5      	b.n	800cb68 <__d2b+0x74>
 800cb9c:	0800dbb3 	.word	0x0800dbb3
 800cba0:	0800dc24 	.word	0x0800dc24

0800cba4 <__ratio>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	b085      	sub	sp, #20
 800cbaa:	e9cd 1000 	strd	r1, r0, [sp]
 800cbae:	a902      	add	r1, sp, #8
 800cbb0:	f7ff ff56 	bl	800ca60 <__b2d>
 800cbb4:	9800      	ldr	r0, [sp, #0]
 800cbb6:	a903      	add	r1, sp, #12
 800cbb8:	ec55 4b10 	vmov	r4, r5, d0
 800cbbc:	f7ff ff50 	bl	800ca60 <__b2d>
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	6919      	ldr	r1, [r3, #16]
 800cbc4:	9b00      	ldr	r3, [sp, #0]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	1ac9      	subs	r1, r1, r3
 800cbca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	ec5b ab10 	vmov	sl, fp, d0
 800cbd4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfce      	itee	gt
 800cbdc:	462a      	movgt	r2, r5
 800cbde:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbe2:	465a      	movle	r2, fp
 800cbe4:	462f      	mov	r7, r5
 800cbe6:	46d9      	mov	r9, fp
 800cbe8:	bfcc      	ite	gt
 800cbea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cbf2:	464b      	mov	r3, r9
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	f7f3 fe2f 	bl	800085c <__aeabi_ddiv>
 800cbfe:	ec41 0b10 	vmov	d0, r0, r1
 800cc02:	b005      	add	sp, #20
 800cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc08 <__copybits>:
 800cc08:	3901      	subs	r1, #1
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	1149      	asrs	r1, r1, #5
 800cc0e:	6914      	ldr	r4, [r2, #16]
 800cc10:	3101      	adds	r1, #1
 800cc12:	f102 0314 	add.w	r3, r2, #20
 800cc16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc1e:	1f05      	subs	r5, r0, #4
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	d30c      	bcc.n	800cc3e <__copybits+0x36>
 800cc24:	1aa3      	subs	r3, r4, r2
 800cc26:	3b11      	subs	r3, #17
 800cc28:	f023 0303 	bic.w	r3, r3, #3
 800cc2c:	3211      	adds	r2, #17
 800cc2e:	42a2      	cmp	r2, r4
 800cc30:	bf88      	it	hi
 800cc32:	2300      	movhi	r3, #0
 800cc34:	4418      	add	r0, r3
 800cc36:	2300      	movs	r3, #0
 800cc38:	4288      	cmp	r0, r1
 800cc3a:	d305      	bcc.n	800cc48 <__copybits+0x40>
 800cc3c:	bd70      	pop	{r4, r5, r6, pc}
 800cc3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc42:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc46:	e7eb      	b.n	800cc20 <__copybits+0x18>
 800cc48:	f840 3b04 	str.w	r3, [r0], #4
 800cc4c:	e7f4      	b.n	800cc38 <__copybits+0x30>

0800cc4e <__any_on>:
 800cc4e:	f100 0214 	add.w	r2, r0, #20
 800cc52:	6900      	ldr	r0, [r0, #16]
 800cc54:	114b      	asrs	r3, r1, #5
 800cc56:	4298      	cmp	r0, r3
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	db11      	blt.n	800cc80 <__any_on+0x32>
 800cc5c:	dd0a      	ble.n	800cc74 <__any_on+0x26>
 800cc5e:	f011 011f 	ands.w	r1, r1, #31
 800cc62:	d007      	beq.n	800cc74 <__any_on+0x26>
 800cc64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc68:	fa24 f001 	lsr.w	r0, r4, r1
 800cc6c:	fa00 f101 	lsl.w	r1, r0, r1
 800cc70:	428c      	cmp	r4, r1
 800cc72:	d10b      	bne.n	800cc8c <__any_on+0x3e>
 800cc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d803      	bhi.n	800cc84 <__any_on+0x36>
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	bd10      	pop	{r4, pc}
 800cc80:	4603      	mov	r3, r0
 800cc82:	e7f7      	b.n	800cc74 <__any_on+0x26>
 800cc84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	d0f5      	beq.n	800cc78 <__any_on+0x2a>
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	e7f6      	b.n	800cc7e <__any_on+0x30>

0800cc90 <_strtol_l.constprop.0>:
 800cc90:	2b24      	cmp	r3, #36	@ 0x24
 800cc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc96:	4686      	mov	lr, r0
 800cc98:	4690      	mov	r8, r2
 800cc9a:	d801      	bhi.n	800cca0 <_strtol_l.constprop.0+0x10>
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d106      	bne.n	800ccae <_strtol_l.constprop.0+0x1e>
 800cca0:	f7fe f8fa 	bl	800ae98 <__errno>
 800cca4:	2316      	movs	r3, #22
 800cca6:	6003      	str	r3, [r0, #0]
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccae:	4834      	ldr	r0, [pc, #208]	@ (800cd80 <_strtol_l.constprop.0+0xf0>)
 800ccb0:	460d      	mov	r5, r1
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccb8:	5d06      	ldrb	r6, [r0, r4]
 800ccba:	f016 0608 	ands.w	r6, r6, #8
 800ccbe:	d1f8      	bne.n	800ccb2 <_strtol_l.constprop.0+0x22>
 800ccc0:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccc2:	d12d      	bne.n	800cd20 <_strtol_l.constprop.0+0x90>
 800ccc4:	782c      	ldrb	r4, [r5, #0]
 800ccc6:	2601      	movs	r6, #1
 800ccc8:	1c95      	adds	r5, r2, #2
 800ccca:	f033 0210 	bics.w	r2, r3, #16
 800ccce:	d109      	bne.n	800cce4 <_strtol_l.constprop.0+0x54>
 800ccd0:	2c30      	cmp	r4, #48	@ 0x30
 800ccd2:	d12a      	bne.n	800cd2a <_strtol_l.constprop.0+0x9a>
 800ccd4:	782a      	ldrb	r2, [r5, #0]
 800ccd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccda:	2a58      	cmp	r2, #88	@ 0x58
 800ccdc:	d125      	bne.n	800cd2a <_strtol_l.constprop.0+0x9a>
 800ccde:	786c      	ldrb	r4, [r5, #1]
 800cce0:	2310      	movs	r3, #16
 800cce2:	3502      	adds	r5, #2
 800cce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ccec:	2200      	movs	r2, #0
 800ccee:	fbbc f9f3 	udiv	r9, ip, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	fb03 ca19 	mls	sl, r3, r9, ip
 800ccf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ccfc:	2f09      	cmp	r7, #9
 800ccfe:	d81b      	bhi.n	800cd38 <_strtol_l.constprop.0+0xa8>
 800cd00:	463c      	mov	r4, r7
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	dd27      	ble.n	800cd56 <_strtol_l.constprop.0+0xc6>
 800cd06:	1c57      	adds	r7, r2, #1
 800cd08:	d007      	beq.n	800cd1a <_strtol_l.constprop.0+0x8a>
 800cd0a:	4581      	cmp	r9, r0
 800cd0c:	d320      	bcc.n	800cd50 <_strtol_l.constprop.0+0xc0>
 800cd0e:	d101      	bne.n	800cd14 <_strtol_l.constprop.0+0x84>
 800cd10:	45a2      	cmp	sl, r4
 800cd12:	db1d      	blt.n	800cd50 <_strtol_l.constprop.0+0xc0>
 800cd14:	fb00 4003 	mla	r0, r0, r3, r4
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd1e:	e7eb      	b.n	800ccf8 <_strtol_l.constprop.0+0x68>
 800cd20:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd22:	bf04      	itt	eq
 800cd24:	782c      	ldrbeq	r4, [r5, #0]
 800cd26:	1c95      	addeq	r5, r2, #2
 800cd28:	e7cf      	b.n	800ccca <_strtol_l.constprop.0+0x3a>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1da      	bne.n	800cce4 <_strtol_l.constprop.0+0x54>
 800cd2e:	2c30      	cmp	r4, #48	@ 0x30
 800cd30:	bf0c      	ite	eq
 800cd32:	2308      	moveq	r3, #8
 800cd34:	230a      	movne	r3, #10
 800cd36:	e7d5      	b.n	800cce4 <_strtol_l.constprop.0+0x54>
 800cd38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd3c:	2f19      	cmp	r7, #25
 800cd3e:	d801      	bhi.n	800cd44 <_strtol_l.constprop.0+0xb4>
 800cd40:	3c37      	subs	r4, #55	@ 0x37
 800cd42:	e7de      	b.n	800cd02 <_strtol_l.constprop.0+0x72>
 800cd44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd48:	2f19      	cmp	r7, #25
 800cd4a:	d804      	bhi.n	800cd56 <_strtol_l.constprop.0+0xc6>
 800cd4c:	3c57      	subs	r4, #87	@ 0x57
 800cd4e:	e7d8      	b.n	800cd02 <_strtol_l.constprop.0+0x72>
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	e7e1      	b.n	800cd1a <_strtol_l.constprop.0+0x8a>
 800cd56:	1c53      	adds	r3, r2, #1
 800cd58:	d108      	bne.n	800cd6c <_strtol_l.constprop.0+0xdc>
 800cd5a:	2322      	movs	r3, #34	@ 0x22
 800cd5c:	f8ce 3000 	str.w	r3, [lr]
 800cd60:	4660      	mov	r0, ip
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	d0a0      	beq.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd68:	1e69      	subs	r1, r5, #1
 800cd6a:	e006      	b.n	800cd7a <_strtol_l.constprop.0+0xea>
 800cd6c:	b106      	cbz	r6, 800cd70 <_strtol_l.constprop.0+0xe0>
 800cd6e:	4240      	negs	r0, r0
 800cd70:	f1b8 0f00 	cmp.w	r8, #0
 800cd74:	d099      	beq.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd76:	2a00      	cmp	r2, #0
 800cd78:	d1f6      	bne.n	800cd68 <_strtol_l.constprop.0+0xd8>
 800cd7a:	f8c8 1000 	str.w	r1, [r8]
 800cd7e:	e794      	b.n	800ccaa <_strtol_l.constprop.0+0x1a>
 800cd80:	0800dd81 	.word	0x0800dd81

0800cd84 <_strtol_r>:
 800cd84:	f7ff bf84 	b.w	800cc90 <_strtol_l.constprop.0>

0800cd88 <__ascii_wctomb>:
 800cd88:	4603      	mov	r3, r0
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	b141      	cbz	r1, 800cda0 <__ascii_wctomb+0x18>
 800cd8e:	2aff      	cmp	r2, #255	@ 0xff
 800cd90:	d904      	bls.n	800cd9c <__ascii_wctomb+0x14>
 800cd92:	228a      	movs	r2, #138	@ 0x8a
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9a:	4770      	bx	lr
 800cd9c:	700a      	strb	r2, [r1, #0]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	4770      	bx	lr

0800cda2 <__ssputs_r>:
 800cda2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda6:	688e      	ldr	r6, [r1, #8]
 800cda8:	461f      	mov	r7, r3
 800cdaa:	42be      	cmp	r6, r7
 800cdac:	680b      	ldr	r3, [r1, #0]
 800cdae:	4682      	mov	sl, r0
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	4690      	mov	r8, r2
 800cdb4:	d82d      	bhi.n	800ce12 <__ssputs_r+0x70>
 800cdb6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cdbe:	d026      	beq.n	800ce0e <__ssputs_r+0x6c>
 800cdc0:	6965      	ldr	r5, [r4, #20]
 800cdc2:	6909      	ldr	r1, [r1, #16]
 800cdc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdc8:	eba3 0901 	sub.w	r9, r3, r1
 800cdcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd0:	1c7b      	adds	r3, r7, #1
 800cdd2:	444b      	add	r3, r9
 800cdd4:	106d      	asrs	r5, r5, #1
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	bf38      	it	cc
 800cdda:	461d      	movcc	r5, r3
 800cddc:	0553      	lsls	r3, r2, #21
 800cdde:	d527      	bpl.n	800ce30 <__ssputs_r+0x8e>
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7fb ffdd 	bl	8008da0 <_malloc_r>
 800cde6:	4606      	mov	r6, r0
 800cde8:	b360      	cbz	r0, 800ce44 <__ssputs_r+0xa2>
 800cdea:	6921      	ldr	r1, [r4, #16]
 800cdec:	464a      	mov	r2, r9
 800cdee:	f7fe f880 	bl	800aef2 <memcpy>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	6126      	str	r6, [r4, #16]
 800ce00:	6165      	str	r5, [r4, #20]
 800ce02:	444e      	add	r6, r9
 800ce04:	eba5 0509 	sub.w	r5, r5, r9
 800ce08:	6026      	str	r6, [r4, #0]
 800ce0a:	60a5      	str	r5, [r4, #8]
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	42be      	cmp	r6, r7
 800ce10:	d900      	bls.n	800ce14 <__ssputs_r+0x72>
 800ce12:	463e      	mov	r6, r7
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	4632      	mov	r2, r6
 800ce18:	4641      	mov	r1, r8
 800ce1a:	f000 fb7b 	bl	800d514 <memmove>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	1b9b      	subs	r3, r3, r6
 800ce22:	60a3      	str	r3, [r4, #8]
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	4433      	add	r3, r6
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce30:	462a      	mov	r2, r5
 800ce32:	f000 fbc6 	bl	800d5c2 <_realloc_r>
 800ce36:	4606      	mov	r6, r0
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1e0      	bne.n	800cdfe <__ssputs_r+0x5c>
 800ce3c:	6921      	ldr	r1, [r4, #16]
 800ce3e:	4650      	mov	r0, sl
 800ce40:	f7fe fede 	bl	800bc00 <_free_r>
 800ce44:	230c      	movs	r3, #12
 800ce46:	f8ca 3000 	str.w	r3, [sl]
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	f04f 30ff 	mov.w	r0, #4294967295
 800ce56:	e7e9      	b.n	800ce2c <__ssputs_r+0x8a>

0800ce58 <_svfiprintf_r>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4698      	mov	r8, r3
 800ce5e:	898b      	ldrh	r3, [r1, #12]
 800ce60:	061b      	lsls	r3, r3, #24
 800ce62:	b09d      	sub	sp, #116	@ 0x74
 800ce64:	4607      	mov	r7, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	d510      	bpl.n	800ce8e <_svfiprintf_r+0x36>
 800ce6c:	690b      	ldr	r3, [r1, #16]
 800ce6e:	b973      	cbnz	r3, 800ce8e <_svfiprintf_r+0x36>
 800ce70:	2140      	movs	r1, #64	@ 0x40
 800ce72:	f7fb ff95 	bl	8008da0 <_malloc_r>
 800ce76:	6028      	str	r0, [r5, #0]
 800ce78:	6128      	str	r0, [r5, #16]
 800ce7a:	b930      	cbnz	r0, 800ce8a <_svfiprintf_r+0x32>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	b01d      	add	sp, #116	@ 0x74
 800ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8a:	2340      	movs	r3, #64	@ 0x40
 800ce8c:	616b      	str	r3, [r5, #20]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce92:	2320      	movs	r3, #32
 800ce94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce9c:	2330      	movs	r3, #48	@ 0x30
 800ce9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d03c <_svfiprintf_r+0x1e4>
 800cea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cea6:	f04f 0901 	mov.w	r9, #1
 800ceaa:	4623      	mov	r3, r4
 800ceac:	469a      	mov	sl, r3
 800ceae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb2:	b10a      	cbz	r2, 800ceb8 <_svfiprintf_r+0x60>
 800ceb4:	2a25      	cmp	r2, #37	@ 0x25
 800ceb6:	d1f9      	bne.n	800ceac <_svfiprintf_r+0x54>
 800ceb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cebc:	d00b      	beq.n	800ced6 <_svfiprintf_r+0x7e>
 800cebe:	465b      	mov	r3, fp
 800cec0:	4622      	mov	r2, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	4638      	mov	r0, r7
 800cec6:	f7ff ff6c 	bl	800cda2 <__ssputs_r>
 800ceca:	3001      	adds	r0, #1
 800cecc:	f000 80a7 	beq.w	800d01e <_svfiprintf_r+0x1c6>
 800ced0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ced2:	445a      	add	r2, fp
 800ced4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ced6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 809f 	beq.w	800d01e <_svfiprintf_r+0x1c6>
 800cee0:	2300      	movs	r3, #0
 800cee2:	f04f 32ff 	mov.w	r2, #4294967295
 800cee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceea:	f10a 0a01 	add.w	sl, sl, #1
 800ceee:	9304      	str	r3, [sp, #16]
 800cef0:	9307      	str	r3, [sp, #28]
 800cef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cef6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cef8:	4654      	mov	r4, sl
 800cefa:	2205      	movs	r2, #5
 800cefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf00:	484e      	ldr	r0, [pc, #312]	@ (800d03c <_svfiprintf_r+0x1e4>)
 800cf02:	f7f3 f96d 	bl	80001e0 <memchr>
 800cf06:	9a04      	ldr	r2, [sp, #16]
 800cf08:	b9d8      	cbnz	r0, 800cf42 <_svfiprintf_r+0xea>
 800cf0a:	06d0      	lsls	r0, r2, #27
 800cf0c:	bf44      	itt	mi
 800cf0e:	2320      	movmi	r3, #32
 800cf10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf14:	0711      	lsls	r1, r2, #28
 800cf16:	bf44      	itt	mi
 800cf18:	232b      	movmi	r3, #43	@ 0x2b
 800cf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf24:	d015      	beq.n	800cf52 <_svfiprintf_r+0xfa>
 800cf26:	9a07      	ldr	r2, [sp, #28]
 800cf28:	4654      	mov	r4, sl
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	f04f 0c0a 	mov.w	ip, #10
 800cf30:	4621      	mov	r1, r4
 800cf32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf36:	3b30      	subs	r3, #48	@ 0x30
 800cf38:	2b09      	cmp	r3, #9
 800cf3a:	d94b      	bls.n	800cfd4 <_svfiprintf_r+0x17c>
 800cf3c:	b1b0      	cbz	r0, 800cf6c <_svfiprintf_r+0x114>
 800cf3e:	9207      	str	r2, [sp, #28]
 800cf40:	e014      	b.n	800cf6c <_svfiprintf_r+0x114>
 800cf42:	eba0 0308 	sub.w	r3, r0, r8
 800cf46:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	46a2      	mov	sl, r4
 800cf50:	e7d2      	b.n	800cef8 <_svfiprintf_r+0xa0>
 800cf52:	9b03      	ldr	r3, [sp, #12]
 800cf54:	1d19      	adds	r1, r3, #4
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	9103      	str	r1, [sp, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	bfbb      	ittet	lt
 800cf5e:	425b      	neglt	r3, r3
 800cf60:	f042 0202 	orrlt.w	r2, r2, #2
 800cf64:	9307      	strge	r3, [sp, #28]
 800cf66:	9307      	strlt	r3, [sp, #28]
 800cf68:	bfb8      	it	lt
 800cf6a:	9204      	strlt	r2, [sp, #16]
 800cf6c:	7823      	ldrb	r3, [r4, #0]
 800cf6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf70:	d10a      	bne.n	800cf88 <_svfiprintf_r+0x130>
 800cf72:	7863      	ldrb	r3, [r4, #1]
 800cf74:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf76:	d132      	bne.n	800cfde <_svfiprintf_r+0x186>
 800cf78:	9b03      	ldr	r3, [sp, #12]
 800cf7a:	1d1a      	adds	r2, r3, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	9203      	str	r2, [sp, #12]
 800cf80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf84:	3402      	adds	r4, #2
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d04c <_svfiprintf_r+0x1f4>
 800cf8c:	7821      	ldrb	r1, [r4, #0]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	4650      	mov	r0, sl
 800cf92:	f7f3 f925 	bl	80001e0 <memchr>
 800cf96:	b138      	cbz	r0, 800cfa8 <_svfiprintf_r+0x150>
 800cf98:	9b04      	ldr	r3, [sp, #16]
 800cf9a:	eba0 000a 	sub.w	r0, r0, sl
 800cf9e:	2240      	movs	r2, #64	@ 0x40
 800cfa0:	4082      	lsls	r2, r0
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfac:	4824      	ldr	r0, [pc, #144]	@ (800d040 <_svfiprintf_r+0x1e8>)
 800cfae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfb2:	2206      	movs	r2, #6
 800cfb4:	f7f3 f914 	bl	80001e0 <memchr>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d036      	beq.n	800d02a <_svfiprintf_r+0x1d2>
 800cfbc:	4b21      	ldr	r3, [pc, #132]	@ (800d044 <_svfiprintf_r+0x1ec>)
 800cfbe:	bb1b      	cbnz	r3, 800d008 <_svfiprintf_r+0x1b0>
 800cfc0:	9b03      	ldr	r3, [sp, #12]
 800cfc2:	3307      	adds	r3, #7
 800cfc4:	f023 0307 	bic.w	r3, r3, #7
 800cfc8:	3308      	adds	r3, #8
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfce:	4433      	add	r3, r6
 800cfd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd2:	e76a      	b.n	800ceaa <_svfiprintf_r+0x52>
 800cfd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfd8:	460c      	mov	r4, r1
 800cfda:	2001      	movs	r0, #1
 800cfdc:	e7a8      	b.n	800cf30 <_svfiprintf_r+0xd8>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	3401      	adds	r4, #1
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f04f 0c0a 	mov.w	ip, #10
 800cfea:	4620      	mov	r0, r4
 800cfec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff0:	3a30      	subs	r2, #48	@ 0x30
 800cff2:	2a09      	cmp	r2, #9
 800cff4:	d903      	bls.n	800cffe <_svfiprintf_r+0x1a6>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0c6      	beq.n	800cf88 <_svfiprintf_r+0x130>
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	e7c4      	b.n	800cf88 <_svfiprintf_r+0x130>
 800cffe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d002:	4604      	mov	r4, r0
 800d004:	2301      	movs	r3, #1
 800d006:	e7f0      	b.n	800cfea <_svfiprintf_r+0x192>
 800d008:	ab03      	add	r3, sp, #12
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	462a      	mov	r2, r5
 800d00e:	4b0e      	ldr	r3, [pc, #56]	@ (800d048 <_svfiprintf_r+0x1f0>)
 800d010:	a904      	add	r1, sp, #16
 800d012:	4638      	mov	r0, r7
 800d014:	f7fc fe5e 	bl	8009cd4 <_printf_float>
 800d018:	1c42      	adds	r2, r0, #1
 800d01a:	4606      	mov	r6, r0
 800d01c:	d1d6      	bne.n	800cfcc <_svfiprintf_r+0x174>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	065b      	lsls	r3, r3, #25
 800d022:	f53f af2d 	bmi.w	800ce80 <_svfiprintf_r+0x28>
 800d026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d028:	e72c      	b.n	800ce84 <_svfiprintf_r+0x2c>
 800d02a:	ab03      	add	r3, sp, #12
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	462a      	mov	r2, r5
 800d030:	4b05      	ldr	r3, [pc, #20]	@ (800d048 <_svfiprintf_r+0x1f0>)
 800d032:	a904      	add	r1, sp, #16
 800d034:	4638      	mov	r0, r7
 800d036:	f7fd f8e5 	bl	800a204 <_printf_i>
 800d03a:	e7ed      	b.n	800d018 <_svfiprintf_r+0x1c0>
 800d03c:	0800de81 	.word	0x0800de81
 800d040:	0800de8b 	.word	0x0800de8b
 800d044:	08009cd5 	.word	0x08009cd5
 800d048:	0800cda3 	.word	0x0800cda3
 800d04c:	0800de87 	.word	0x0800de87

0800d050 <__sfputc_r>:
 800d050:	6893      	ldr	r3, [r2, #8]
 800d052:	3b01      	subs	r3, #1
 800d054:	2b00      	cmp	r3, #0
 800d056:	b410      	push	{r4}
 800d058:	6093      	str	r3, [r2, #8]
 800d05a:	da08      	bge.n	800d06e <__sfputc_r+0x1e>
 800d05c:	6994      	ldr	r4, [r2, #24]
 800d05e:	42a3      	cmp	r3, r4
 800d060:	db01      	blt.n	800d066 <__sfputc_r+0x16>
 800d062:	290a      	cmp	r1, #10
 800d064:	d103      	bne.n	800d06e <__sfputc_r+0x1e>
 800d066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d06a:	f7fd bd94 	b.w	800ab96 <__swbuf_r>
 800d06e:	6813      	ldr	r3, [r2, #0]
 800d070:	1c58      	adds	r0, r3, #1
 800d072:	6010      	str	r0, [r2, #0]
 800d074:	7019      	strb	r1, [r3, #0]
 800d076:	4608      	mov	r0, r1
 800d078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <__sfputs_r>:
 800d07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d080:	4606      	mov	r6, r0
 800d082:	460f      	mov	r7, r1
 800d084:	4614      	mov	r4, r2
 800d086:	18d5      	adds	r5, r2, r3
 800d088:	42ac      	cmp	r4, r5
 800d08a:	d101      	bne.n	800d090 <__sfputs_r+0x12>
 800d08c:	2000      	movs	r0, #0
 800d08e:	e007      	b.n	800d0a0 <__sfputs_r+0x22>
 800d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d094:	463a      	mov	r2, r7
 800d096:	4630      	mov	r0, r6
 800d098:	f7ff ffda 	bl	800d050 <__sfputc_r>
 800d09c:	1c43      	adds	r3, r0, #1
 800d09e:	d1f3      	bne.n	800d088 <__sfputs_r+0xa>
 800d0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0a4 <_vfiprintf_r>:
 800d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	b09d      	sub	sp, #116	@ 0x74
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	4698      	mov	r8, r3
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	b118      	cbz	r0, 800d0bc <_vfiprintf_r+0x18>
 800d0b4:	6a03      	ldr	r3, [r0, #32]
 800d0b6:	b90b      	cbnz	r3, 800d0bc <_vfiprintf_r+0x18>
 800d0b8:	f7fd fc64 	bl	800a984 <__sinit>
 800d0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0be:	07d9      	lsls	r1, r3, #31
 800d0c0:	d405      	bmi.n	800d0ce <_vfiprintf_r+0x2a>
 800d0c2:	89ab      	ldrh	r3, [r5, #12]
 800d0c4:	059a      	lsls	r2, r3, #22
 800d0c6:	d402      	bmi.n	800d0ce <_vfiprintf_r+0x2a>
 800d0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ca:	f7fd ff10 	bl	800aeee <__retarget_lock_acquire_recursive>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	071b      	lsls	r3, r3, #28
 800d0d2:	d501      	bpl.n	800d0d8 <_vfiprintf_r+0x34>
 800d0d4:	692b      	ldr	r3, [r5, #16]
 800d0d6:	b99b      	cbnz	r3, 800d100 <_vfiprintf_r+0x5c>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f7fd fd9a 	bl	800ac14 <__swsetup_r>
 800d0e0:	b170      	cbz	r0, 800d100 <_vfiprintf_r+0x5c>
 800d0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e4:	07dc      	lsls	r4, r3, #31
 800d0e6:	d504      	bpl.n	800d0f2 <_vfiprintf_r+0x4e>
 800d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ec:	b01d      	add	sp, #116	@ 0x74
 800d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f2:	89ab      	ldrh	r3, [r5, #12]
 800d0f4:	0598      	lsls	r0, r3, #22
 800d0f6:	d4f7      	bmi.n	800d0e8 <_vfiprintf_r+0x44>
 800d0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0fa:	f7fd fef9 	bl	800aef0 <__retarget_lock_release_recursive>
 800d0fe:	e7f3      	b.n	800d0e8 <_vfiprintf_r+0x44>
 800d100:	2300      	movs	r3, #0
 800d102:	9309      	str	r3, [sp, #36]	@ 0x24
 800d104:	2320      	movs	r3, #32
 800d106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d10e:	2330      	movs	r3, #48	@ 0x30
 800d110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2c0 <_vfiprintf_r+0x21c>
 800d114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d118:	f04f 0901 	mov.w	r9, #1
 800d11c:	4623      	mov	r3, r4
 800d11e:	469a      	mov	sl, r3
 800d120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d124:	b10a      	cbz	r2, 800d12a <_vfiprintf_r+0x86>
 800d126:	2a25      	cmp	r2, #37	@ 0x25
 800d128:	d1f9      	bne.n	800d11e <_vfiprintf_r+0x7a>
 800d12a:	ebba 0b04 	subs.w	fp, sl, r4
 800d12e:	d00b      	beq.n	800d148 <_vfiprintf_r+0xa4>
 800d130:	465b      	mov	r3, fp
 800d132:	4622      	mov	r2, r4
 800d134:	4629      	mov	r1, r5
 800d136:	4630      	mov	r0, r6
 800d138:	f7ff ffa1 	bl	800d07e <__sfputs_r>
 800d13c:	3001      	adds	r0, #1
 800d13e:	f000 80a7 	beq.w	800d290 <_vfiprintf_r+0x1ec>
 800d142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d144:	445a      	add	r2, fp
 800d146:	9209      	str	r2, [sp, #36]	@ 0x24
 800d148:	f89a 3000 	ldrb.w	r3, [sl]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 809f 	beq.w	800d290 <_vfiprintf_r+0x1ec>
 800d152:	2300      	movs	r3, #0
 800d154:	f04f 32ff 	mov.w	r2, #4294967295
 800d158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d15c:	f10a 0a01 	add.w	sl, sl, #1
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	9307      	str	r3, [sp, #28]
 800d164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d168:	931a      	str	r3, [sp, #104]	@ 0x68
 800d16a:	4654      	mov	r4, sl
 800d16c:	2205      	movs	r2, #5
 800d16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d172:	4853      	ldr	r0, [pc, #332]	@ (800d2c0 <_vfiprintf_r+0x21c>)
 800d174:	f7f3 f834 	bl	80001e0 <memchr>
 800d178:	9a04      	ldr	r2, [sp, #16]
 800d17a:	b9d8      	cbnz	r0, 800d1b4 <_vfiprintf_r+0x110>
 800d17c:	06d1      	lsls	r1, r2, #27
 800d17e:	bf44      	itt	mi
 800d180:	2320      	movmi	r3, #32
 800d182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d186:	0713      	lsls	r3, r2, #28
 800d188:	bf44      	itt	mi
 800d18a:	232b      	movmi	r3, #43	@ 0x2b
 800d18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d190:	f89a 3000 	ldrb.w	r3, [sl]
 800d194:	2b2a      	cmp	r3, #42	@ 0x2a
 800d196:	d015      	beq.n	800d1c4 <_vfiprintf_r+0x120>
 800d198:	9a07      	ldr	r2, [sp, #28]
 800d19a:	4654      	mov	r4, sl
 800d19c:	2000      	movs	r0, #0
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a8:	3b30      	subs	r3, #48	@ 0x30
 800d1aa:	2b09      	cmp	r3, #9
 800d1ac:	d94b      	bls.n	800d246 <_vfiprintf_r+0x1a2>
 800d1ae:	b1b0      	cbz	r0, 800d1de <_vfiprintf_r+0x13a>
 800d1b0:	9207      	str	r2, [sp, #28]
 800d1b2:	e014      	b.n	800d1de <_vfiprintf_r+0x13a>
 800d1b4:	eba0 0308 	sub.w	r3, r0, r8
 800d1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	9304      	str	r3, [sp, #16]
 800d1c0:	46a2      	mov	sl, r4
 800d1c2:	e7d2      	b.n	800d16a <_vfiprintf_r+0xc6>
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	1d19      	adds	r1, r3, #4
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	9103      	str	r1, [sp, #12]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bfbb      	ittet	lt
 800d1d0:	425b      	neglt	r3, r3
 800d1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d6:	9307      	strge	r3, [sp, #28]
 800d1d8:	9307      	strlt	r3, [sp, #28]
 800d1da:	bfb8      	it	lt
 800d1dc:	9204      	strlt	r2, [sp, #16]
 800d1de:	7823      	ldrb	r3, [r4, #0]
 800d1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1e2:	d10a      	bne.n	800d1fa <_vfiprintf_r+0x156>
 800d1e4:	7863      	ldrb	r3, [r4, #1]
 800d1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e8:	d132      	bne.n	800d250 <_vfiprintf_r+0x1ac>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	1d1a      	adds	r2, r3, #4
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	9203      	str	r2, [sp, #12]
 800d1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1f6:	3402      	adds	r4, #2
 800d1f8:	9305      	str	r3, [sp, #20]
 800d1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2d0 <_vfiprintf_r+0x22c>
 800d1fe:	7821      	ldrb	r1, [r4, #0]
 800d200:	2203      	movs	r2, #3
 800d202:	4650      	mov	r0, sl
 800d204:	f7f2 ffec 	bl	80001e0 <memchr>
 800d208:	b138      	cbz	r0, 800d21a <_vfiprintf_r+0x176>
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	eba0 000a 	sub.w	r0, r0, sl
 800d210:	2240      	movs	r2, #64	@ 0x40
 800d212:	4082      	lsls	r2, r0
 800d214:	4313      	orrs	r3, r2
 800d216:	3401      	adds	r4, #1
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21e:	4829      	ldr	r0, [pc, #164]	@ (800d2c4 <_vfiprintf_r+0x220>)
 800d220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d224:	2206      	movs	r2, #6
 800d226:	f7f2 ffdb 	bl	80001e0 <memchr>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d03f      	beq.n	800d2ae <_vfiprintf_r+0x20a>
 800d22e:	4b26      	ldr	r3, [pc, #152]	@ (800d2c8 <_vfiprintf_r+0x224>)
 800d230:	bb1b      	cbnz	r3, 800d27a <_vfiprintf_r+0x1d6>
 800d232:	9b03      	ldr	r3, [sp, #12]
 800d234:	3307      	adds	r3, #7
 800d236:	f023 0307 	bic.w	r3, r3, #7
 800d23a:	3308      	adds	r3, #8
 800d23c:	9303      	str	r3, [sp, #12]
 800d23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d240:	443b      	add	r3, r7
 800d242:	9309      	str	r3, [sp, #36]	@ 0x24
 800d244:	e76a      	b.n	800d11c <_vfiprintf_r+0x78>
 800d246:	fb0c 3202 	mla	r2, ip, r2, r3
 800d24a:	460c      	mov	r4, r1
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7a8      	b.n	800d1a2 <_vfiprintf_r+0xfe>
 800d250:	2300      	movs	r3, #0
 800d252:	3401      	adds	r4, #1
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	4619      	mov	r1, r3
 800d258:	f04f 0c0a 	mov.w	ip, #10
 800d25c:	4620      	mov	r0, r4
 800d25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d262:	3a30      	subs	r2, #48	@ 0x30
 800d264:	2a09      	cmp	r2, #9
 800d266:	d903      	bls.n	800d270 <_vfiprintf_r+0x1cc>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0c6      	beq.n	800d1fa <_vfiprintf_r+0x156>
 800d26c:	9105      	str	r1, [sp, #20]
 800d26e:	e7c4      	b.n	800d1fa <_vfiprintf_r+0x156>
 800d270:	fb0c 2101 	mla	r1, ip, r1, r2
 800d274:	4604      	mov	r4, r0
 800d276:	2301      	movs	r3, #1
 800d278:	e7f0      	b.n	800d25c <_vfiprintf_r+0x1b8>
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	462a      	mov	r2, r5
 800d280:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <_vfiprintf_r+0x228>)
 800d282:	a904      	add	r1, sp, #16
 800d284:	4630      	mov	r0, r6
 800d286:	f7fc fd25 	bl	8009cd4 <_printf_float>
 800d28a:	4607      	mov	r7, r0
 800d28c:	1c78      	adds	r0, r7, #1
 800d28e:	d1d6      	bne.n	800d23e <_vfiprintf_r+0x19a>
 800d290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d292:	07d9      	lsls	r1, r3, #31
 800d294:	d405      	bmi.n	800d2a2 <_vfiprintf_r+0x1fe>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	059a      	lsls	r2, r3, #22
 800d29a:	d402      	bmi.n	800d2a2 <_vfiprintf_r+0x1fe>
 800d29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29e:	f7fd fe27 	bl	800aef0 <__retarget_lock_release_recursive>
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	065b      	lsls	r3, r3, #25
 800d2a6:	f53f af1f 	bmi.w	800d0e8 <_vfiprintf_r+0x44>
 800d2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ac:	e71e      	b.n	800d0ec <_vfiprintf_r+0x48>
 800d2ae:	ab03      	add	r3, sp, #12
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4b05      	ldr	r3, [pc, #20]	@ (800d2cc <_vfiprintf_r+0x228>)
 800d2b6:	a904      	add	r1, sp, #16
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f7fc ffa3 	bl	800a204 <_printf_i>
 800d2be:	e7e4      	b.n	800d28a <_vfiprintf_r+0x1e6>
 800d2c0:	0800de81 	.word	0x0800de81
 800d2c4:	0800de8b 	.word	0x0800de8b
 800d2c8:	08009cd5 	.word	0x08009cd5
 800d2cc:	0800d07f 	.word	0x0800d07f
 800d2d0:	0800de87 	.word	0x0800de87

0800d2d4 <__sflush_r>:
 800d2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	0716      	lsls	r6, r2, #28
 800d2de:	4605      	mov	r5, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	d454      	bmi.n	800d38e <__sflush_r+0xba>
 800d2e4:	684b      	ldr	r3, [r1, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dc02      	bgt.n	800d2f0 <__sflush_r+0x1c>
 800d2ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dd48      	ble.n	800d382 <__sflush_r+0xae>
 800d2f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	d045      	beq.n	800d382 <__sflush_r+0xae>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2fc:	682f      	ldr	r7, [r5, #0]
 800d2fe:	6a21      	ldr	r1, [r4, #32]
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	d030      	beq.n	800d366 <__sflush_r+0x92>
 800d304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d306:	89a3      	ldrh	r3, [r4, #12]
 800d308:	0759      	lsls	r1, r3, #29
 800d30a:	d505      	bpl.n	800d318 <__sflush_r+0x44>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	1ad2      	subs	r2, r2, r3
 800d310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d312:	b10b      	cbz	r3, 800d318 <__sflush_r+0x44>
 800d314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d316:	1ad2      	subs	r2, r2, r3
 800d318:	2300      	movs	r3, #0
 800d31a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d31c:	6a21      	ldr	r1, [r4, #32]
 800d31e:	4628      	mov	r0, r5
 800d320:	47b0      	blx	r6
 800d322:	1c43      	adds	r3, r0, #1
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	d106      	bne.n	800d336 <__sflush_r+0x62>
 800d328:	6829      	ldr	r1, [r5, #0]
 800d32a:	291d      	cmp	r1, #29
 800d32c:	d82b      	bhi.n	800d386 <__sflush_r+0xb2>
 800d32e:	4a2a      	ldr	r2, [pc, #168]	@ (800d3d8 <__sflush_r+0x104>)
 800d330:	410a      	asrs	r2, r1
 800d332:	07d6      	lsls	r6, r2, #31
 800d334:	d427      	bmi.n	800d386 <__sflush_r+0xb2>
 800d336:	2200      	movs	r2, #0
 800d338:	6062      	str	r2, [r4, #4]
 800d33a:	04d9      	lsls	r1, r3, #19
 800d33c:	6922      	ldr	r2, [r4, #16]
 800d33e:	6022      	str	r2, [r4, #0]
 800d340:	d504      	bpl.n	800d34c <__sflush_r+0x78>
 800d342:	1c42      	adds	r2, r0, #1
 800d344:	d101      	bne.n	800d34a <__sflush_r+0x76>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	b903      	cbnz	r3, 800d34c <__sflush_r+0x78>
 800d34a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d34e:	602f      	str	r7, [r5, #0]
 800d350:	b1b9      	cbz	r1, 800d382 <__sflush_r+0xae>
 800d352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d356:	4299      	cmp	r1, r3
 800d358:	d002      	beq.n	800d360 <__sflush_r+0x8c>
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7fe fc50 	bl	800bc00 <_free_r>
 800d360:	2300      	movs	r3, #0
 800d362:	6363      	str	r3, [r4, #52]	@ 0x34
 800d364:	e00d      	b.n	800d382 <__sflush_r+0xae>
 800d366:	2301      	movs	r3, #1
 800d368:	4628      	mov	r0, r5
 800d36a:	47b0      	blx	r6
 800d36c:	4602      	mov	r2, r0
 800d36e:	1c50      	adds	r0, r2, #1
 800d370:	d1c9      	bne.n	800d306 <__sflush_r+0x32>
 800d372:	682b      	ldr	r3, [r5, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0c6      	beq.n	800d306 <__sflush_r+0x32>
 800d378:	2b1d      	cmp	r3, #29
 800d37a:	d001      	beq.n	800d380 <__sflush_r+0xac>
 800d37c:	2b16      	cmp	r3, #22
 800d37e:	d11e      	bne.n	800d3be <__sflush_r+0xea>
 800d380:	602f      	str	r7, [r5, #0]
 800d382:	2000      	movs	r0, #0
 800d384:	e022      	b.n	800d3cc <__sflush_r+0xf8>
 800d386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d38a:	b21b      	sxth	r3, r3
 800d38c:	e01b      	b.n	800d3c6 <__sflush_r+0xf2>
 800d38e:	690f      	ldr	r7, [r1, #16]
 800d390:	2f00      	cmp	r7, #0
 800d392:	d0f6      	beq.n	800d382 <__sflush_r+0xae>
 800d394:	0793      	lsls	r3, r2, #30
 800d396:	680e      	ldr	r6, [r1, #0]
 800d398:	bf08      	it	eq
 800d39a:	694b      	ldreq	r3, [r1, #20]
 800d39c:	600f      	str	r7, [r1, #0]
 800d39e:	bf18      	it	ne
 800d3a0:	2300      	movne	r3, #0
 800d3a2:	eba6 0807 	sub.w	r8, r6, r7
 800d3a6:	608b      	str	r3, [r1, #8]
 800d3a8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ac:	dde9      	ble.n	800d382 <__sflush_r+0xae>
 800d3ae:	6a21      	ldr	r1, [r4, #32]
 800d3b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3b2:	4643      	mov	r3, r8
 800d3b4:	463a      	mov	r2, r7
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	47b0      	blx	r6
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	dc08      	bgt.n	800d3d0 <__sflush_r+0xfc>
 800d3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d0:	4407      	add	r7, r0
 800d3d2:	eba8 0800 	sub.w	r8, r8, r0
 800d3d6:	e7e7      	b.n	800d3a8 <__sflush_r+0xd4>
 800d3d8:	dfbffffe 	.word	0xdfbffffe

0800d3dc <_fflush_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	690b      	ldr	r3, [r1, #16]
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	b913      	cbnz	r3, 800d3ec <_fflush_r+0x10>
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	b118      	cbz	r0, 800d3f6 <_fflush_r+0x1a>
 800d3ee:	6a03      	ldr	r3, [r0, #32]
 800d3f0:	b90b      	cbnz	r3, 800d3f6 <_fflush_r+0x1a>
 800d3f2:	f7fd fac7 	bl	800a984 <__sinit>
 800d3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0f3      	beq.n	800d3e6 <_fflush_r+0xa>
 800d3fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d400:	07d0      	lsls	r0, r2, #31
 800d402:	d404      	bmi.n	800d40e <_fflush_r+0x32>
 800d404:	0599      	lsls	r1, r3, #22
 800d406:	d402      	bmi.n	800d40e <_fflush_r+0x32>
 800d408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d40a:	f7fd fd70 	bl	800aeee <__retarget_lock_acquire_recursive>
 800d40e:	4628      	mov	r0, r5
 800d410:	4621      	mov	r1, r4
 800d412:	f7ff ff5f 	bl	800d2d4 <__sflush_r>
 800d416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d418:	07da      	lsls	r2, r3, #31
 800d41a:	4605      	mov	r5, r0
 800d41c:	d4e4      	bmi.n	800d3e8 <_fflush_r+0xc>
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	059b      	lsls	r3, r3, #22
 800d422:	d4e1      	bmi.n	800d3e8 <_fflush_r+0xc>
 800d424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d426:	f7fd fd63 	bl	800aef0 <__retarget_lock_release_recursive>
 800d42a:	e7dd      	b.n	800d3e8 <_fflush_r+0xc>

0800d42c <fiprintf>:
 800d42c:	b40e      	push	{r1, r2, r3}
 800d42e:	b503      	push	{r0, r1, lr}
 800d430:	4601      	mov	r1, r0
 800d432:	ab03      	add	r3, sp, #12
 800d434:	4805      	ldr	r0, [pc, #20]	@ (800d44c <fiprintf+0x20>)
 800d436:	f853 2b04 	ldr.w	r2, [r3], #4
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	f7ff fe31 	bl	800d0a4 <_vfiprintf_r>
 800d442:	b002      	add	sp, #8
 800d444:	f85d eb04 	ldr.w	lr, [sp], #4
 800d448:	b003      	add	sp, #12
 800d44a:	4770      	bx	lr
 800d44c:	20000198 	.word	0x20000198

0800d450 <__swhatbuf_r>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	460c      	mov	r4, r1
 800d454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d458:	2900      	cmp	r1, #0
 800d45a:	b096      	sub	sp, #88	@ 0x58
 800d45c:	4615      	mov	r5, r2
 800d45e:	461e      	mov	r6, r3
 800d460:	da0d      	bge.n	800d47e <__swhatbuf_r+0x2e>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d468:	f04f 0100 	mov.w	r1, #0
 800d46c:	bf14      	ite	ne
 800d46e:	2340      	movne	r3, #64	@ 0x40
 800d470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d474:	2000      	movs	r0, #0
 800d476:	6031      	str	r1, [r6, #0]
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	b016      	add	sp, #88	@ 0x58
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
 800d47e:	466a      	mov	r2, sp
 800d480:	f000 f862 	bl	800d548 <_fstat_r>
 800d484:	2800      	cmp	r0, #0
 800d486:	dbec      	blt.n	800d462 <__swhatbuf_r+0x12>
 800d488:	9901      	ldr	r1, [sp, #4]
 800d48a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d48e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d492:	4259      	negs	r1, r3
 800d494:	4159      	adcs	r1, r3
 800d496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d49a:	e7eb      	b.n	800d474 <__swhatbuf_r+0x24>

0800d49c <__smakebuf_r>:
 800d49c:	898b      	ldrh	r3, [r1, #12]
 800d49e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a0:	079d      	lsls	r5, r3, #30
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	d507      	bpl.n	800d4b8 <__smakebuf_r+0x1c>
 800d4a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	6123      	str	r3, [r4, #16]
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	6163      	str	r3, [r4, #20]
 800d4b4:	b003      	add	sp, #12
 800d4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4b8:	ab01      	add	r3, sp, #4
 800d4ba:	466a      	mov	r2, sp
 800d4bc:	f7ff ffc8 	bl	800d450 <__swhatbuf_r>
 800d4c0:	9f00      	ldr	r7, [sp, #0]
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	4639      	mov	r1, r7
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7fb fc6a 	bl	8008da0 <_malloc_r>
 800d4cc:	b948      	cbnz	r0, 800d4e2 <__smakebuf_r+0x46>
 800d4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d2:	059a      	lsls	r2, r3, #22
 800d4d4:	d4ee      	bmi.n	800d4b4 <__smakebuf_r+0x18>
 800d4d6:	f023 0303 	bic.w	r3, r3, #3
 800d4da:	f043 0302 	orr.w	r3, r3, #2
 800d4de:	81a3      	strh	r3, [r4, #12]
 800d4e0:	e7e2      	b.n	800d4a8 <__smakebuf_r+0xc>
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	6020      	str	r0, [r4, #0]
 800d4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ea:	81a3      	strh	r3, [r4, #12]
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d4f2:	b15b      	cbz	r3, 800d50c <__smakebuf_r+0x70>
 800d4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f000 f837 	bl	800d56c <_isatty_r>
 800d4fe:	b128      	cbz	r0, 800d50c <__smakebuf_r+0x70>
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f023 0303 	bic.w	r3, r3, #3
 800d506:	f043 0301 	orr.w	r3, r3, #1
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	431d      	orrs	r5, r3
 800d510:	81a5      	strh	r5, [r4, #12]
 800d512:	e7cf      	b.n	800d4b4 <__smakebuf_r+0x18>

0800d514 <memmove>:
 800d514:	4288      	cmp	r0, r1
 800d516:	b510      	push	{r4, lr}
 800d518:	eb01 0402 	add.w	r4, r1, r2
 800d51c:	d902      	bls.n	800d524 <memmove+0x10>
 800d51e:	4284      	cmp	r4, r0
 800d520:	4623      	mov	r3, r4
 800d522:	d807      	bhi.n	800d534 <memmove+0x20>
 800d524:	1e43      	subs	r3, r0, #1
 800d526:	42a1      	cmp	r1, r4
 800d528:	d008      	beq.n	800d53c <memmove+0x28>
 800d52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d532:	e7f8      	b.n	800d526 <memmove+0x12>
 800d534:	4402      	add	r2, r0
 800d536:	4601      	mov	r1, r0
 800d538:	428a      	cmp	r2, r1
 800d53a:	d100      	bne.n	800d53e <memmove+0x2a>
 800d53c:	bd10      	pop	{r4, pc}
 800d53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d546:	e7f7      	b.n	800d538 <memmove+0x24>

0800d548 <_fstat_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d07      	ldr	r5, [pc, #28]	@ (800d568 <_fstat_r+0x20>)
 800d54c:	2300      	movs	r3, #0
 800d54e:	4604      	mov	r4, r0
 800d550:	4608      	mov	r0, r1
 800d552:	4611      	mov	r1, r2
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	f7f6 f983 	bl	8003860 <_fstat>
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d102      	bne.n	800d564 <_fstat_r+0x1c>
 800d55e:	682b      	ldr	r3, [r5, #0]
 800d560:	b103      	cbz	r3, 800d564 <_fstat_r+0x1c>
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	bf00      	nop
 800d568:	20000804 	.word	0x20000804

0800d56c <_isatty_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d06      	ldr	r5, [pc, #24]	@ (800d588 <_isatty_r+0x1c>)
 800d570:	2300      	movs	r3, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	602b      	str	r3, [r5, #0]
 800d578:	f7f6 f982 	bl	8003880 <_isatty>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_isatty_r+0x1a>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_isatty_r+0x1a>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	20000804 	.word	0x20000804

0800d58c <abort>:
 800d58c:	b508      	push	{r3, lr}
 800d58e:	2006      	movs	r0, #6
 800d590:	f000 f86e 	bl	800d670 <raise>
 800d594:	2001      	movs	r0, #1
 800d596:	f7f6 f913 	bl	80037c0 <_exit>

0800d59a <_calloc_r>:
 800d59a:	b570      	push	{r4, r5, r6, lr}
 800d59c:	fba1 5402 	umull	r5, r4, r1, r2
 800d5a0:	b93c      	cbnz	r4, 800d5b2 <_calloc_r+0x18>
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	f7fb fbfc 	bl	8008da0 <_malloc_r>
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	b928      	cbnz	r0, 800d5b8 <_calloc_r+0x1e>
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	bd70      	pop	{r4, r5, r6, pc}
 800d5b2:	220c      	movs	r2, #12
 800d5b4:	6002      	str	r2, [r0, #0]
 800d5b6:	e7f9      	b.n	800d5ac <_calloc_r+0x12>
 800d5b8:	462a      	mov	r2, r5
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	f7fd fb80 	bl	800acc0 <memset>
 800d5c0:	e7f5      	b.n	800d5ae <_calloc_r+0x14>

0800d5c2 <_realloc_r>:
 800d5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	4615      	mov	r5, r2
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	b921      	cbnz	r1, 800d5d8 <_realloc_r+0x16>
 800d5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	f7fb bbe4 	b.w	8008da0 <_malloc_r>
 800d5d8:	b92a      	cbnz	r2, 800d5e6 <_realloc_r+0x24>
 800d5da:	f7fe fb11 	bl	800bc00 <_free_r>
 800d5de:	2400      	movs	r4, #0
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e6:	f000 f85f 	bl	800d6a8 <_malloc_usable_size_r>
 800d5ea:	4285      	cmp	r5, r0
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	d802      	bhi.n	800d5f6 <_realloc_r+0x34>
 800d5f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5f4:	d8f4      	bhi.n	800d5e0 <_realloc_r+0x1e>
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	f7fb fbd1 	bl	8008da0 <_malloc_r>
 800d5fe:	4607      	mov	r7, r0
 800d600:	2800      	cmp	r0, #0
 800d602:	d0ec      	beq.n	800d5de <_realloc_r+0x1c>
 800d604:	42b5      	cmp	r5, r6
 800d606:	462a      	mov	r2, r5
 800d608:	4621      	mov	r1, r4
 800d60a:	bf28      	it	cs
 800d60c:	4632      	movcs	r2, r6
 800d60e:	f7fd fc70 	bl	800aef2 <memcpy>
 800d612:	4621      	mov	r1, r4
 800d614:	4640      	mov	r0, r8
 800d616:	f7fe faf3 	bl	800bc00 <_free_r>
 800d61a:	463c      	mov	r4, r7
 800d61c:	e7e0      	b.n	800d5e0 <_realloc_r+0x1e>

0800d61e <_raise_r>:
 800d61e:	291f      	cmp	r1, #31
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4605      	mov	r5, r0
 800d624:	460c      	mov	r4, r1
 800d626:	d904      	bls.n	800d632 <_raise_r+0x14>
 800d628:	2316      	movs	r3, #22
 800d62a:	6003      	str	r3, [r0, #0]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d634:	b112      	cbz	r2, 800d63c <_raise_r+0x1e>
 800d636:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d63a:	b94b      	cbnz	r3, 800d650 <_raise_r+0x32>
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 f831 	bl	800d6a4 <_getpid_r>
 800d642:	4622      	mov	r2, r4
 800d644:	4601      	mov	r1, r0
 800d646:	4628      	mov	r0, r5
 800d648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d64c:	f000 b818 	b.w	800d680 <_kill_r>
 800d650:	2b01      	cmp	r3, #1
 800d652:	d00a      	beq.n	800d66a <_raise_r+0x4c>
 800d654:	1c59      	adds	r1, r3, #1
 800d656:	d103      	bne.n	800d660 <_raise_r+0x42>
 800d658:	2316      	movs	r3, #22
 800d65a:	6003      	str	r3, [r0, #0]
 800d65c:	2001      	movs	r0, #1
 800d65e:	e7e7      	b.n	800d630 <_raise_r+0x12>
 800d660:	2100      	movs	r1, #0
 800d662:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d666:	4620      	mov	r0, r4
 800d668:	4798      	blx	r3
 800d66a:	2000      	movs	r0, #0
 800d66c:	e7e0      	b.n	800d630 <_raise_r+0x12>
	...

0800d670 <raise>:
 800d670:	4b02      	ldr	r3, [pc, #8]	@ (800d67c <raise+0xc>)
 800d672:	4601      	mov	r1, r0
 800d674:	6818      	ldr	r0, [r3, #0]
 800d676:	f7ff bfd2 	b.w	800d61e <_raise_r>
 800d67a:	bf00      	nop
 800d67c:	20000198 	.word	0x20000198

0800d680 <_kill_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	@ (800d6a0 <_kill_r+0x20>)
 800d684:	2300      	movs	r3, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f6 f887 	bl	80037a0 <_kill>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d102      	bne.n	800d69c <_kill_r+0x1c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b103      	cbz	r3, 800d69c <_kill_r+0x1c>
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	bd38      	pop	{r3, r4, r5, pc}
 800d69e:	bf00      	nop
 800d6a0:	20000804 	.word	0x20000804

0800d6a4 <_getpid_r>:
 800d6a4:	f7f6 b874 	b.w	8003790 <_getpid>

0800d6a8 <_malloc_usable_size_r>:
 800d6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ac:	1f18      	subs	r0, r3, #4
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	bfbc      	itt	lt
 800d6b2:	580b      	ldrlt	r3, [r1, r0]
 800d6b4:	18c0      	addlt	r0, r0, r3
 800d6b6:	4770      	bx	lr

0800d6b8 <_init>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	bf00      	nop
 800d6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6be:	bc08      	pop	{r3}
 800d6c0:	469e      	mov	lr, r3
 800d6c2:	4770      	bx	lr

0800d6c4 <_fini>:
 800d6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c6:	bf00      	nop
 800d6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ca:	bc08      	pop	{r3}
 800d6cc:	469e      	mov	lr, r3
 800d6ce:	4770      	bx	lr
